#include "stm32l4xx.h"
#include "stdio.h"

void PC13_EXTI_Init(void)
{
    // 1. Enable GPIOC clock
    SET_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOCEN);

    // 2. Set PC13 as input (optional, default is input mode after reset)
    CLEAR_BIT(GPIOC->MODER, GPIO_MODER_MODE13_Msk); // Clear both bits [27:26]

    // 3. Enable SYSCFG clock
    SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN);

    // 4. Connect EXTI13 to PC13
    MODIFY_REG(SYSCFG->EXTICR[3], SYSCFG_EXTICR4_EXTI13, SYSCFG_EXTICR4_EXTI13_PC);

    // 5. Configure EXTI13 for falling edge trigger
    SET_BIT(EXTI->FTSR1, EXTI_FTSR1_FT13);     // Enable falling trigger
    CLEAR_BIT(EXTI->RTSR1, EXTI_RTSR1_RT13);    // Disable rising trigger (optional)

    // 6. Unmask EXTI13 (enable interrupt)
    SET_BIT(EXTI->IMR1, EXTI_IMR1_IM13);

    // 7. Enable EXTI15_10_IRQn in NVIC
    NVIC_EnableIRQ(EXTI15_10_IRQn);
}


void EXTI15_10_IRQHandler(void)
{
    if (READ_BIT(EXTI->PR1, EXTI_PR1_PIF13))
    {
        WRITE_REG(EXTI->PR1, EXTI_PR1_PIF13); // Clear pending flag by writing 1

        // Example: toggle PA5 (LED)
        GPIOA->ODR ^= GPIO_ODR_OD5;
    }
}

void LED_Init(void)
{
    // Enable GPIOA clock
    SET_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOAEN);

    // Set PA5 as output
    MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODE5_Msk, GPIO_MODER_MODE5_0); // Set PA5 to output (01)
}

//int main(void)
//{
//    PC13_EXTI_Init();
//    LED_Init();
//
//    while (1)
//    {
//        // Wait for interrupt
//    }
//}
