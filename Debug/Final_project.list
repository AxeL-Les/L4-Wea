
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a994  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002288  0800ab28  0800ab28  0000bb28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdb0  0800cdb0  0000e1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cdb0  0800cdb0  0000ddb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdb8  0800cdb8  0000e1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdb8  0800cdb8  0000ddb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cdbc  0800cdbc  0000ddbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800cdc0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200001e4  0800cfa4  0000e1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800cfa4  0000e504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171c3  00000000  00000000  0000e214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a7b  00000000  00000000  000253d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00028e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000293b6  00000000  00000000  0002a2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001bf1f  00000000  00000000  00053666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f6a27  00000000  00000000  0006f585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00165fac  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000f7a  00000000  00000000  00165fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066a4  00000000  00000000  00166f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0016d610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab0c 	.word	0x0800ab0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800ab0c 	.word	0x0800ab0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	bf28      	it	cs
 8000d04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d08:	d2ed      	bcs.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_ldivmod>:
 8000e64:	b97b      	cbnz	r3, 8000e86 <__aeabi_ldivmod+0x22>
 8000e66:	b972      	cbnz	r2, 8000e86 <__aeabi_ldivmod+0x22>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	bfbe      	ittt	lt
 8000e6c:	2000      	movlt	r0, #0
 8000e6e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000e72:	e006      	blt.n	8000e82 <__aeabi_ldivmod+0x1e>
 8000e74:	bf08      	it	eq
 8000e76:	2800      	cmpeq	r0, #0
 8000e78:	bf1c      	itt	ne
 8000e7a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000e7e:	f04f 30ff 	movne.w	r0, #4294967295
 8000e82:	f000 b9bb 	b.w	80011fc <__aeabi_idiv0>
 8000e86:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e8a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e8e:	2900      	cmp	r1, #0
 8000e90:	db09      	blt.n	8000ea6 <__aeabi_ldivmod+0x42>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db1a      	blt.n	8000ecc <__aeabi_ldivmod+0x68>
 8000e96:	f000 f835 	bl	8000f04 <__udivmoddi4>
 8000e9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea2:	b004      	add	sp, #16
 8000ea4:	4770      	bx	lr
 8000ea6:	4240      	negs	r0, r0
 8000ea8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db1b      	blt.n	8000ee8 <__aeabi_ldivmod+0x84>
 8000eb0:	f000 f828 	bl	8000f04 <__udivmoddi4>
 8000eb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ebc:	b004      	add	sp, #16
 8000ebe:	4240      	negs	r0, r0
 8000ec0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ec4:	4252      	negs	r2, r2
 8000ec6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eca:	4770      	bx	lr
 8000ecc:	4252      	negs	r2, r2
 8000ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ed2:	f000 f817 	bl	8000f04 <__udivmoddi4>
 8000ed6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ede:	b004      	add	sp, #16
 8000ee0:	4240      	negs	r0, r0
 8000ee2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ee6:	4770      	bx	lr
 8000ee8:	4252      	negs	r2, r2
 8000eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eee:	f000 f809 	bl	8000f04 <__udivmoddi4>
 8000ef2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efa:	b004      	add	sp, #16
 8000efc:	4252      	negs	r2, r2
 8000efe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f02:	4770      	bx	lr

08000f04 <__udivmoddi4>:
 8000f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f08:	9d08      	ldr	r5, [sp, #32]
 8000f0a:	468e      	mov	lr, r1
 8000f0c:	4604      	mov	r4, r0
 8000f0e:	4688      	mov	r8, r1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d14a      	bne.n	8000faa <__udivmoddi4+0xa6>
 8000f14:	428a      	cmp	r2, r1
 8000f16:	4617      	mov	r7, r2
 8000f18:	d962      	bls.n	8000fe0 <__udivmoddi4+0xdc>
 8000f1a:	fab2 f682 	clz	r6, r2
 8000f1e:	b14e      	cbz	r6, 8000f34 <__udivmoddi4+0x30>
 8000f20:	f1c6 0320 	rsb	r3, r6, #32
 8000f24:	fa01 f806 	lsl.w	r8, r1, r6
 8000f28:	fa20 f303 	lsr.w	r3, r0, r3
 8000f2c:	40b7      	lsls	r7, r6
 8000f2e:	ea43 0808 	orr.w	r8, r3, r8
 8000f32:	40b4      	lsls	r4, r6
 8000f34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f38:	fa1f fc87 	uxth.w	ip, r7
 8000f3c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000f40:	0c23      	lsrs	r3, r4, #16
 8000f42:	fb0e 8811 	mls	r8, lr, r1, r8
 8000f46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f4a:	fb01 f20c 	mul.w	r2, r1, ip
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d909      	bls.n	8000f66 <__udivmoddi4+0x62>
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	f101 30ff 	add.w	r0, r1, #4294967295
 8000f58:	f080 80ea 	bcs.w	8001130 <__udivmoddi4+0x22c>
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	f240 80e7 	bls.w	8001130 <__udivmoddi4+0x22c>
 8000f62:	3902      	subs	r1, #2
 8000f64:	443b      	add	r3, r7
 8000f66:	1a9a      	subs	r2, r3, r2
 8000f68:	b2a3      	uxth	r3, r4
 8000f6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f76:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f7a:	459c      	cmp	ip, r3
 8000f7c:	d909      	bls.n	8000f92 <__udivmoddi4+0x8e>
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f84:	f080 80d6 	bcs.w	8001134 <__udivmoddi4+0x230>
 8000f88:	459c      	cmp	ip, r3
 8000f8a:	f240 80d3 	bls.w	8001134 <__udivmoddi4+0x230>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3802      	subs	r0, #2
 8000f92:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f96:	eba3 030c 	sub.w	r3, r3, ip
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	b11d      	cbz	r5, 8000fa6 <__udivmoddi4+0xa2>
 8000f9e:	40f3      	lsrs	r3, r6
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	e9c5 3200 	strd	r3, r2, [r5]
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d905      	bls.n	8000fba <__udivmoddi4+0xb6>
 8000fae:	b10d      	cbz	r5, 8000fb4 <__udivmoddi4+0xb0>
 8000fb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e7f5      	b.n	8000fa6 <__udivmoddi4+0xa2>
 8000fba:	fab3 f183 	clz	r1, r3
 8000fbe:	2900      	cmp	r1, #0
 8000fc0:	d146      	bne.n	8001050 <__udivmoddi4+0x14c>
 8000fc2:	4573      	cmp	r3, lr
 8000fc4:	d302      	bcc.n	8000fcc <__udivmoddi4+0xc8>
 8000fc6:	4282      	cmp	r2, r0
 8000fc8:	f200 8105 	bhi.w	80011d6 <__udivmoddi4+0x2d2>
 8000fcc:	1a84      	subs	r4, r0, r2
 8000fce:	eb6e 0203 	sbc.w	r2, lr, r3
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	4690      	mov	r8, r2
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d0e5      	beq.n	8000fa6 <__udivmoddi4+0xa2>
 8000fda:	e9c5 4800 	strd	r4, r8, [r5]
 8000fde:	e7e2      	b.n	8000fa6 <__udivmoddi4+0xa2>
 8000fe0:	2a00      	cmp	r2, #0
 8000fe2:	f000 8090 	beq.w	8001106 <__udivmoddi4+0x202>
 8000fe6:	fab2 f682 	clz	r6, r2
 8000fea:	2e00      	cmp	r6, #0
 8000fec:	f040 80a4 	bne.w	8001138 <__udivmoddi4+0x234>
 8000ff0:	1a8a      	subs	r2, r1, r2
 8000ff2:	0c03      	lsrs	r3, r0, #16
 8000ff4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ff8:	b280      	uxth	r0, r0
 8000ffa:	b2bc      	uxth	r4, r7
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	fbb2 fcfe 	udiv	ip, r2, lr
 8001002:	fb0e 221c 	mls	r2, lr, ip, r2
 8001006:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800100a:	fb04 f20c 	mul.w	r2, r4, ip
 800100e:	429a      	cmp	r2, r3
 8001010:	d907      	bls.n	8001022 <__udivmoddi4+0x11e>
 8001012:	18fb      	adds	r3, r7, r3
 8001014:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001018:	d202      	bcs.n	8001020 <__udivmoddi4+0x11c>
 800101a:	429a      	cmp	r2, r3
 800101c:	f200 80e0 	bhi.w	80011e0 <__udivmoddi4+0x2dc>
 8001020:	46c4      	mov	ip, r8
 8001022:	1a9b      	subs	r3, r3, r2
 8001024:	fbb3 f2fe 	udiv	r2, r3, lr
 8001028:	fb0e 3312 	mls	r3, lr, r2, r3
 800102c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001030:	fb02 f404 	mul.w	r4, r2, r4
 8001034:	429c      	cmp	r4, r3
 8001036:	d907      	bls.n	8001048 <__udivmoddi4+0x144>
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	f102 30ff 	add.w	r0, r2, #4294967295
 800103e:	d202      	bcs.n	8001046 <__udivmoddi4+0x142>
 8001040:	429c      	cmp	r4, r3
 8001042:	f200 80ca 	bhi.w	80011da <__udivmoddi4+0x2d6>
 8001046:	4602      	mov	r2, r0
 8001048:	1b1b      	subs	r3, r3, r4
 800104a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800104e:	e7a5      	b.n	8000f9c <__udivmoddi4+0x98>
 8001050:	f1c1 0620 	rsb	r6, r1, #32
 8001054:	408b      	lsls	r3, r1
 8001056:	fa22 f706 	lsr.w	r7, r2, r6
 800105a:	431f      	orrs	r7, r3
 800105c:	fa0e f401 	lsl.w	r4, lr, r1
 8001060:	fa20 f306 	lsr.w	r3, r0, r6
 8001064:	fa2e fe06 	lsr.w	lr, lr, r6
 8001068:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800106c:	4323      	orrs	r3, r4
 800106e:	fa00 f801 	lsl.w	r8, r0, r1
 8001072:	fa1f fc87 	uxth.w	ip, r7
 8001076:	fbbe f0f9 	udiv	r0, lr, r9
 800107a:	0c1c      	lsrs	r4, r3, #16
 800107c:	fb09 ee10 	mls	lr, r9, r0, lr
 8001080:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001084:	fb00 fe0c 	mul.w	lr, r0, ip
 8001088:	45a6      	cmp	lr, r4
 800108a:	fa02 f201 	lsl.w	r2, r2, r1
 800108e:	d909      	bls.n	80010a4 <__udivmoddi4+0x1a0>
 8001090:	193c      	adds	r4, r7, r4
 8001092:	f100 3aff 	add.w	sl, r0, #4294967295
 8001096:	f080 809c 	bcs.w	80011d2 <__udivmoddi4+0x2ce>
 800109a:	45a6      	cmp	lr, r4
 800109c:	f240 8099 	bls.w	80011d2 <__udivmoddi4+0x2ce>
 80010a0:	3802      	subs	r0, #2
 80010a2:	443c      	add	r4, r7
 80010a4:	eba4 040e 	sub.w	r4, r4, lr
 80010a8:	fa1f fe83 	uxth.w	lr, r3
 80010ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80010b0:	fb09 4413 	mls	r4, r9, r3, r4
 80010b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80010b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80010bc:	45a4      	cmp	ip, r4
 80010be:	d908      	bls.n	80010d2 <__udivmoddi4+0x1ce>
 80010c0:	193c      	adds	r4, r7, r4
 80010c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80010c6:	f080 8082 	bcs.w	80011ce <__udivmoddi4+0x2ca>
 80010ca:	45a4      	cmp	ip, r4
 80010cc:	d97f      	bls.n	80011ce <__udivmoddi4+0x2ca>
 80010ce:	3b02      	subs	r3, #2
 80010d0:	443c      	add	r4, r7
 80010d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80010d6:	eba4 040c 	sub.w	r4, r4, ip
 80010da:	fba0 ec02 	umull	lr, ip, r0, r2
 80010de:	4564      	cmp	r4, ip
 80010e0:	4673      	mov	r3, lr
 80010e2:	46e1      	mov	r9, ip
 80010e4:	d362      	bcc.n	80011ac <__udivmoddi4+0x2a8>
 80010e6:	d05f      	beq.n	80011a8 <__udivmoddi4+0x2a4>
 80010e8:	b15d      	cbz	r5, 8001102 <__udivmoddi4+0x1fe>
 80010ea:	ebb8 0203 	subs.w	r2, r8, r3
 80010ee:	eb64 0409 	sbc.w	r4, r4, r9
 80010f2:	fa04 f606 	lsl.w	r6, r4, r6
 80010f6:	fa22 f301 	lsr.w	r3, r2, r1
 80010fa:	431e      	orrs	r6, r3
 80010fc:	40cc      	lsrs	r4, r1
 80010fe:	e9c5 6400 	strd	r6, r4, [r5]
 8001102:	2100      	movs	r1, #0
 8001104:	e74f      	b.n	8000fa6 <__udivmoddi4+0xa2>
 8001106:	fbb1 fcf2 	udiv	ip, r1, r2
 800110a:	0c01      	lsrs	r1, r0, #16
 800110c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001110:	b280      	uxth	r0, r0
 8001112:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001116:	463b      	mov	r3, r7
 8001118:	4638      	mov	r0, r7
 800111a:	463c      	mov	r4, r7
 800111c:	46b8      	mov	r8, r7
 800111e:	46be      	mov	lr, r7
 8001120:	2620      	movs	r6, #32
 8001122:	fbb1 f1f7 	udiv	r1, r1, r7
 8001126:	eba2 0208 	sub.w	r2, r2, r8
 800112a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800112e:	e766      	b.n	8000ffe <__udivmoddi4+0xfa>
 8001130:	4601      	mov	r1, r0
 8001132:	e718      	b.n	8000f66 <__udivmoddi4+0x62>
 8001134:	4610      	mov	r0, r2
 8001136:	e72c      	b.n	8000f92 <__udivmoddi4+0x8e>
 8001138:	f1c6 0220 	rsb	r2, r6, #32
 800113c:	fa2e f302 	lsr.w	r3, lr, r2
 8001140:	40b7      	lsls	r7, r6
 8001142:	40b1      	lsls	r1, r6
 8001144:	fa20 f202 	lsr.w	r2, r0, r2
 8001148:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800114c:	430a      	orrs	r2, r1
 800114e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001152:	b2bc      	uxth	r4, r7
 8001154:	fb0e 3318 	mls	r3, lr, r8, r3
 8001158:	0c11      	lsrs	r1, r2, #16
 800115a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800115e:	fb08 f904 	mul.w	r9, r8, r4
 8001162:	40b0      	lsls	r0, r6
 8001164:	4589      	cmp	r9, r1
 8001166:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800116a:	b280      	uxth	r0, r0
 800116c:	d93e      	bls.n	80011ec <__udivmoddi4+0x2e8>
 800116e:	1879      	adds	r1, r7, r1
 8001170:	f108 3cff 	add.w	ip, r8, #4294967295
 8001174:	d201      	bcs.n	800117a <__udivmoddi4+0x276>
 8001176:	4589      	cmp	r9, r1
 8001178:	d81f      	bhi.n	80011ba <__udivmoddi4+0x2b6>
 800117a:	eba1 0109 	sub.w	r1, r1, r9
 800117e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001182:	fb09 f804 	mul.w	r8, r9, r4
 8001186:	fb0e 1119 	mls	r1, lr, r9, r1
 800118a:	b292      	uxth	r2, r2
 800118c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001190:	4542      	cmp	r2, r8
 8001192:	d229      	bcs.n	80011e8 <__udivmoddi4+0x2e4>
 8001194:	18ba      	adds	r2, r7, r2
 8001196:	f109 31ff 	add.w	r1, r9, #4294967295
 800119a:	d2c4      	bcs.n	8001126 <__udivmoddi4+0x222>
 800119c:	4542      	cmp	r2, r8
 800119e:	d2c2      	bcs.n	8001126 <__udivmoddi4+0x222>
 80011a0:	f1a9 0102 	sub.w	r1, r9, #2
 80011a4:	443a      	add	r2, r7
 80011a6:	e7be      	b.n	8001126 <__udivmoddi4+0x222>
 80011a8:	45f0      	cmp	r8, lr
 80011aa:	d29d      	bcs.n	80010e8 <__udivmoddi4+0x1e4>
 80011ac:	ebbe 0302 	subs.w	r3, lr, r2
 80011b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80011b4:	3801      	subs	r0, #1
 80011b6:	46e1      	mov	r9, ip
 80011b8:	e796      	b.n	80010e8 <__udivmoddi4+0x1e4>
 80011ba:	eba7 0909 	sub.w	r9, r7, r9
 80011be:	4449      	add	r1, r9
 80011c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80011c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80011c8:	fb09 f804 	mul.w	r8, r9, r4
 80011cc:	e7db      	b.n	8001186 <__udivmoddi4+0x282>
 80011ce:	4673      	mov	r3, lr
 80011d0:	e77f      	b.n	80010d2 <__udivmoddi4+0x1ce>
 80011d2:	4650      	mov	r0, sl
 80011d4:	e766      	b.n	80010a4 <__udivmoddi4+0x1a0>
 80011d6:	4608      	mov	r0, r1
 80011d8:	e6fd      	b.n	8000fd6 <__udivmoddi4+0xd2>
 80011da:	443b      	add	r3, r7
 80011dc:	3a02      	subs	r2, #2
 80011de:	e733      	b.n	8001048 <__udivmoddi4+0x144>
 80011e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011e4:	443b      	add	r3, r7
 80011e6:	e71c      	b.n	8001022 <__udivmoddi4+0x11e>
 80011e8:	4649      	mov	r1, r9
 80011ea:	e79c      	b.n	8001126 <__udivmoddi4+0x222>
 80011ec:	eba1 0109 	sub.w	r1, r1, r9
 80011f0:	46c4      	mov	ip, r8
 80011f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80011f6:	fb09 f804 	mul.w	r8, r9, r4
 80011fa:	e7c4      	b.n	8001186 <__udivmoddi4+0x282>

080011fc <__aeabi_idiv0>:
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop

08001200 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32l4xx_hal_spi.h"

extern SPI_HandleTypeDef hspi2;
void DEV_SPI_WriteByte(UBYTE value)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi2, &value, 1, 1000);
 800120a:	1df9      	adds	r1, r7, #7
 800120c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001210:	2201      	movs	r2, #1
 8001212:	4803      	ldr	r0, [pc, #12]	@ (8001220 <DEV_SPI_WriteByte+0x20>)
 8001214:	f005 fa3b 	bl	800668e <HAL_SPI_Transmit>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200002c4 	.word	0x200002c4

08001224 <DEV_Module_Init>:
	DEV_Digital_Write(EPD_CS_PIN, 1);
	return j;
}

int DEV_Module_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2102      	movs	r1, #2
 800122c:	4809      	ldr	r0, [pc, #36]	@ (8001254 <DEV_Module_Init+0x30>)
 800122e:	f002 fc53 	bl	8003ad8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001238:	4806      	ldr	r0, [pc, #24]	@ (8001254 <DEV_Module_Init+0x30>)
 800123a:	f002 fc4d 	bl	8003ad8 <HAL_GPIO_WritePin>
	//DEV_Digital_Write(EPD_PWR_PIN, 1);
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800123e:	2201      	movs	r2, #1
 8001240:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001244:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001248:	f002 fc46 	bl	8003ad8 <HAL_GPIO_WritePin>
    return 0;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	48000400 	.word	0x48000400

08001258 <EPD_2in13_V4_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_2in13_V4_Reset(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001262:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001266:	f002 fc37 	bl	8003ad8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(20);
 800126a:	2014      	movs	r0, #20
 800126c:	f002 f968 	bl	8003540 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001276:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127a:	f002 fc2d 	bl	8003ad8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 800127e:	2002      	movs	r0, #2
 8001280:	f002 f95e 	bl	8003540 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800128a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128e:	f002 fc23 	bl	8003ad8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(20);
 8001292:	2014      	movs	r0, #20
 8001294:	f002 f954 	bl	8003540 <HAL_Delay>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <EPD_2in13_V4_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_2in13_V4_SendCommand(UBYTE Reg)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2102      	movs	r1, #2
 80012aa:	480b      	ldr	r0, [pc, #44]	@ (80012d8 <EPD_2in13_V4_SendCommand+0x3c>)
 80012ac:	f002 fc14 	bl	8003ad8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012b6:	4808      	ldr	r0, [pc, #32]	@ (80012d8 <EPD_2in13_V4_SendCommand+0x3c>)
 80012b8:	f002 fc0e 	bl	8003ad8 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff9e 	bl	8001200 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012ca:	4803      	ldr	r0, [pc, #12]	@ (80012d8 <EPD_2in13_V4_SendCommand+0x3c>)
 80012cc:	f002 fc04 	bl	8003ad8 <HAL_GPIO_WritePin>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	48000400 	.word	0x48000400

080012dc <EPD_2in13_V4_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_2in13_V4_SendData(UBYTE Data)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 80012e6:	2201      	movs	r2, #1
 80012e8:	2102      	movs	r1, #2
 80012ea:	480b      	ldr	r0, [pc, #44]	@ (8001318 <EPD_2in13_V4_SendData+0x3c>)
 80012ec:	f002 fbf4 	bl	8003ad8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012f6:	4808      	ldr	r0, [pc, #32]	@ (8001318 <EPD_2in13_V4_SendData+0x3c>)
 80012f8:	f002 fbee 	bl	8003ad8 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff7e 	bl	8001200 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800130a:	4803      	ldr	r0, [pc, #12]	@ (8001318 <EPD_2in13_V4_SendData+0x3c>)
 800130c:	f002 fbe4 	bl	8003ad8 <HAL_GPIO_WritePin>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	48000400 	.word	0x48000400

0800131c <EPD_2in13_V4_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_2in13_V4_ReadBusy(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
    //Debug("e-Paper busy\r\n");
	while(1)
	{	 //=1 BUSY
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0)
 8001320:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001328:	f002 fbbe 	bl	8003aa8 <HAL_GPIO_ReadPin>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <EPD_2in13_V4_ReadBusy+0x1e>
			break;
		DEV_Delay_ms(10);
 8001332:	200a      	movs	r0, #10
 8001334:	f002 f904 	bl	8003540 <HAL_Delay>
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0)
 8001338:	e7f2      	b.n	8001320 <EPD_2in13_V4_ReadBusy+0x4>
			break;
 800133a:	bf00      	nop
	}
	DEV_Delay_ms(10);
 800133c:	200a      	movs	r0, #10
 800133e:	f002 f8ff 	bl	8003540 <HAL_Delay>
   // Debug("e-Paper busy release\r\n");
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}

08001346 <EPD_2in13_V4_SetWindows>:
	Ystart : Y-axis starting position
	Xend : End position of X-axis
	Yend : End position of Y-axis
******************************************************************************/
static void EPD_2in13_V4_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8001346:	b590      	push	{r4, r7, lr}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	4604      	mov	r4, r0
 800134e:	4608      	mov	r0, r1
 8001350:	4611      	mov	r1, r2
 8001352:	461a      	mov	r2, r3
 8001354:	4623      	mov	r3, r4
 8001356:	80fb      	strh	r3, [r7, #6]
 8001358:	4603      	mov	r3, r0
 800135a:	80bb      	strh	r3, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
 8001360:	4613      	mov	r3, r2
 8001362:	803b      	strh	r3, [r7, #0]
    EPD_2in13_V4_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8001364:	2044      	movs	r0, #68	@ 0x44
 8001366:	f7ff ff99 	bl	800129c <EPD_2in13_V4_SendCommand>
    EPD_2in13_V4_SendData((Xstart>>3) & 0xFF);
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	08db      	lsrs	r3, r3, #3
 800136e:	b29b      	uxth	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ffb2 	bl	80012dc <EPD_2in13_V4_SendData>
    EPD_2in13_V4_SendData((Xend>>3) & 0xFF);
 8001378:	887b      	ldrh	r3, [r7, #2]
 800137a:	08db      	lsrs	r3, r3, #3
 800137c:	b29b      	uxth	r3, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ffab 	bl	80012dc <EPD_2in13_V4_SendData>

    EPD_2in13_V4_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8001386:	2045      	movs	r0, #69	@ 0x45
 8001388:	f7ff ff88 	bl	800129c <EPD_2in13_V4_SendCommand>
    EPD_2in13_V4_SendData(Ystart & 0xFF);
 800138c:	88bb      	ldrh	r3, [r7, #4]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ffa3 	bl	80012dc <EPD_2in13_V4_SendData>
    EPD_2in13_V4_SendData((Ystart >> 8) & 0xFF);
 8001396:	88bb      	ldrh	r3, [r7, #4]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	b29b      	uxth	r3, r3
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff9c 	bl	80012dc <EPD_2in13_V4_SendData>
    EPD_2in13_V4_SendData(Yend & 0xFF);
 80013a4:	883b      	ldrh	r3, [r7, #0]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff97 	bl	80012dc <EPD_2in13_V4_SendData>
    EPD_2in13_V4_SendData((Yend >> 8) & 0xFF);
 80013ae:	883b      	ldrh	r3, [r7, #0]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff90 	bl	80012dc <EPD_2in13_V4_SendData>
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd90      	pop	{r4, r7, pc}

080013c4 <EPD_2in13_V4_SetCursor>:
parameter:
	Xstart : X-axis starting position
	Ystart : Y-axis starting position
******************************************************************************/
static void EPD_2in13_V4_SetCursor(UWORD Xstart, UWORD Ystart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	460a      	mov	r2, r1
 80013ce:	80fb      	strh	r3, [r7, #6]
 80013d0:	4613      	mov	r3, r2
 80013d2:	80bb      	strh	r3, [r7, #4]
    EPD_2in13_V4_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 80013d4:	204e      	movs	r0, #78	@ 0x4e
 80013d6:	f7ff ff61 	bl	800129c <EPD_2in13_V4_SendCommand>
    EPD_2in13_V4_SendData(Xstart & 0xFF);
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff7c 	bl	80012dc <EPD_2in13_V4_SendData>

    EPD_2in13_V4_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 80013e4:	204f      	movs	r0, #79	@ 0x4f
 80013e6:	f7ff ff59 	bl	800129c <EPD_2in13_V4_SendCommand>
    EPD_2in13_V4_SendData(Ystart & 0xFF);
 80013ea:	88bb      	ldrh	r3, [r7, #4]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff74 	bl	80012dc <EPD_2in13_V4_SendData>
    EPD_2in13_V4_SendData((Ystart >> 8) & 0xFF);
 80013f4:	88bb      	ldrh	r3, [r7, #4]
 80013f6:	0a1b      	lsrs	r3, r3, #8
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff6d 	bl	80012dc <EPD_2in13_V4_SendData>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <EPD_2in13_V4_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_2in13_V4_TurnOnDisplay(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	af00      	add	r7, sp, #0
	EPD_2in13_V4_SendCommand(0x22); // Display Update Control
 800140e:	2022      	movs	r0, #34	@ 0x22
 8001410:	f7ff ff44 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_SendData(0xf7);
 8001414:	20f7      	movs	r0, #247	@ 0xf7
 8001416:	f7ff ff61 	bl	80012dc <EPD_2in13_V4_SendData>
	EPD_2in13_V4_SendCommand(0x20); // Activate Display Update Sequence
 800141a:	2020      	movs	r0, #32
 800141c:	f7ff ff3e 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_ReadBusy();
 8001420:	f7ff ff7c 	bl	800131c <EPD_2in13_V4_ReadBusy>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <EPD_2in13_V4_TurnOnDisplay_Partial>:
	EPD_2in13_V4_SendCommand(0x20); // Activate Display Update Sequence
	EPD_2in13_V4_ReadBusy();
}

static void EPD_2in13_V4_TurnOnDisplay_Partial(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	EPD_2in13_V4_SendCommand(0x22); // Display Update Control
 800142c:	2022      	movs	r0, #34	@ 0x22
 800142e:	f7ff ff35 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_SendData(0xff);	// fast:0x0c, quality:0x0f, 0xcf
 8001432:	20ff      	movs	r0, #255	@ 0xff
 8001434:	f7ff ff52 	bl	80012dc <EPD_2in13_V4_SendData>
	EPD_2in13_V4_SendCommand(0x20); // Activate Display Update Sequence
 8001438:	2020      	movs	r0, #32
 800143a:	f7ff ff2f 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_ReadBusy();
 800143e:	f7ff ff6d 	bl	800131c <EPD_2in13_V4_ReadBusy>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}

08001446 <EPD_2in13_V4_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_2in13_V4_Init(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0
	EPD_2in13_V4_Reset();
 800144a:	f7ff ff05 	bl	8001258 <EPD_2in13_V4_Reset>

	EPD_2in13_V4_ReadBusy();
 800144e:	f7ff ff65 	bl	800131c <EPD_2in13_V4_ReadBusy>
	EPD_2in13_V4_SendCommand(0x12);  //SWRESET
 8001452:	2012      	movs	r0, #18
 8001454:	f7ff ff22 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_ReadBusy();
 8001458:	f7ff ff60 	bl	800131c <EPD_2in13_V4_ReadBusy>

	EPD_2in13_V4_SendCommand(0x01); //Driver output control
 800145c:	2001      	movs	r0, #1
 800145e:	f7ff ff1d 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_SendData(0xF9);
 8001462:	20f9      	movs	r0, #249	@ 0xf9
 8001464:	f7ff ff3a 	bl	80012dc <EPD_2in13_V4_SendData>
	EPD_2in13_V4_SendData(0x00);
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff ff37 	bl	80012dc <EPD_2in13_V4_SendData>
	EPD_2in13_V4_SendData(0x00);
 800146e:	2000      	movs	r0, #0
 8001470:	f7ff ff34 	bl	80012dc <EPD_2in13_V4_SendData>

	EPD_2in13_V4_SendCommand(0x11); //data entry mode
 8001474:	2011      	movs	r0, #17
 8001476:	f7ff ff11 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_SendData(0x03);
 800147a:	2003      	movs	r0, #3
 800147c:	f7ff ff2e 	bl	80012dc <EPD_2in13_V4_SendData>

	EPD_2in13_V4_SetWindows(0, 0, EPD_2in13_V4_WIDTH-1, EPD_2in13_V4_HEIGHT-1);
 8001480:	23f9      	movs	r3, #249	@ 0xf9
 8001482:	2279      	movs	r2, #121	@ 0x79
 8001484:	2100      	movs	r1, #0
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff ff5d 	bl	8001346 <EPD_2in13_V4_SetWindows>
	EPD_2in13_V4_SetCursor(0, 0);
 800148c:	2100      	movs	r1, #0
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff ff98 	bl	80013c4 <EPD_2in13_V4_SetCursor>

	EPD_2in13_V4_SendCommand(0x3C); //BorderWavefrom
 8001494:	203c      	movs	r0, #60	@ 0x3c
 8001496:	f7ff ff01 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_SendData(0x05);
 800149a:	2005      	movs	r0, #5
 800149c:	f7ff ff1e 	bl	80012dc <EPD_2in13_V4_SendData>

	EPD_2in13_V4_SendCommand(0x21); //  Display update control
 80014a0:	2021      	movs	r0, #33	@ 0x21
 80014a2:	f7ff fefb 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_SendData(0x00);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff ff18 	bl	80012dc <EPD_2in13_V4_SendData>
	EPD_2in13_V4_SendData(0x80);
 80014ac:	2080      	movs	r0, #128	@ 0x80
 80014ae:	f7ff ff15 	bl	80012dc <EPD_2in13_V4_SendData>

	EPD_2in13_V4_SendCommand(0x18); //Read built-in temperature sensor
 80014b2:	2018      	movs	r0, #24
 80014b4:	f7ff fef2 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_SendData(0x80);
 80014b8:	2080      	movs	r0, #128	@ 0x80
 80014ba:	f7ff ff0f 	bl	80012dc <EPD_2in13_V4_SendData>
	EPD_2in13_V4_ReadBusy();
 80014be:	f7ff ff2d 	bl	800131c <EPD_2in13_V4_ReadBusy>
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <EPD_2in13_V4_Init_Fast>:

void EPD_2in13_V4_Init_Fast(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	af00      	add	r7, sp, #0
	EPD_2in13_V4_Reset();
 80014ca:	f7ff fec5 	bl	8001258 <EPD_2in13_V4_Reset>

	EPD_2in13_V4_SendCommand(0x12);  //SWRESET
 80014ce:	2012      	movs	r0, #18
 80014d0:	f7ff fee4 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_ReadBusy();
 80014d4:	f7ff ff22 	bl	800131c <EPD_2in13_V4_ReadBusy>

	EPD_2in13_V4_SendCommand(0x18); //Read built-in temperature sensor
 80014d8:	2018      	movs	r0, #24
 80014da:	f7ff fedf 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_SendData(0x80);
 80014de:	2080      	movs	r0, #128	@ 0x80
 80014e0:	f7ff fefc 	bl	80012dc <EPD_2in13_V4_SendData>

	EPD_2in13_V4_SendCommand(0x11); //data entry mode
 80014e4:	2011      	movs	r0, #17
 80014e6:	f7ff fed9 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_SendData(0x03);
 80014ea:	2003      	movs	r0, #3
 80014ec:	f7ff fef6 	bl	80012dc <EPD_2in13_V4_SendData>

	EPD_2in13_V4_SetWindows(0, 0, EPD_2in13_V4_WIDTH-1, EPD_2in13_V4_HEIGHT-1);
 80014f0:	23f9      	movs	r3, #249	@ 0xf9
 80014f2:	2279      	movs	r2, #121	@ 0x79
 80014f4:	2100      	movs	r1, #0
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff ff25 	bl	8001346 <EPD_2in13_V4_SetWindows>
	EPD_2in13_V4_SetCursor(0, 0);
 80014fc:	2100      	movs	r1, #0
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff ff60 	bl	80013c4 <EPD_2in13_V4_SetCursor>

	EPD_2in13_V4_SendCommand(0x22); // Load temperature value
 8001504:	2022      	movs	r0, #34	@ 0x22
 8001506:	f7ff fec9 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_SendData(0xB1);
 800150a:	20b1      	movs	r0, #177	@ 0xb1
 800150c:	f7ff fee6 	bl	80012dc <EPD_2in13_V4_SendData>
	EPD_2in13_V4_SendCommand(0x20);
 8001510:	2020      	movs	r0, #32
 8001512:	f7ff fec3 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_ReadBusy();
 8001516:	f7ff ff01 	bl	800131c <EPD_2in13_V4_ReadBusy>

	EPD_2in13_V4_SendCommand(0x1A); // Write to temperature register
 800151a:	201a      	movs	r0, #26
 800151c:	f7ff febe 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_SendData(0x64);
 8001520:	2064      	movs	r0, #100	@ 0x64
 8001522:	f7ff fedb 	bl	80012dc <EPD_2in13_V4_SendData>
	EPD_2in13_V4_SendData(0x00);
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff fed8 	bl	80012dc <EPD_2in13_V4_SendData>

	EPD_2in13_V4_SendCommand(0x22); // Load temperature value
 800152c:	2022      	movs	r0, #34	@ 0x22
 800152e:	f7ff feb5 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_SendData(0x91);
 8001532:	2091      	movs	r0, #145	@ 0x91
 8001534:	f7ff fed2 	bl	80012dc <EPD_2in13_V4_SendData>
	EPD_2in13_V4_SendCommand(0x20);
 8001538:	2020      	movs	r0, #32
 800153a:	f7ff feaf 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_ReadBusy();
 800153e:	f7ff feed 	bl	800131c <EPD_2in13_V4_ReadBusy>
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}

08001546 <EPD_2in13_V4_Display_Base>:
function :	Refresh a base image
parameter:
	Image : Image data
******************************************************************************/
void EPD_2in13_V4_Display_Base(UBYTE *Image)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
	UWORD Width, Height;
    Width = (EPD_2in13_V4_WIDTH % 8 == 0)? (EPD_2in13_V4_WIDTH / 8 ): (EPD_2in13_V4_WIDTH / 8 + 1);
 800154e:	2310      	movs	r3, #16
 8001550:	81fb      	strh	r3, [r7, #14]
    Height = EPD_2in13_V4_HEIGHT;
 8001552:	23fa      	movs	r3, #250	@ 0xfa
 8001554:	81bb      	strh	r3, [r7, #12]

	EPD_2in13_V4_SendCommand(0x24);   //Write Black and White image to RAM
 8001556:	2024      	movs	r0, #36	@ 0x24
 8001558:	f7ff fea0 	bl	800129c <EPD_2in13_V4_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800155c:	2300      	movs	r3, #0
 800155e:	82fb      	strh	r3, [r7, #22]
 8001560:	e019      	b.n	8001596 <EPD_2in13_V4_Display_Base+0x50>
        for (UWORD i = 0; i < Width; i++) {
 8001562:	2300      	movs	r3, #0
 8001564:	82bb      	strh	r3, [r7, #20]
 8001566:	e00f      	b.n	8001588 <EPD_2in13_V4_Display_Base+0x42>
			EPD_2in13_V4_SendData(Image[i + j * Width]);
 8001568:	8aba      	ldrh	r2, [r7, #20]
 800156a:	8afb      	ldrh	r3, [r7, #22]
 800156c:	89f9      	ldrh	r1, [r7, #14]
 800156e:	fb01 f303 	mul.w	r3, r1, r3
 8001572:	4413      	add	r3, r2
 8001574:	461a      	mov	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fead 	bl	80012dc <EPD_2in13_V4_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8001582:	8abb      	ldrh	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	82bb      	strh	r3, [r7, #20]
 8001588:	8aba      	ldrh	r2, [r7, #20]
 800158a:	89fb      	ldrh	r3, [r7, #14]
 800158c:	429a      	cmp	r2, r3
 800158e:	d3eb      	bcc.n	8001568 <EPD_2in13_V4_Display_Base+0x22>
    for (UWORD j = 0; j < Height; j++) {
 8001590:	8afb      	ldrh	r3, [r7, #22]
 8001592:	3301      	adds	r3, #1
 8001594:	82fb      	strh	r3, [r7, #22]
 8001596:	8afa      	ldrh	r2, [r7, #22]
 8001598:	89bb      	ldrh	r3, [r7, #12]
 800159a:	429a      	cmp	r2, r3
 800159c:	d3e1      	bcc.n	8001562 <EPD_2in13_V4_Display_Base+0x1c>
		}
	}
	EPD_2in13_V4_SendCommand(0x26);   //Write Black and White image to RAM
 800159e:	2026      	movs	r0, #38	@ 0x26
 80015a0:	f7ff fe7c 	bl	800129c <EPD_2in13_V4_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80015a4:	2300      	movs	r3, #0
 80015a6:	827b      	strh	r3, [r7, #18]
 80015a8:	e019      	b.n	80015de <EPD_2in13_V4_Display_Base+0x98>
        for (UWORD i = 0; i < Width; i++) {
 80015aa:	2300      	movs	r3, #0
 80015ac:	823b      	strh	r3, [r7, #16]
 80015ae:	e00f      	b.n	80015d0 <EPD_2in13_V4_Display_Base+0x8a>
			EPD_2in13_V4_SendData(Image[i + j * Width]);
 80015b0:	8a3a      	ldrh	r2, [r7, #16]
 80015b2:	8a7b      	ldrh	r3, [r7, #18]
 80015b4:	89f9      	ldrh	r1, [r7, #14]
 80015b6:	fb01 f303 	mul.w	r3, r1, r3
 80015ba:	4413      	add	r3, r2
 80015bc:	461a      	mov	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fe89 	bl	80012dc <EPD_2in13_V4_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80015ca:	8a3b      	ldrh	r3, [r7, #16]
 80015cc:	3301      	adds	r3, #1
 80015ce:	823b      	strh	r3, [r7, #16]
 80015d0:	8a3a      	ldrh	r2, [r7, #16]
 80015d2:	89fb      	ldrh	r3, [r7, #14]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d3eb      	bcc.n	80015b0 <EPD_2in13_V4_Display_Base+0x6a>
    for (UWORD j = 0; j < Height; j++) {
 80015d8:	8a7b      	ldrh	r3, [r7, #18]
 80015da:	3301      	adds	r3, #1
 80015dc:	827b      	strh	r3, [r7, #18]
 80015de:	8a7a      	ldrh	r2, [r7, #18]
 80015e0:	89bb      	ldrh	r3, [r7, #12]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d3e1      	bcc.n	80015aa <EPD_2in13_V4_Display_Base+0x64>
		}
	}
	EPD_2in13_V4_TurnOnDisplay();
 80015e6:	f7ff ff10 	bl	800140a <EPD_2in13_V4_TurnOnDisplay>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <EPD_2in13_V4_Display_Partial>:
function :	Sends the image buffer in RAM to e-Paper and partial refresh
parameter:
	Image : Image data
******************************************************************************/
void EPD_2in13_V4_Display_Partial(UBYTE *Image)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
	UWORD Width, Height;
    Width = (EPD_2in13_V4_WIDTH % 8 == 0)? (EPD_2in13_V4_WIDTH / 8 ): (EPD_2in13_V4_WIDTH / 8 + 1);
 80015fa:	2310      	movs	r3, #16
 80015fc:	817b      	strh	r3, [r7, #10]
    Height = EPD_2in13_V4_HEIGHT;
 80015fe:	23fa      	movs	r3, #250	@ 0xfa
 8001600:	813b      	strh	r3, [r7, #8]

	//Reset
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800160c:	f002 fa64 	bl	8003ad8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(1);
 8001610:	2001      	movs	r0, #1
 8001612:	f001 ff95 	bl	8003540 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8001616:	2201      	movs	r2, #1
 8001618:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800161c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001620:	f002 fa5a 	bl	8003ad8 <HAL_GPIO_WritePin>

	EPD_2in13_V4_SendCommand(0x3C); //BorderWavefrom
 8001624:	203c      	movs	r0, #60	@ 0x3c
 8001626:	f7ff fe39 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_SendData(0x80);
 800162a:	2080      	movs	r0, #128	@ 0x80
 800162c:	f7ff fe56 	bl	80012dc <EPD_2in13_V4_SendData>

	EPD_2in13_V4_SendCommand(0x01); //Driver output control
 8001630:	2001      	movs	r0, #1
 8001632:	f7ff fe33 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_SendData(0xF9);
 8001636:	20f9      	movs	r0, #249	@ 0xf9
 8001638:	f7ff fe50 	bl	80012dc <EPD_2in13_V4_SendData>
	EPD_2in13_V4_SendData(0x00);
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff fe4d 	bl	80012dc <EPD_2in13_V4_SendData>
	EPD_2in13_V4_SendData(0x00);
 8001642:	2000      	movs	r0, #0
 8001644:	f7ff fe4a 	bl	80012dc <EPD_2in13_V4_SendData>

	EPD_2in13_V4_SendCommand(0x11); //data entry mode
 8001648:	2011      	movs	r0, #17
 800164a:	f7ff fe27 	bl	800129c <EPD_2in13_V4_SendCommand>
	EPD_2in13_V4_SendData(0x03);
 800164e:	2003      	movs	r0, #3
 8001650:	f7ff fe44 	bl	80012dc <EPD_2in13_V4_SendData>

	EPD_2in13_V4_SetWindows(0, 0, EPD_2in13_V4_WIDTH-1, EPD_2in13_V4_HEIGHT-1);
 8001654:	23f9      	movs	r3, #249	@ 0xf9
 8001656:	2279      	movs	r2, #121	@ 0x79
 8001658:	2100      	movs	r1, #0
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff fe73 	bl	8001346 <EPD_2in13_V4_SetWindows>
	EPD_2in13_V4_SetCursor(0, 0);
 8001660:	2100      	movs	r1, #0
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff feae 	bl	80013c4 <EPD_2in13_V4_SetCursor>

	EPD_2in13_V4_SendCommand(0x24);   //Write Black and White image to RAM
 8001668:	2024      	movs	r0, #36	@ 0x24
 800166a:	f7ff fe17 	bl	800129c <EPD_2in13_V4_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800166e:	2300      	movs	r3, #0
 8001670:	81fb      	strh	r3, [r7, #14]
 8001672:	e019      	b.n	80016a8 <EPD_2in13_V4_Display_Partial+0xb6>
        for (UWORD i = 0; i < Width; i++) {
 8001674:	2300      	movs	r3, #0
 8001676:	81bb      	strh	r3, [r7, #12]
 8001678:	e00f      	b.n	800169a <EPD_2in13_V4_Display_Partial+0xa8>
			EPD_2in13_V4_SendData(Image[i + j * Width]);
 800167a:	89ba      	ldrh	r2, [r7, #12]
 800167c:	89fb      	ldrh	r3, [r7, #14]
 800167e:	8979      	ldrh	r1, [r7, #10]
 8001680:	fb01 f303 	mul.w	r3, r1, r3
 8001684:	4413      	add	r3, r2
 8001686:	461a      	mov	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4413      	add	r3, r2
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fe24 	bl	80012dc <EPD_2in13_V4_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8001694:	89bb      	ldrh	r3, [r7, #12]
 8001696:	3301      	adds	r3, #1
 8001698:	81bb      	strh	r3, [r7, #12]
 800169a:	89ba      	ldrh	r2, [r7, #12]
 800169c:	897b      	ldrh	r3, [r7, #10]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d3eb      	bcc.n	800167a <EPD_2in13_V4_Display_Partial+0x88>
    for (UWORD j = 0; j < Height; j++) {
 80016a2:	89fb      	ldrh	r3, [r7, #14]
 80016a4:	3301      	adds	r3, #1
 80016a6:	81fb      	strh	r3, [r7, #14]
 80016a8:	89fa      	ldrh	r2, [r7, #14]
 80016aa:	893b      	ldrh	r3, [r7, #8]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d3e1      	bcc.n	8001674 <EPD_2in13_V4_Display_Partial+0x82>
		}
	}
	EPD_2in13_V4_TurnOnDisplay_Partial();
 80016b0:	f7ff feba 	bl	8001428 <EPD_2in13_V4_TurnOnDisplay_Partial>
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	4608      	mov	r0, r1
 80016c6:	4611      	mov	r1, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	4603      	mov	r3, r0
 80016cc:	817b      	strh	r3, [r7, #10]
 80016ce:	460b      	mov	r3, r1
 80016d0:	813b      	strh	r3, [r7, #8]
 80016d2:	4613      	mov	r3, r2
 80016d4:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 80016d6:	4b23      	ldr	r3, [pc, #140]	@ (8001764 <Paint_NewImage+0xa8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 80016dc:	4a21      	ldr	r2, [pc, #132]	@ (8001764 <Paint_NewImage+0xa8>)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 80016e2:	4a20      	ldr	r2, [pc, #128]	@ (8001764 <Paint_NewImage+0xa8>)
 80016e4:	897b      	ldrh	r3, [r7, #10]
 80016e6:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 80016e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001764 <Paint_NewImage+0xa8>)
 80016ea:	893b      	ldrh	r3, [r7, #8]
 80016ec:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 80016ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001764 <Paint_NewImage+0xa8>)
 80016f0:	8b3b      	ldrh	r3, [r7, #24]
 80016f2:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <Paint_NewImage+0xa8>)
 80016f6:	2202      	movs	r2, #2
 80016f8:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 80016fa:	897b      	ldrh	r3, [r7, #10]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	b29b      	uxth	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d103      	bne.n	800170e <Paint_NewImage+0x52>
 8001706:	897b      	ldrh	r3, [r7, #10]
 8001708:	08db      	lsrs	r3, r3, #3
 800170a:	b29b      	uxth	r3, r3
 800170c:	e004      	b.n	8001718 <Paint_NewImage+0x5c>
 800170e:	897b      	ldrh	r3, [r7, #10]
 8001710:	08db      	lsrs	r3, r3, #3
 8001712:	b29b      	uxth	r3, r3
 8001714:	3301      	adds	r3, #1
 8001716:	b29b      	uxth	r3, r3
 8001718:	4a12      	ldr	r2, [pc, #72]	@ (8001764 <Paint_NewImage+0xa8>)
 800171a:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800171c:	4a11      	ldr	r2, [pc, #68]	@ (8001764 <Paint_NewImage+0xa8>)
 800171e:	893b      	ldrh	r3, [r7, #8]
 8001720:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8001722:	4a10      	ldr	r2, [pc, #64]	@ (8001764 <Paint_NewImage+0xa8>)
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8001728:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <Paint_NewImage+0xa8>)
 800172a:	2200      	movs	r2, #0
 800172c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <Paint_NewImage+0x7e>
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	2bb4      	cmp	r3, #180	@ 0xb4
 8001738:	d106      	bne.n	8001748 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800173a:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <Paint_NewImage+0xa8>)
 800173c:	897b      	ldrh	r3, [r7, #10]
 800173e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8001740:	4a08      	ldr	r2, [pc, #32]	@ (8001764 <Paint_NewImage+0xa8>)
 8001742:	893b      	ldrh	r3, [r7, #8]
 8001744:	80d3      	strh	r3, [r2, #6]
 8001746:	e006      	b.n	8001756 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8001748:	4a06      	ldr	r2, [pc, #24]	@ (8001764 <Paint_NewImage+0xa8>)
 800174a:	893b      	ldrh	r3, [r7, #8]
 800174c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800174e:	4a05      	ldr	r2, [pc, #20]	@ (8001764 <Paint_NewImage+0xa8>)
 8001750:	897b      	ldrh	r3, [r7, #10]
 8001752:	80d3      	strh	r3, [r2, #6]
    }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000200 	.word	0x20000200

08001768 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8001770:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <Paint_SelectImage+0x1c>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000200 	.word	0x20000200

08001788 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	@ 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
 8001792:	460b      	mov	r3, r1
 8001794:	80bb      	strh	r3, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800179a:	4ba0      	ldr	r3, [pc, #640]	@ (8001a1c <Paint_SetPixel+0x294>)
 800179c:	889b      	ldrh	r3, [r3, #4]
 800179e:	88fa      	ldrh	r2, [r7, #6]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d804      	bhi.n	80017ae <Paint_SetPixel+0x26>
 80017a4:	4b9d      	ldr	r3, [pc, #628]	@ (8001a1c <Paint_SetPixel+0x294>)
 80017a6:	88db      	ldrh	r3, [r3, #6]
 80017a8:	88ba      	ldrh	r2, [r7, #4]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d903      	bls.n	80017b6 <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 80017ae:	489c      	ldr	r0, [pc, #624]	@ (8001a20 <Paint_SetPixel+0x298>)
 80017b0:	f006 f9c6 	bl	8007b40 <puts>
        return;
 80017b4:	e12e      	b.n	8001a14 <Paint_SetPixel+0x28c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 80017b6:	4b99      	ldr	r3, [pc, #612]	@ (8001a1c <Paint_SetPixel+0x294>)
 80017b8:	89db      	ldrh	r3, [r3, #14]
 80017ba:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80017be:	d02b      	beq.n	8001818 <Paint_SetPixel+0x90>
 80017c0:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80017c4:	f300 8123 	bgt.w	8001a0e <Paint_SetPixel+0x286>
 80017c8:	2bb4      	cmp	r3, #180	@ 0xb4
 80017ca:	d016      	beq.n	80017fa <Paint_SetPixel+0x72>
 80017cc:	2bb4      	cmp	r3, #180	@ 0xb4
 80017ce:	f300 811e 	bgt.w	8001a0e <Paint_SetPixel+0x286>
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <Paint_SetPixel+0x54>
 80017d6:	2b5a      	cmp	r3, #90	@ 0x5a
 80017d8:	d005      	beq.n	80017e6 <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 80017da:	e118      	b.n	8001a0e <Paint_SetPixel+0x286>
        X = Xpoint;
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Ypoint;  
 80017e0:	88bb      	ldrh	r3, [r7, #4]
 80017e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 80017e4:	e022      	b.n	800182c <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 80017e6:	4b8d      	ldr	r3, [pc, #564]	@ (8001a1c <Paint_SetPixel+0x294>)
 80017e8:	891a      	ldrh	r2, [r3, #8]
 80017ea:	88bb      	ldrh	r3, [r7, #4]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	3b01      	subs	r3, #1
 80017f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Xpoint;
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 80017f8:	e018      	b.n	800182c <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 80017fa:	4b88      	ldr	r3, [pc, #544]	@ (8001a1c <Paint_SetPixel+0x294>)
 80017fc:	891a      	ldrh	r2, [r3, #8]
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	b29b      	uxth	r3, r3
 8001804:	3b01      	subs	r3, #1
 8001806:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8001808:	4b84      	ldr	r3, [pc, #528]	@ (8001a1c <Paint_SetPixel+0x294>)
 800180a:	895a      	ldrh	r2, [r3, #10]
 800180c:	88bb      	ldrh	r3, [r7, #4]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	b29b      	uxth	r3, r3
 8001812:	3b01      	subs	r3, #1
 8001814:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8001816:	e009      	b.n	800182c <Paint_SetPixel+0xa4>
        X = Ypoint;
 8001818:	88bb      	ldrh	r3, [r7, #4]
 800181a:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 800181c:	4b7f      	ldr	r3, [pc, #508]	@ (8001a1c <Paint_SetPixel+0x294>)
 800181e:	895a      	ldrh	r2, [r3, #10]
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	b29b      	uxth	r3, r3
 8001826:	3b01      	subs	r3, #1
 8001828:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 800182a:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800182c:	4b7b      	ldr	r3, [pc, #492]	@ (8001a1c <Paint_SetPixel+0x294>)
 800182e:	8a1b      	ldrh	r3, [r3, #16]
 8001830:	2b03      	cmp	r3, #3
 8001832:	f200 80ee 	bhi.w	8001a12 <Paint_SetPixel+0x28a>
 8001836:	a201      	add	r2, pc, #4	@ (adr r2, 800183c <Paint_SetPixel+0xb4>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800188b 	.word	0x0800188b
 8001840:	0800184d 	.word	0x0800184d
 8001844:	0800185d 	.word	0x0800185d
 8001848:	0800186d 	.word	0x0800186d
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800184c:	4b73      	ldr	r3, [pc, #460]	@ (8001a1c <Paint_SetPixel+0x294>)
 800184e:	891a      	ldrh	r2, [r3, #8]
 8001850:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	b29b      	uxth	r3, r3
 8001856:	3b01      	subs	r3, #1
 8001858:	84fb      	strh	r3, [r7, #38]	@ 0x26
        break;
 800185a:	e017      	b.n	800188c <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800185c:	4b6f      	ldr	r3, [pc, #444]	@ (8001a1c <Paint_SetPixel+0x294>)
 800185e:	895a      	ldrh	r2, [r3, #10]
 8001860:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	b29b      	uxth	r3, r3
 8001866:	3b01      	subs	r3, #1
 8001868:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 800186a:	e00f      	b.n	800188c <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800186c:	4b6b      	ldr	r3, [pc, #428]	@ (8001a1c <Paint_SetPixel+0x294>)
 800186e:	891a      	ldrh	r2, [r3, #8]
 8001870:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	b29b      	uxth	r3, r3
 8001876:	3b01      	subs	r3, #1
 8001878:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Y - 1;
 800187a:	4b68      	ldr	r3, [pc, #416]	@ (8001a1c <Paint_SetPixel+0x294>)
 800187c:	895a      	ldrh	r2, [r3, #10]
 800187e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	b29b      	uxth	r3, r3
 8001884:	3b01      	subs	r3, #1
 8001886:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8001888:	e000      	b.n	800188c <Paint_SetPixel+0x104>
        break;
 800188a:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800188c:	4b63      	ldr	r3, [pc, #396]	@ (8001a1c <Paint_SetPixel+0x294>)
 800188e:	891b      	ldrh	r3, [r3, #8]
 8001890:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001892:	429a      	cmp	r2, r3
 8001894:	d804      	bhi.n	80018a0 <Paint_SetPixel+0x118>
 8001896:	4b61      	ldr	r3, [pc, #388]	@ (8001a1c <Paint_SetPixel+0x294>)
 8001898:	895b      	ldrh	r3, [r3, #10]
 800189a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800189c:	429a      	cmp	r2, r3
 800189e:	d903      	bls.n	80018a8 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 80018a0:	485f      	ldr	r0, [pc, #380]	@ (8001a20 <Paint_SetPixel+0x298>)
 80018a2:	f006 f94d 	bl	8007b40 <puts>
        return;
 80018a6:	e0b5      	b.n	8001a14 <Paint_SetPixel+0x28c>
    }
    
    if(Paint.Scale == 2){
 80018a8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a1c <Paint_SetPixel+0x294>)
 80018aa:	8adb      	ldrh	r3, [r3, #22]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d138      	bne.n	8001922 <Paint_SetPixel+0x19a>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 80018b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018b2:	08db      	lsrs	r3, r3, #3
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4619      	mov	r1, r3
 80018b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80018ba:	4a58      	ldr	r2, [pc, #352]	@ (8001a1c <Paint_SetPixel+0x294>)
 80018bc:	8a52      	ldrh	r2, [r2, #18]
 80018be:	fb02 f303 	mul.w	r3, r2, r3
 80018c2:	440b      	add	r3, r1
 80018c4:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 80018c6:	4b55      	ldr	r3, [pc, #340]	@ (8001a1c <Paint_SetPixel+0x294>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4413      	add	r3, r2
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d112      	bne.n	80018fe <Paint_SetPixel+0x176>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80018d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80018e2:	fa42 f303 	asr.w	r3, r2, r3
 80018e6:	b25a      	sxtb	r2, r3
 80018e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ec:	4013      	ands	r3, r2
 80018ee:	b259      	sxtb	r1, r3
 80018f0:	4b4a      	ldr	r3, [pc, #296]	@ (8001a1c <Paint_SetPixel+0x294>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4413      	add	r3, r2
 80018f8:	b2ca      	uxtb	r2, r1
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	e08a      	b.n	8001a14 <Paint_SetPixel+0x28c>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 80018fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	2280      	movs	r2, #128	@ 0x80
 8001906:	fa42 f303 	asr.w	r3, r2, r3
 800190a:	b25a      	sxtb	r2, r3
 800190c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001910:	4313      	orrs	r3, r2
 8001912:	b259      	sxtb	r1, r3
 8001914:	4b41      	ldr	r3, [pc, #260]	@ (8001a1c <Paint_SetPixel+0x294>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4413      	add	r3, r2
 800191c:	b2ca      	uxtb	r2, r1
 800191e:	701a      	strb	r2, [r3, #0]
 8001920:	e078      	b.n	8001a14 <Paint_SetPixel+0x28c>
    }else if(Paint.Scale == 4){
 8001922:	4b3e      	ldr	r3, [pc, #248]	@ (8001a1c <Paint_SetPixel+0x294>)
 8001924:	8adb      	ldrh	r3, [r3, #22]
 8001926:	2b04      	cmp	r3, #4
 8001928:	d136      	bne.n	8001998 <Paint_SetPixel+0x210>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800192a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	b29b      	uxth	r3, r3
 8001930:	4619      	mov	r1, r3
 8001932:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001934:	4a39      	ldr	r2, [pc, #228]	@ (8001a1c <Paint_SetPixel+0x294>)
 8001936:	8a52      	ldrh	r2, [r2, #18]
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	440b      	add	r3, r1
 800193e:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8001940:	887b      	ldrh	r3, [r7, #2]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8001948:	4b34      	ldr	r3, [pc, #208]	@ (8001a1c <Paint_SetPixel+0x294>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	4413      	add	r3, r2
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8001954:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	f06f 02c0 	mvn.w	r2, #192	@ 0xc0
 8001960:	fa42 f303 	asr.w	r3, r2, r3
 8001964:	b25a      	sxtb	r2, r3
 8001966:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800196a:	4013      	ands	r3, r2
 800196c:	b25b      	sxtb	r3, r3
 800196e:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8001970:	887b      	ldrh	r3, [r7, #2]
 8001972:	019a      	lsls	r2, r3, #6
 8001974:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa42 f303 	asr.w	r3, r2, r3
 8001980:	b25a      	sxtb	r2, r3
 8001982:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001986:	4313      	orrs	r3, r2
 8001988:	b259      	sxtb	r1, r3
 800198a:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <Paint_SetPixel+0x294>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	4413      	add	r3, r2
 8001992:	b2ca      	uxtb	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
 8001996:	e03d      	b.n	8001a14 <Paint_SetPixel+0x28c>
    }else if(Paint.Scale == 6 || Paint.Scale == 7){
 8001998:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <Paint_SetPixel+0x294>)
 800199a:	8adb      	ldrh	r3, [r3, #22]
 800199c:	2b06      	cmp	r3, #6
 800199e:	d003      	beq.n	80019a8 <Paint_SetPixel+0x220>
 80019a0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a1c <Paint_SetPixel+0x294>)
 80019a2:	8adb      	ldrh	r3, [r3, #22]
 80019a4:	2b07      	cmp	r3, #7
 80019a6:	d135      	bne.n	8001a14 <Paint_SetPixel+0x28c>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 80019a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80019aa:	085b      	lsrs	r3, r3, #1
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4619      	mov	r1, r3
 80019b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80019b2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a1c <Paint_SetPixel+0x294>)
 80019b4:	8a52      	ldrh	r2, [r2, #18]
 80019b6:	fb02 f303 	mul.w	r3, r2, r3
 80019ba:	440b      	add	r3, r1
 80019bc:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 80019be:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <Paint_SetPixel+0x294>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	4413      	add	r3, r2
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 80019ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	f06f 02f0 	mvn.w	r2, #240	@ 0xf0
 80019d6:	fa42 f303 	asr.w	r3, r2, r3
 80019da:	b25a      	sxtb	r2, r3
 80019dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80019e0:	4013      	ands	r3, r2
 80019e2:	b25b      	sxtb	r3, r3
 80019e4:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	011a      	lsls	r2, r3, #4
 80019ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	fa42 f303 	asr.w	r3, r2, r3
 80019f6:	b25a      	sxtb	r2, r3
 80019f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b259      	sxtb	r1, r3
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <Paint_SetPixel+0x294>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	4413      	add	r3, r2
 8001a08:	b2ca      	uxtb	r2, r1
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e002      	b.n	8001a14 <Paint_SetPixel+0x28c>
        return;
 8001a0e:	bf00      	nop
 8001a10:	e000      	b.n	8001a14 <Paint_SetPixel+0x28c>
        return;
 8001a12:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8001a14:	3728      	adds	r7, #40	@ 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000200 	.word	0x20000200
 8001a20:	0800ac50 	.word	0x0800ac50

08001a24 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	@ 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 8001a2e:	4b50      	ldr	r3, [pc, #320]	@ (8001b70 <Paint_Clear+0x14c>)
 8001a30:	8adb      	ldrh	r3, [r3, #22]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d125      	bne.n	8001a82 <Paint_Clear+0x5e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001a36:	2300      	movs	r3, #0
 8001a38:	83fb      	strh	r3, [r7, #30]
 8001a3a:	e01c      	b.n	8001a76 <Paint_Clear+0x52>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	83bb      	strh	r3, [r7, #28]
 8001a40:	e011      	b.n	8001a66 <Paint_Clear+0x42>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8001a42:	8bba      	ldrh	r2, [r7, #28]
 8001a44:	8bfb      	ldrh	r3, [r7, #30]
 8001a46:	494a      	ldr	r1, [pc, #296]	@ (8001b70 <Paint_Clear+0x14c>)
 8001a48:	8a49      	ldrh	r1, [r1, #18]
 8001a4a:	fb01 f303 	mul.w	r3, r1, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8001a52:	4b47      	ldr	r3, [pc, #284]	@ (8001b70 <Paint_Clear+0x14c>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	4413      	add	r3, r2
 8001a5a:	88fa      	ldrh	r2, [r7, #6]
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001a60:	8bbb      	ldrh	r3, [r7, #28]
 8001a62:	3301      	adds	r3, #1
 8001a64:	83bb      	strh	r3, [r7, #28]
 8001a66:	4b42      	ldr	r3, [pc, #264]	@ (8001b70 <Paint_Clear+0x14c>)
 8001a68:	8a5b      	ldrh	r3, [r3, #18]
 8001a6a:	8bba      	ldrh	r2, [r7, #28]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d3e8      	bcc.n	8001a42 <Paint_Clear+0x1e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001a70:	8bfb      	ldrh	r3, [r7, #30]
 8001a72:	3301      	adds	r3, #1
 8001a74:	83fb      	strh	r3, [r7, #30]
 8001a76:	4b3e      	ldr	r3, [pc, #248]	@ (8001b70 <Paint_Clear+0x14c>)
 8001a78:	8a9b      	ldrh	r3, [r3, #20]
 8001a7a:	8bfa      	ldrh	r2, [r7, #30]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d3dd      	bcc.n	8001a3c <Paint_Clear+0x18>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 8001a80:	e070      	b.n	8001b64 <Paint_Clear+0x140>
    }else if(Paint.Scale == 4) {
 8001a82:	4b3b      	ldr	r3, [pc, #236]	@ (8001b70 <Paint_Clear+0x14c>)
 8001a84:	8adb      	ldrh	r3, [r3, #22]
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d138      	bne.n	8001afc <Paint_Clear+0xd8>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	837b      	strh	r3, [r7, #26]
 8001a8e:	e02f      	b.n	8001af0 <Paint_Clear+0xcc>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8001a90:	2300      	movs	r3, #0
 8001a92:	833b      	strh	r3, [r7, #24]
 8001a94:	e024      	b.n	8001ae0 <Paint_Clear+0xbc>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8001a96:	8b3a      	ldrh	r2, [r7, #24]
 8001a98:	8b7b      	ldrh	r3, [r7, #26]
 8001a9a:	4935      	ldr	r1, [pc, #212]	@ (8001b70 <Paint_Clear+0x14c>)
 8001a9c:	8a49      	ldrh	r1, [r1, #18]
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	019b      	lsls	r3, r3, #6
 8001aac:	b25a      	sxtb	r2, r3
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	b25b      	sxtb	r3, r3
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	b25b      	sxtb	r3, r3
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	b25a      	sxtb	r2, r3
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b25a      	sxtb	r2, r3
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	b25b      	sxtb	r3, r3
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b259      	sxtb	r1, r3
 8001ace:	4b28      	ldr	r3, [pc, #160]	@ (8001b70 <Paint_Clear+0x14c>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b2ca      	uxtb	r2, r1
 8001ad8:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8001ada:	8b3b      	ldrh	r3, [r7, #24]
 8001adc:	3301      	adds	r3, #1
 8001ade:	833b      	strh	r3, [r7, #24]
 8001ae0:	4b23      	ldr	r3, [pc, #140]	@ (8001b70 <Paint_Clear+0x14c>)
 8001ae2:	8a5b      	ldrh	r3, [r3, #18]
 8001ae4:	8b3a      	ldrh	r2, [r7, #24]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d3d5      	bcc.n	8001a96 <Paint_Clear+0x72>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001aea:	8b7b      	ldrh	r3, [r7, #26]
 8001aec:	3301      	adds	r3, #1
 8001aee:	837b      	strh	r3, [r7, #26]
 8001af0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <Paint_Clear+0x14c>)
 8001af2:	8a9b      	ldrh	r3, [r3, #20]
 8001af4:	8b7a      	ldrh	r2, [r7, #26]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d3ca      	bcc.n	8001a90 <Paint_Clear+0x6c>
}
 8001afa:	e033      	b.n	8001b64 <Paint_Clear+0x140>
	}else if(Paint.Scale == 6 || Paint.Scale == 7) {
 8001afc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <Paint_Clear+0x14c>)
 8001afe:	8adb      	ldrh	r3, [r3, #22]
 8001b00:	2b06      	cmp	r3, #6
 8001b02:	d003      	beq.n	8001b0c <Paint_Clear+0xe8>
 8001b04:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <Paint_Clear+0x14c>)
 8001b06:	8adb      	ldrh	r3, [r3, #22]
 8001b08:	2b07      	cmp	r3, #7
 8001b0a:	d12b      	bne.n	8001b64 <Paint_Clear+0x140>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	82fb      	strh	r3, [r7, #22]
 8001b10:	e023      	b.n	8001b5a <Paint_Clear+0x136>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	82bb      	strh	r3, [r7, #20]
 8001b16:	e018      	b.n	8001b4a <Paint_Clear+0x126>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8001b18:	8aba      	ldrh	r2, [r7, #20]
 8001b1a:	8afb      	ldrh	r3, [r7, #22]
 8001b1c:	4914      	ldr	r1, [pc, #80]	@ (8001b70 <Paint_Clear+0x14c>)
 8001b1e:	8a49      	ldrh	r1, [r1, #18]
 8001b20:	fb01 f303 	mul.w	r3, r1, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	b25b      	sxtb	r3, r3
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	b25a      	sxtb	r2, r3
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	b25b      	sxtb	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b259      	sxtb	r1, r3
 8001b38:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <Paint_Clear+0x14c>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4413      	add	r3, r2
 8001b40:	b2ca      	uxtb	r2, r1
 8001b42:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8001b44:	8abb      	ldrh	r3, [r7, #20]
 8001b46:	3301      	adds	r3, #1
 8001b48:	82bb      	strh	r3, [r7, #20]
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <Paint_Clear+0x14c>)
 8001b4c:	8a5b      	ldrh	r3, [r3, #18]
 8001b4e:	8aba      	ldrh	r2, [r7, #20]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d3e1      	bcc.n	8001b18 <Paint_Clear+0xf4>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001b54:	8afb      	ldrh	r3, [r7, #22]
 8001b56:	3301      	adds	r3, #1
 8001b58:	82fb      	strh	r3, [r7, #22]
 8001b5a:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <Paint_Clear+0x14c>)
 8001b5c:	8a9b      	ldrh	r3, [r3, #20]
 8001b5e:	8afa      	ldrh	r2, [r7, #22]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d3d6      	bcc.n	8001b12 <Paint_Clear+0xee>
}
 8001b64:	bf00      	nop
 8001b66:	3724      	adds	r7, #36	@ 0x24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	20000200 	.word	0x20000200

08001b74 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	81fb      	strh	r3, [r7, #14]
 8001b80:	460b      	mov	r3, r1
 8001b82:	81bb      	strh	r3, [r7, #12]
 8001b84:	4613      	mov	r3, r2
 8001b86:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001b88:	4b4c      	ldr	r3, [pc, #304]	@ (8001cbc <Paint_DrawChar+0x148>)
 8001b8a:	889b      	ldrh	r3, [r3, #4]
 8001b8c:	89fa      	ldrh	r2, [r7, #14]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d804      	bhi.n	8001b9c <Paint_DrawChar+0x28>
 8001b92:	4b4a      	ldr	r3, [pc, #296]	@ (8001cbc <Paint_DrawChar+0x148>)
 8001b94:	88db      	ldrh	r3, [r3, #6]
 8001b96:	89ba      	ldrh	r2, [r7, #12]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d903      	bls.n	8001ba4 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8001b9c:	4848      	ldr	r0, [pc, #288]	@ (8001cc0 <Paint_DrawChar+0x14c>)
 8001b9e:	f005 ffcf 	bl	8007b40 <puts>
        return;
 8001ba2:	e087      	b.n	8001cb4 <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001ba4:	7afb      	ldrb	r3, [r7, #11]
 8001ba6:	3b20      	subs	r3, #32
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	88d2      	ldrh	r2, [r2, #6]
 8001bac:	fb02 f303 	mul.w	r3, r2, r3
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	8892      	ldrh	r2, [r2, #4]
 8001bb4:	08d2      	lsrs	r2, r2, #3
 8001bb6:	b292      	uxth	r2, r2
 8001bb8:	4611      	mov	r1, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	8892      	ldrh	r2, [r2, #4]
 8001bbe:	f002 0207 	and.w	r2, r2, #7
 8001bc2:	b292      	uxth	r2, r2
 8001bc4:	2a00      	cmp	r2, #0
 8001bc6:	bf14      	ite	ne
 8001bc8:	2201      	movne	r2, #1
 8001bca:	2200      	moveq	r2, #0
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440a      	add	r2, r1
 8001bd0:	fb02 f303 	mul.w	r3, r2, r3
 8001bd4:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	4413      	add	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001be0:	2300      	movs	r3, #0
 8001be2:	83fb      	strh	r3, [r7, #30]
 8001be4:	e061      	b.n	8001caa <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001be6:	2300      	movs	r3, #0
 8001be8:	83bb      	strh	r3, [r7, #28]
 8001bea:	e04c      	b.n	8001c86 <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001bec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001bee:	2bff      	cmp	r3, #255	@ 0xff
 8001bf0:	d118      	bne.n	8001c24 <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	8bbb      	ldrh	r3, [r7, #28]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	2280      	movs	r2, #128	@ 0x80
 8001c00:	fa42 f303 	asr.w	r3, r2, r3
 8001c04:	400b      	ands	r3, r1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d031      	beq.n	8001c6e <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001c0a:	89fa      	ldrh	r2, [r7, #14]
 8001c0c:	8bbb      	ldrh	r3, [r7, #28]
 8001c0e:	4413      	add	r3, r2
 8001c10:	b298      	uxth	r0, r3
 8001c12:	89ba      	ldrh	r2, [r7, #12]
 8001c14:	8bfb      	ldrh	r3, [r7, #30]
 8001c16:	4413      	add	r3, r2
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7ff fdb3 	bl	8001788 <Paint_SetPixel>
 8001c22:	e024      	b.n	8001c6e <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	8bbb      	ldrh	r3, [r7, #28]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	2280      	movs	r2, #128	@ 0x80
 8001c32:	fa42 f303 	asr.w	r3, r2, r3
 8001c36:	400b      	ands	r3, r1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00c      	beq.n	8001c56 <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001c3c:	89fa      	ldrh	r2, [r7, #14]
 8001c3e:	8bbb      	ldrh	r3, [r7, #28]
 8001c40:	4413      	add	r3, r2
 8001c42:	b298      	uxth	r0, r3
 8001c44:	89ba      	ldrh	r2, [r7, #12]
 8001c46:	8bfb      	ldrh	r3, [r7, #30]
 8001c48:	4413      	add	r3, r2
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f7ff fd9a 	bl	8001788 <Paint_SetPixel>
 8001c54:	e00b      	b.n	8001c6e <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8001c56:	89fa      	ldrh	r2, [r7, #14]
 8001c58:	8bbb      	ldrh	r3, [r7, #28]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	b298      	uxth	r0, r3
 8001c5e:	89ba      	ldrh	r2, [r7, #12]
 8001c60:	8bfb      	ldrh	r3, [r7, #30]
 8001c62:	4413      	add	r3, r2
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7ff fd8d 	bl	8001788 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8001c6e:	8bbb      	ldrh	r3, [r7, #28]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	2b07      	cmp	r3, #7
 8001c78:	d102      	bne.n	8001c80 <Paint_DrawChar+0x10c>
                ptr++;
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001c80:	8bbb      	ldrh	r3, [r7, #28]
 8001c82:	3301      	adds	r3, #1
 8001c84:	83bb      	strh	r3, [r7, #28]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	889b      	ldrh	r3, [r3, #4]
 8001c8a:	8bba      	ldrh	r2, [r7, #28]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d3ad      	bcc.n	8001bec <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	889b      	ldrh	r3, [r3, #4]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <Paint_DrawChar+0x130>
            ptr++;
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001ca4:	8bfb      	ldrh	r3, [r7, #30]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	83fb      	strh	r3, [r7, #30]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	88db      	ldrh	r3, [r3, #6]
 8001cae:	8bfa      	ldrh	r2, [r7, #30]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d398      	bcc.n	8001be6 <Paint_DrawChar+0x72>
    }// Write all
}
 8001cb4:	3720      	adds	r7, #32
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000200 	.word	0x20000200
 8001cc0:	0800adb4 	.word	0x0800adb4

08001cc4 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af02      	add	r7, sp, #8
 8001cca:	60ba      	str	r2, [r7, #8]
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	4603      	mov	r3, r0
 8001cd0:	81fb      	strh	r3, [r7, #14]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8001cd6:	89fb      	ldrh	r3, [r7, #14]
 8001cd8:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8001cda:	89bb      	ldrh	r3, [r7, #12]
 8001cdc:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8001cde:	4b21      	ldr	r3, [pc, #132]	@ (8001d64 <Paint_DrawString_EN+0xa0>)
 8001ce0:	889b      	ldrh	r3, [r3, #4]
 8001ce2:	89fa      	ldrh	r2, [r7, #14]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d804      	bhi.n	8001cf2 <Paint_DrawString_EN+0x2e>
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d64 <Paint_DrawString_EN+0xa0>)
 8001cea:	88db      	ldrh	r3, [r3, #6]
 8001cec:	89ba      	ldrh	r2, [r7, #12]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d931      	bls.n	8001d56 <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8001cf2:	481d      	ldr	r0, [pc, #116]	@ (8001d68 <Paint_DrawString_EN+0xa4>)
 8001cf4:	f005 ff24 	bl	8007b40 <puts>
        return;
 8001cf8:	e031      	b.n	8001d5e <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8001cfa:	8afb      	ldrh	r3, [r7, #22]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	8892      	ldrh	r2, [r2, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	4a18      	ldr	r2, [pc, #96]	@ (8001d64 <Paint_DrawString_EN+0xa0>)
 8001d04:	8892      	ldrh	r2, [r2, #4]
 8001d06:	4293      	cmp	r3, r2
 8001d08:	dd06      	ble.n	8001d18 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8001d0a:	89fb      	ldrh	r3, [r7, #14]
 8001d0c:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	88da      	ldrh	r2, [r3, #6]
 8001d12:	8abb      	ldrh	r3, [r7, #20]
 8001d14:	4413      	add	r3, r2
 8001d16:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8001d18:	8abb      	ldrh	r3, [r7, #20]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	88d2      	ldrh	r2, [r2, #6]
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a10      	ldr	r2, [pc, #64]	@ (8001d64 <Paint_DrawString_EN+0xa0>)
 8001d22:	88d2      	ldrh	r2, [r2, #6]
 8001d24:	4293      	cmp	r3, r2
 8001d26:	dd03      	ble.n	8001d30 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 8001d28:	89fb      	ldrh	r3, [r7, #14]
 8001d2a:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8001d2c:	89bb      	ldrh	r3, [r7, #12]
 8001d2e:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	781a      	ldrb	r2, [r3, #0]
 8001d34:	8ab9      	ldrh	r1, [r7, #20]
 8001d36:	8af8      	ldrh	r0, [r7, #22]
 8001d38:	8c3b      	ldrh	r3, [r7, #32]
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f7ff ff17 	bl	8001b74 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	889a      	ldrh	r2, [r3, #4]
 8001d50:	8afb      	ldrh	r3, [r7, #22]
 8001d52:	4413      	add	r3, r2
 8001d54:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1cd      	bne.n	8001cfa <Paint_DrawString_EN+0x36>
    }
}
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000200 	.word	0x20000200
 8001d68:	0800adf4 	.word	0x0800adf4

08001d6c <BME280_Init>:
static int16_t BME280_ReadS16_LE(bme280_t *dev, uint8_t reg);
static uint32_t BME280_Read24(bme280_t *dev, uint8_t reg);
static void BME280_ReadCoefficients(bme280_t *dev);

void BME280_Init(bme280_t *dev, I2C_HandleTypeDef *hi2c, uint8_t address)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	@ 0x28
 8001d70:	af04      	add	r7, sp, #16
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	4613      	mov	r3, r2
 8001d78:	71fb      	strb	r3, [r7, #7]
    dev->i2c = hi2c;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	601a      	str	r2, [r3, #0]
    dev->address = address;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	79fa      	ldrb	r2, [r7, #7]
 8001d84:	711a      	strb	r2, [r3, #4]

    uint8_t id = BME280_Read8(dev, BME280_REG_ID);
 8001d86:	21d0      	movs	r1, #208	@ 0xd0
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 fc25 	bl	80025d8 <BME280_Read8>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	75fb      	strb	r3, [r7, #23]
    if (id != 0x60) {
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
 8001d94:	2b60      	cmp	r3, #96	@ 0x60
 8001d96:	d152      	bne.n	8001e3e <BME280_Init+0xd2>
        return; // wrong chip
    }

    uint8_t reset = 0xB6;
 8001d98:	23b6      	movs	r3, #182	@ 0xb6
 8001d9a:	75bb      	strb	r3, [r7, #22]
    HAL_I2C_Mem_Write(dev->i2c, dev->address, BME280_REG_RESET, 1, &reset, 1, HAL_MAX_DELAY);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	791b      	ldrb	r3, [r3, #4]
 8001da4:	4619      	mov	r1, r3
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
 8001daa:	9302      	str	r3, [sp, #8]
 8001dac:	2301      	movs	r3, #1
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	f107 0316 	add.w	r3, r7, #22
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	2301      	movs	r3, #1
 8001db8:	22e0      	movs	r2, #224	@ 0xe0
 8001dba:	f001 ff41 	bl	8003c40 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8001dbe:	2064      	movs	r0, #100	@ 0x64
 8001dc0:	f001 fbbe 	bl	8003540 <HAL_Delay>

    BME280_ReadCoefficients(dev);
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 fc5a 	bl	800267e <BME280_ReadCoefficients>

    uint8_t ctrl_hum = 0x01; // humidity oversampling x1
 8001dca:	2301      	movs	r3, #1
 8001dcc:	757b      	strb	r3, [r7, #21]
    HAL_I2C_Mem_Write(dev->i2c, dev->address, BME280_REG_CTRL_HUM, 1, &ctrl_hum, 1, HAL_MAX_DELAY);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	791b      	ldrb	r3, [r3, #4]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	2301      	movs	r3, #1
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	f107 0315 	add.w	r3, r7, #21
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2301      	movs	r3, #1
 8001dea:	22f2      	movs	r2, #242	@ 0xf2
 8001dec:	f001 ff28 	bl	8003c40 <HAL_I2C_Mem_Write>

    uint8_t ctrl_meas = 0x27; // temp and pressure oversampling x1, normal mode
 8001df0:	2327      	movs	r3, #39	@ 0x27
 8001df2:	753b      	strb	r3, [r7, #20]
    HAL_I2C_Mem_Write(dev->i2c, dev->address, BME280_REG_CTRL_MEAS, 1, &ctrl_meas, 1, HAL_MAX_DELAY);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	791b      	ldrb	r3, [r3, #4]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001e02:	9302      	str	r3, [sp, #8]
 8001e04:	2301      	movs	r3, #1
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2301      	movs	r3, #1
 8001e10:	22f4      	movs	r2, #244	@ 0xf4
 8001e12:	f001 ff15 	bl	8003c40 <HAL_I2C_Mem_Write>

    uint8_t config = 0xA0;
 8001e16:	23a0      	movs	r3, #160	@ 0xa0
 8001e18:	74fb      	strb	r3, [r7, #19]
    HAL_I2C_Mem_Write(dev->i2c, dev->address, BME280_REG_CONFIG, 1, &config, 1, HAL_MAX_DELAY);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	791b      	ldrb	r3, [r3, #4]
 8001e22:	4619      	mov	r1, r3
 8001e24:	f04f 33ff 	mov.w	r3, #4294967295
 8001e28:	9302      	str	r3, [sp, #8]
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	f107 0313 	add.w	r3, r7, #19
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2301      	movs	r3, #1
 8001e36:	22f5      	movs	r2, #245	@ 0xf5
 8001e38:	f001 ff02 	bl	8003c40 <HAL_I2C_Mem_Write>
 8001e3c:	e000      	b.n	8001e40 <BME280_Init+0xd4>
        return; // wrong chip
 8001e3e:	bf00      	nop
}
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <BME280_ReadTemperature>:

float BME280_ReadTemperature(bme280_t *dev)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	@ 0x30
 8001e4c:	af04      	add	r7, sp, #16
 8001e4e:	6078      	str	r0, [r7, #4]
    int32_t var1, var2;
    uint8_t data[3];

    HAL_I2C_Mem_Read(dev->i2c, dev->address, 0xFA, 1, data, 3, HAL_MAX_DELAY);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	791b      	ldrb	r3, [r3, #4]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5e:	9302      	str	r3, [sp, #8]
 8001e60:	2303      	movs	r3, #3
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	22fa      	movs	r2, #250	@ 0xfa
 8001e6e:	f001 fffb 	bl	8003e68 <HAL_I2C_Mem_Read>
    int32_t adc_T = ((uint32_t)data[0] << 12) | ((uint32_t)data[1] << 4) | (data[2] >> 4);
 8001e72:	7b3b      	ldrb	r3, [r7, #12]
 8001e74:	031a      	lsls	r2, r3, #12
 8001e76:	7b7b      	ldrb	r3, [r7, #13]
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	7bba      	ldrb	r2, [r7, #14]
 8001e7e:	0912      	lsrs	r2, r2, #4
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61fb      	str	r3, [r7, #28]

    var1 = ((((adc_T >> 3) - ((int32_t)dev->calib.dig_T1 << 1))) * ((int32_t)dev->calib.dig_T2)) >> 11;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	10da      	asrs	r2, r3, #3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	899b      	ldrh	r3, [r3, #12]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	12db      	asrs	r3, r3, #11
 8001e9e:	61bb      	str	r3, [r7, #24]
    var2 = (((((adc_T >> 4) - ((int32_t)dev->calib.dig_T1)) * ((adc_T >> 4) - ((int32_t)dev->calib.dig_T1))) >> 12) *
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	111b      	asrs	r3, r3, #4
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	8992      	ldrh	r2, [r2, #12]
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	1112      	asrs	r2, r2, #4
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	8989      	ldrh	r1, [r1, #12]
 8001eb2:	1a52      	subs	r2, r2, r1
 8001eb4:	fb02 f303 	mul.w	r3, r2, r3
 8001eb8:	131b      	asrs	r3, r3, #12
            ((int32_t)dev->calib.dig_T3)) >> 14;
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
    var2 = (((((adc_T >> 4) - ((int32_t)dev->calib.dig_T1)) * ((adc_T >> 4) - ((int32_t)dev->calib.dig_T1))) >> 12) *
 8001ec0:	fb02 f303 	mul.w	r3, r2, r3
 8001ec4:	139b      	asrs	r3, r3, #14
 8001ec6:	617b      	str	r3, [r7, #20]

    dev->t_fine = var1 + var2;
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	441a      	add	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	609a      	str	r2, [r3, #8]

    int32_t T = (dev->t_fine * 5 + 128) >> 8;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	3380      	adds	r3, #128	@ 0x80
 8001ede:	121b      	asrs	r3, r3, #8
 8001ee0:	613b      	str	r3, [r7, #16]
    return T / 100.0f;
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	ee07 3a90 	vmov	s15, r3
 8001ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eec:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001f04 <BME280_ReadTemperature+0xbc>
 8001ef0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ef4:	eef0 7a66 	vmov.f32	s15, s13
}
 8001ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	42c80000 	.word	0x42c80000

08001f08 <BME280_ReadPressure>:

float BME280_ReadPressure(bme280_t *dev)
{
 8001f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f0c:	b0d2      	sub	sp, #328	@ 0x148
 8001f0e:	af04      	add	r7, sp, #16
 8001f10:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    int64_t var1, var2, p;
    uint8_t data[3];

    HAL_I2C_Mem_Read(dev->i2c, dev->address, 0xF7, 1, data, 3, HAL_MAX_DELAY);
 8001f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f1e:	791b      	ldrb	r3, [r3, #4]
 8001f20:	4619      	mov	r1, r3
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
 8001f26:	9302      	str	r3, [sp, #8]
 8001f28:	2303      	movs	r3, #3
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2301      	movs	r3, #1
 8001f34:	22f7      	movs	r2, #247	@ 0xf7
 8001f36:	f001 ff97 	bl	8003e68 <HAL_I2C_Mem_Read>
    int32_t adc_P = ((uint32_t)data[0] << 12) | ((uint32_t)data[1] << 4) | (data[2] >> 4);
 8001f3a:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8001f3e:	031a      	lsls	r2, r3, #12
 8001f40:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	431a      	orrs	r2, r3
 8001f48:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

    var1 = ((int64_t)dev->t_fine) - 128000;
 8001f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	17da      	asrs	r2, r3, #31
 8001f5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001f62:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001f66:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8001f70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f72:	4613      	mov	r3, r2
 8001f74:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f7e:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    var2 = var1 * var1 * (int64_t)dev->calib.dig_P6;
 8001f82:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001f86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f8a:	fb03 f102 	mul.w	r1, r3, r2
 8001f8e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001f92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	18ca      	adds	r2, r1, r3
 8001f9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001fa0:	fba3 4503 	umull	r4, r5, r3, r3
 8001fa4:	1953      	adds	r3, r2, r5
 8001fa6:	461d      	mov	r5, r3
 8001fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001fac:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001fb0:	b21b      	sxth	r3, r3
 8001fb2:	17da      	asrs	r2, r3, #31
 8001fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001fb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001fbc:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	fb03 f205 	mul.w	r2, r3, r5
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	fb04 f303 	mul.w	r3, r4, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	4602      	mov	r2, r0
 8001fd0:	fba4 8902 	umull	r8, r9, r4, r2
 8001fd4:	444b      	add	r3, r9
 8001fd6:	4699      	mov	r9, r3
 8001fd8:	e9c7 8948 	strd	r8, r9, [r7, #288]	@ 0x120
 8001fdc:	e9c7 8948 	strd	r8, r9, [r7, #288]	@ 0x120
    var2 = var2 + ((var1 * (int64_t)dev->calib.dig_P5) << 17);
 8001fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001fe4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001fe8:	b21b      	sxth	r3, r3
 8001fea:	17da      	asrs	r2, r3, #31
 8001fec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ff0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001ff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ff8:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001ffc:	462a      	mov	r2, r5
 8001ffe:	fb02 f203 	mul.w	r2, r2, r3
 8002002:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002006:	4621      	mov	r1, r4
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	441a      	add	r2, r3
 800200e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002012:	4621      	mov	r1, r4
 8002014:	fba3 ab01 	umull	sl, fp, r3, r1
 8002018:	eb02 030b 	add.w	r3, r2, fp
 800201c:	469b      	mov	fp, r3
 800201e:	f04f 0000 	mov.w	r0, #0
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	ea4f 414b 	mov.w	r1, fp, lsl #17
 800202a:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 800202e:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8002032:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002036:	1814      	adds	r4, r2, r0
 8002038:	643c      	str	r4, [r7, #64]	@ 0x40
 800203a:	414b      	adcs	r3, r1
 800203c:	647b      	str	r3, [r7, #68]	@ 0x44
 800203e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8002042:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var2 = var2 + (((int64_t)dev->calib.dig_P4) << 35);
 8002046:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800204a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800204e:	b21b      	sxth	r3, r3
 8002050:	17da      	asrs	r2, r3, #31
 8002052:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002056:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800205a:	f04f 0000 	mov.w	r0, #0
 800205e:	f04f 0100 	mov.w	r1, #0
 8002062:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002066:	00d9      	lsls	r1, r3, #3
 8002068:	2000      	movs	r0, #0
 800206a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800206e:	1814      	adds	r4, r2, r0
 8002070:	63bc      	str	r4, [r7, #56]	@ 0x38
 8002072:	414b      	adcs	r3, r1
 8002074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002076:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800207a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var1 = ((var1 * var1 * (int64_t)dev->calib.dig_P3) >> 8) + ((var1 * (int64_t)dev->calib.dig_P2) << 12);
 800207e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002082:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002086:	fb03 f102 	mul.w	r1, r3, r2
 800208a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800208e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	18ca      	adds	r2, r1, r3
 8002098:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800209c:	fba3 1303 	umull	r1, r3, r3, r3
 80020a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80020a4:	460b      	mov	r3, r1
 80020a6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80020aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80020ae:	18d3      	adds	r3, r2, r3
 80020b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80020b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80020b8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80020bc:	b21b      	sxth	r3, r3
 80020be:	17da      	asrs	r2, r3, #31
 80020c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80020c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80020c8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80020cc:	462b      	mov	r3, r5
 80020ce:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80020d2:	4642      	mov	r2, r8
 80020d4:	fb02 f203 	mul.w	r2, r2, r3
 80020d8:	464b      	mov	r3, r9
 80020da:	4621      	mov	r1, r4
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	4622      	mov	r2, r4
 80020e4:	4641      	mov	r1, r8
 80020e6:	fba2 1201 	umull	r1, r2, r2, r1
 80020ea:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80020ee:	460a      	mov	r2, r1
 80020f0:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80020f4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80020f8:	4413      	add	r3, r2
 80020fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80020fe:	f04f 0000 	mov.w	r0, #0
 8002102:	f04f 0100 	mov.w	r1, #0
 8002106:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800210a:	4623      	mov	r3, r4
 800210c:	0a18      	lsrs	r0, r3, #8
 800210e:	462b      	mov	r3, r5
 8002110:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002114:	462b      	mov	r3, r5
 8002116:	1219      	asrs	r1, r3, #8
 8002118:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800211c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002120:	b21b      	sxth	r3, r3
 8002122:	17da      	asrs	r2, r3, #31
 8002124:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002128:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800212c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002130:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002134:	464a      	mov	r2, r9
 8002136:	fb02 f203 	mul.w	r2, r2, r3
 800213a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800213e:	4644      	mov	r4, r8
 8002140:	fb04 f303 	mul.w	r3, r4, r3
 8002144:	441a      	add	r2, r3
 8002146:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800214a:	4644      	mov	r4, r8
 800214c:	fba3 4304 	umull	r4, r3, r3, r4
 8002150:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002154:	4623      	mov	r3, r4
 8002156:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800215a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800215e:	18d3      	adds	r3, r2, r3
 8002160:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8002170:	464c      	mov	r4, r9
 8002172:	0323      	lsls	r3, r4, #12
 8002174:	4644      	mov	r4, r8
 8002176:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800217a:	4644      	mov	r4, r8
 800217c:	0322      	lsls	r2, r4, #12
 800217e:	1884      	adds	r4, r0, r2
 8002180:	633c      	str	r4, [r7, #48]	@ 0x30
 8002182:	eb41 0303 	adc.w	r3, r1, r3
 8002186:	637b      	str	r3, [r7, #52]	@ 0x34
 8002188:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800218c:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dev->calib.dig_P1) >> 33;
 8002190:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002194:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8002198:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 800219c:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80021a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80021a4:	8a5b      	ldrh	r3, [r3, #18]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2200      	movs	r2, #0
 80021aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80021ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80021b2:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80021b6:	462b      	mov	r3, r5
 80021b8:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80021bc:	4642      	mov	r2, r8
 80021be:	fb02 f203 	mul.w	r2, r2, r3
 80021c2:	464b      	mov	r3, r9
 80021c4:	4621      	mov	r1, r4
 80021c6:	fb01 f303 	mul.w	r3, r1, r3
 80021ca:	4413      	add	r3, r2
 80021cc:	4622      	mov	r2, r4
 80021ce:	4641      	mov	r1, r8
 80021d0:	fba2 1201 	umull	r1, r2, r2, r1
 80021d4:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80021d8:	460a      	mov	r2, r1
 80021da:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80021de:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80021e2:	4413      	add	r3, r2
 80021e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80021f4:	4629      	mov	r1, r5
 80021f6:	104a      	asrs	r2, r1, #1
 80021f8:	4629      	mov	r1, r5
 80021fa:	17cb      	asrs	r3, r1, #31
 80021fc:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

    if (var1 == 0) return 0; // avoid division by zero
 8002200:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002204:	4313      	orrs	r3, r2
 8002206:	d102      	bne.n	800220e <BME280_ReadPressure+0x306>
 8002208:	eddf 7aae 	vldr	s15, [pc, #696]	@ 80024c4 <BME280_ReadPressure+0x5bc>
 800220c:	e152      	b.n	80024b4 <BME280_ReadPressure+0x5ac>

    p = 1048576 - adc_P;
 800220e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002212:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8002216:	17da      	asrs	r2, r3, #31
 8002218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800221a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800221c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8002220:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    p = (((p << 31) - var2) * 3125) / var1;
 8002224:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002228:	105b      	asrs	r3, r3, #1
 800222a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800222e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002232:	07db      	lsls	r3, r3, #31
 8002234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002238:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800223c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8002240:	4621      	mov	r1, r4
 8002242:	1a89      	subs	r1, r1, r2
 8002244:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8002248:	4629      	mov	r1, r5
 800224a:	eb61 0303 	sbc.w	r3, r1, r3
 800224e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002252:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8002256:	4622      	mov	r2, r4
 8002258:	462b      	mov	r3, r5
 800225a:	1891      	adds	r1, r2, r2
 800225c:	6239      	str	r1, [r7, #32]
 800225e:	415b      	adcs	r3, r3
 8002260:	627b      	str	r3, [r7, #36]	@ 0x24
 8002262:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002266:	4621      	mov	r1, r4
 8002268:	1851      	adds	r1, r2, r1
 800226a:	61b9      	str	r1, [r7, #24]
 800226c:	4629      	mov	r1, r5
 800226e:	414b      	adcs	r3, r1
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800227e:	4649      	mov	r1, r9
 8002280:	018b      	lsls	r3, r1, #6
 8002282:	4641      	mov	r1, r8
 8002284:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002288:	4641      	mov	r1, r8
 800228a:	018a      	lsls	r2, r1, #6
 800228c:	4641      	mov	r1, r8
 800228e:	1889      	adds	r1, r1, r2
 8002290:	6139      	str	r1, [r7, #16]
 8002292:	4649      	mov	r1, r9
 8002294:	eb43 0101 	adc.w	r1, r3, r1
 8002298:	6179      	str	r1, [r7, #20]
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80022a6:	4649      	mov	r1, r9
 80022a8:	008b      	lsls	r3, r1, #2
 80022aa:	4641      	mov	r1, r8
 80022ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022b0:	4641      	mov	r1, r8
 80022b2:	008a      	lsls	r2, r1, #2
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	4603      	mov	r3, r0
 80022ba:	4622      	mov	r2, r4
 80022bc:	189b      	adds	r3, r3, r2
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	460b      	mov	r3, r1
 80022c2:	462a      	mov	r2, r5
 80022c4:	eb42 0303 	adc.w	r3, r2, r3
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80022d6:	4649      	mov	r1, r9
 80022d8:	008b      	lsls	r3, r1, #2
 80022da:	4641      	mov	r1, r8
 80022dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022e0:	4641      	mov	r1, r8
 80022e2:	008a      	lsls	r2, r1, #2
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	4603      	mov	r3, r0
 80022ea:	4622      	mov	r2, r4
 80022ec:	189b      	adds	r3, r3, r2
 80022ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80022f0:	462b      	mov	r3, r5
 80022f2:	460a      	mov	r2, r1
 80022f4:	eb42 0303 	adc.w	r3, r2, r3
 80022f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80022fa:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80022fe:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002302:	f7fe fdaf 	bl	8000e64 <__aeabi_ldivmod>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
    var1 = (((int64_t)dev->calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 800230e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002312:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002316:	b21b      	sxth	r3, r3
 8002318:	17da      	asrs	r2, r3, #31
 800231a:	673b      	str	r3, [r7, #112]	@ 0x70
 800231c:	677a      	str	r2, [r7, #116]	@ 0x74
 800231e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002322:	f04f 0000 	mov.w	r0, #0
 8002326:	f04f 0100 	mov.w	r1, #0
 800232a:	0b50      	lsrs	r0, r2, #13
 800232c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002330:	1359      	asrs	r1, r3, #13
 8002332:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8002336:	462b      	mov	r3, r5
 8002338:	fb00 f203 	mul.w	r2, r0, r3
 800233c:	4623      	mov	r3, r4
 800233e:	fb03 f301 	mul.w	r3, r3, r1
 8002342:	4413      	add	r3, r2
 8002344:	4622      	mov	r2, r4
 8002346:	fba2 1200 	umull	r1, r2, r2, r0
 800234a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800234e:	460a      	mov	r2, r1
 8002350:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8002354:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002358:	4413      	add	r3, r2
 800235a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800235e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002362:	f04f 0000 	mov.w	r0, #0
 8002366:	f04f 0100 	mov.w	r1, #0
 800236a:	0b50      	lsrs	r0, r2, #13
 800236c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002370:	1359      	asrs	r1, r3, #13
 8002372:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8002376:	462b      	mov	r3, r5
 8002378:	fb00 f203 	mul.w	r2, r0, r3
 800237c:	4623      	mov	r3, r4
 800237e:	fb03 f301 	mul.w	r3, r3, r1
 8002382:	4413      	add	r3, r2
 8002384:	4622      	mov	r2, r4
 8002386:	fba2 1200 	umull	r1, r2, r2, r0
 800238a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800238e:	460a      	mov	r2, r1
 8002390:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8002394:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002398:	4413      	add	r3, r2
 800239a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80023aa:	4621      	mov	r1, r4
 80023ac:	0e4a      	lsrs	r2, r1, #25
 80023ae:	4629      	mov	r1, r5
 80023b0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80023b4:	4629      	mov	r1, r5
 80023b6:	164b      	asrs	r3, r1, #25
 80023b8:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    var2 = (((int64_t)dev->calib.dig_P8) * p) >> 19;
 80023bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80023c0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	17da      	asrs	r2, r3, #31
 80023c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80023d0:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80023d4:	462a      	mov	r2, r5
 80023d6:	fb02 f203 	mul.w	r2, r2, r3
 80023da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023de:	4621      	mov	r1, r4
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80023ea:	4621      	mov	r1, r4
 80023ec:	fba2 1201 	umull	r1, r2, r2, r1
 80023f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80023f4:	460a      	mov	r2, r1
 80023f6:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80023fa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80023fe:	4413      	add	r3, r2
 8002400:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8002410:	4621      	mov	r1, r4
 8002412:	0cca      	lsrs	r2, r1, #19
 8002414:	4629      	mov	r1, r5
 8002416:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800241a:	4629      	mov	r1, r5
 800241c:	14cb      	asrs	r3, r1, #19
 800241e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

    p = ((p + var1 + var2) >> 8) + (((int64_t)dev->calib.dig_P7) << 4);
 8002422:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8002426:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800242a:	1884      	adds	r4, r0, r2
 800242c:	663c      	str	r4, [r7, #96]	@ 0x60
 800242e:	eb41 0303 	adc.w	r3, r1, r3
 8002432:	667b      	str	r3, [r7, #100]	@ 0x64
 8002434:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002438:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800243c:	4621      	mov	r1, r4
 800243e:	1889      	adds	r1, r1, r2
 8002440:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002442:	4629      	mov	r1, r5
 8002444:	eb43 0101 	adc.w	r1, r3, r1
 8002448:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800244a:	f04f 0000 	mov.w	r0, #0
 800244e:	f04f 0100 	mov.w	r1, #0
 8002452:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8002456:	4623      	mov	r3, r4
 8002458:	0a18      	lsrs	r0, r3, #8
 800245a:	462b      	mov	r3, r5
 800245c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002460:	462b      	mov	r3, r5
 8002462:	1219      	asrs	r1, r3, #8
 8002464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002468:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800246c:	b21b      	sxth	r3, r3
 800246e:	17da      	asrs	r2, r3, #31
 8002470:	653b      	str	r3, [r7, #80]	@ 0x50
 8002472:	657a      	str	r2, [r7, #84]	@ 0x54
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002480:	464c      	mov	r4, r9
 8002482:	0123      	lsls	r3, r4, #4
 8002484:	4644      	mov	r4, r8
 8002486:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800248a:	4644      	mov	r4, r8
 800248c:	0122      	lsls	r2, r4, #4
 800248e:	1884      	adds	r4, r0, r2
 8002490:	603c      	str	r4, [r7, #0]
 8002492:	eb41 0303 	adc.w	r3, r1, r3
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	e9d7 3400 	ldrd	r3, r4, [r7]
 800249c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    return (float)p / 25600.0f;
 80024a0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80024a4:	f7fe fca0 	bl	8000de8 <__aeabi_l2f>
 80024a8:	ee06 0a90 	vmov	s13, r0
 80024ac:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80024c8 <BME280_ReadPressure+0x5c0>
 80024b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 80024b4:	eeb0 0a67 	vmov.f32	s0, s15
 80024b8:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80024bc:	46bd      	mov	sp, r7
 80024be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024c2:	bf00      	nop
 80024c4:	00000000 	.word	0x00000000
 80024c8:	46c80000 	.word	0x46c80000

080024cc <BME280_ReadHumidity>:

float BME280_ReadHumidity(bme280_t *dev)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	@ 0x28
 80024d0:	af04      	add	r7, sp, #16
 80024d2:	6078      	str	r0, [r7, #4]
    int32_t adc_H;
    uint8_t data[2];

    HAL_I2C_Mem_Read(dev->i2c, dev->address, 0xFD, 1, data, 2, HAL_MAX_DELAY);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	791b      	ldrb	r3, [r3, #4]
 80024dc:	4619      	mov	r1, r3
 80024de:	f04f 33ff 	mov.w	r3, #4294967295
 80024e2:	9302      	str	r3, [sp, #8]
 80024e4:	2302      	movs	r3, #2
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	f107 0308 	add.w	r3, r7, #8
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	2301      	movs	r3, #1
 80024f0:	22fd      	movs	r2, #253	@ 0xfd
 80024f2:	f001 fcb9 	bl	8003e68 <HAL_I2C_Mem_Read>
    adc_H = (int32_t)((data[0] << 8) | data[1]);
 80024f6:	7a3b      	ldrb	r3, [r7, #8]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	7a7a      	ldrb	r2, [r7, #9]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

    int32_t v_x1_u32r;
    v_x1_u32r = (dev->t_fine - ((int32_t)76800));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8002508:	613b      	str	r3, [r7, #16]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)dev->calib.dig_H4) << 20) -
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	039a      	lsls	r2, r3, #14
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8002514:	051b      	lsls	r3, r3, #20
 8002516:	1ad2      	subs	r2, r2, r3
            (((int32_t)dev->calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 800251e:	4619      	mov	r1, r3
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	fb01 f303 	mul.w	r3, r1, r3
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)dev->calib.dig_H4) << 20) -
 8002526:	1ad3      	subs	r3, r2, r3
            (((int32_t)dev->calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8002528:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800252c:	13db      	asrs	r3, r3, #15
            (((((((v_x1_u32r * ((int32_t)dev->calib.dig_H6)) >> 10) *
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	f992 202e 	ldrsb.w	r2, [r2, #46]	@ 0x2e
 8002534:	4611      	mov	r1, r2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	fb01 f202 	mul.w	r2, r1, r2
 800253c:	1292      	asrs	r2, r2, #10
            (((v_x1_u32r * ((int32_t)dev->calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	f891 1028 	ldrb.w	r1, [r1, #40]	@ 0x28
 8002544:	4608      	mov	r0, r1
 8002546:	6939      	ldr	r1, [r7, #16]
 8002548:	fb00 f101 	mul.w	r1, r0, r1
 800254c:	12c9      	asrs	r1, r1, #11
 800254e:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
            (((((((v_x1_u32r * ((int32_t)dev->calib.dig_H6)) >> 10) *
 8002552:	fb01 f202 	mul.w	r2, r1, r2
            (((v_x1_u32r * ((int32_t)dev->calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8002556:	1292      	asrs	r2, r2, #10
 8002558:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
            ((int32_t)2097152)) * ((int32_t)dev->calib.dig_H2) + 8192) >> 14));
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	f9b1 1026 	ldrsh.w	r1, [r1, #38]	@ 0x26
 8002562:	fb01 f202 	mul.w	r2, r1, r2
 8002566:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800256a:	1392      	asrs	r2, r2, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)dev->calib.dig_H4) << 20) -
 800256c:	fb02 f303 	mul.w	r3, r2, r3
 8002570:	613b      	str	r3, [r7, #16]

    v_x1_u32r = v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((int32_t)dev->calib.dig_H1)) >> 4);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	13db      	asrs	r3, r3, #15
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	13d2      	asrs	r2, r2, #15
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	11db      	asrs	r3, r3, #7
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	111b      	asrs	r3, r3, #4
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	613b      	str	r3, [r7, #16]
    v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002598:	613b      	str	r3, [r7, #16]
    v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 80025a0:	bfa8      	it	ge
 80025a2:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 80025a6:	613b      	str	r3, [r7, #16]

    float h = (v_x1_u32r >> 12);
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	131b      	asrs	r3, r3, #12
 80025ac:	ee07 3a90 	vmov	s15, r3
 80025b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025b4:	edc7 7a03 	vstr	s15, [r7, #12]
    return h / 1024.0f;
 80025b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025bc:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80025d4 <BME280_ReadHumidity+0x108>
 80025c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025c4:	eef0 7a66 	vmov.f32	s15, s13
}
 80025c8:	eeb0 0a67 	vmov.f32	s0, s15
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	44800000 	.word	0x44800000

080025d8 <BME280_Read8>:

static uint8_t BME280_Read8(bme280_t *dev, uint8_t reg)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af04      	add	r7, sp, #16
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	70fb      	strb	r3, [r7, #3]
    uint8_t value;
    HAL_I2C_Mem_Read(dev->i2c, dev->address, reg, 1, &value, 1, HAL_MAX_DELAY);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	791b      	ldrb	r3, [r3, #4]
 80025ec:	4619      	mov	r1, r3
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	2301      	movs	r3, #1
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	f107 030f 	add.w	r3, r7, #15
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2301      	movs	r3, #1
 8002604:	f001 fc30 	bl	8003e68 <HAL_I2C_Mem_Read>
    return value;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <BME280_Read16_LE>:

static uint16_t BME280_Read16_LE(bme280_t *dev, uint8_t reg)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b088      	sub	sp, #32
 8002616:	af04      	add	r7, sp, #16
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	70fb      	strb	r3, [r7, #3]
    uint8_t data[2];
    HAL_I2C_Mem_Read(dev->i2c, dev->address, reg, 1, data, 2, HAL_MAX_DELAY);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	791b      	ldrb	r3, [r3, #4]
 8002626:	4619      	mov	r1, r3
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	b29a      	uxth	r2, r3
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
 8002630:	9302      	str	r3, [sp, #8]
 8002632:	2302      	movs	r3, #2
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	f107 030c 	add.w	r3, r7, #12
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	2301      	movs	r3, #1
 800263e:	f001 fc13 	bl	8003e68 <HAL_I2C_Mem_Read>
    return (data[1] << 8) | data[0];
 8002642:	7b7b      	ldrb	r3, [r7, #13]
 8002644:	b21b      	sxth	r3, r3
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	b21a      	sxth	r2, r3
 800264a:	7b3b      	ldrb	r3, [r7, #12]
 800264c:	b21b      	sxth	r3, r3
 800264e:	4313      	orrs	r3, r2
 8002650:	b21b      	sxth	r3, r3
 8002652:	b29b      	uxth	r3, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <BME280_ReadS16_LE>:

static int16_t BME280_ReadS16_LE(bme280_t *dev, uint8_t reg)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	70fb      	strb	r3, [r7, #3]
    return (int16_t)BME280_Read16_LE(dev, reg);
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	4619      	mov	r1, r3
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff ffd0 	bl	8002612 <BME280_Read16_LE>
 8002672:	4603      	mov	r3, r0
 8002674:	b21b      	sxth	r3, r3
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <BME280_ReadCoefficients>:
    HAL_I2C_Mem_Read(dev->i2c, dev->address, reg, 1, data, 3, HAL_MAX_DELAY);
    return ((uint32_t)data[0] << 16) | ((uint32_t)data[1] << 8) | (uint32_t)data[2];
}

static void BME280_ReadCoefficients(bme280_t *dev)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b088      	sub	sp, #32
 8002682:	af04      	add	r7, sp, #16
 8002684:	6078      	str	r0, [r7, #4]
    dev->calib.dig_T1 = BME280_Read16_LE(dev, 0x88);
 8002686:	2188      	movs	r1, #136	@ 0x88
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ffc2 	bl	8002612 <BME280_Read16_LE>
 800268e:	4603      	mov	r3, r0
 8002690:	461a      	mov	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	819a      	strh	r2, [r3, #12]
    dev->calib.dig_T2 = BME280_ReadS16_LE(dev, 0x8A);
 8002696:	218a      	movs	r1, #138	@ 0x8a
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ffdf 	bl	800265c <BME280_ReadS16_LE>
 800269e:	4603      	mov	r3, r0
 80026a0:	461a      	mov	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	81da      	strh	r2, [r3, #14]
    dev->calib.dig_T3 = BME280_ReadS16_LE(dev, 0x8C);
 80026a6:	218c      	movs	r1, #140	@ 0x8c
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff ffd7 	bl	800265c <BME280_ReadS16_LE>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461a      	mov	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	821a      	strh	r2, [r3, #16]

    dev->calib.dig_P1 = BME280_Read16_LE(dev, 0x8E);
 80026b6:	218e      	movs	r1, #142	@ 0x8e
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ffaa 	bl	8002612 <BME280_Read16_LE>
 80026be:	4603      	mov	r3, r0
 80026c0:	461a      	mov	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	825a      	strh	r2, [r3, #18]
    dev->calib.dig_P2 = BME280_ReadS16_LE(dev, 0x90);
 80026c6:	2190      	movs	r1, #144	@ 0x90
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ffc7 	bl	800265c <BME280_ReadS16_LE>
 80026ce:	4603      	mov	r3, r0
 80026d0:	461a      	mov	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	829a      	strh	r2, [r3, #20]
    dev->calib.dig_P3 = BME280_ReadS16_LE(dev, 0x92);
 80026d6:	2192      	movs	r1, #146	@ 0x92
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ffbf 	bl	800265c <BME280_ReadS16_LE>
 80026de:	4603      	mov	r3, r0
 80026e0:	461a      	mov	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	82da      	strh	r2, [r3, #22]
    dev->calib.dig_P4 = BME280_ReadS16_LE(dev, 0x94);
 80026e6:	2194      	movs	r1, #148	@ 0x94
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff ffb7 	bl	800265c <BME280_ReadS16_LE>
 80026ee:	4603      	mov	r3, r0
 80026f0:	461a      	mov	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	831a      	strh	r2, [r3, #24]
    dev->calib.dig_P5 = BME280_ReadS16_LE(dev, 0x96);
 80026f6:	2196      	movs	r1, #150	@ 0x96
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ffaf 	bl	800265c <BME280_ReadS16_LE>
 80026fe:	4603      	mov	r3, r0
 8002700:	461a      	mov	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	835a      	strh	r2, [r3, #26]
    dev->calib.dig_P6 = BME280_ReadS16_LE(dev, 0x98);
 8002706:	2198      	movs	r1, #152	@ 0x98
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ffa7 	bl	800265c <BME280_ReadS16_LE>
 800270e:	4603      	mov	r3, r0
 8002710:	461a      	mov	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	839a      	strh	r2, [r3, #28]
    dev->calib.dig_P7 = BME280_ReadS16_LE(dev, 0x9A);
 8002716:	219a      	movs	r1, #154	@ 0x9a
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ff9f 	bl	800265c <BME280_ReadS16_LE>
 800271e:	4603      	mov	r3, r0
 8002720:	461a      	mov	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	83da      	strh	r2, [r3, #30]
    dev->calib.dig_P8 = BME280_ReadS16_LE(dev, 0x9C);
 8002726:	219c      	movs	r1, #156	@ 0x9c
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ff97 	bl	800265c <BME280_ReadS16_LE>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	841a      	strh	r2, [r3, #32]
    dev->calib.dig_P9 = BME280_ReadS16_LE(dev, 0x9E);
 8002736:	219e      	movs	r1, #158	@ 0x9e
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff ff8f 	bl	800265c <BME280_ReadS16_LE>
 800273e:	4603      	mov	r3, r0
 8002740:	461a      	mov	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	845a      	strh	r2, [r3, #34]	@ 0x22

    dev->calib.dig_H1 = BME280_Read8(dev, 0xA1);
 8002746:	21a1      	movs	r1, #161	@ 0xa1
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff ff45 	bl	80025d8 <BME280_Read8>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    dev->calib.dig_H2 = BME280_ReadS16_LE(dev, 0xE1);
 8002758:	21e1      	movs	r1, #225	@ 0xe1
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ff7e 	bl	800265c <BME280_ReadS16_LE>
 8002760:	4603      	mov	r3, r0
 8002762:	461a      	mov	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	84da      	strh	r2, [r3, #38]	@ 0x26
    dev->calib.dig_H3 = BME280_Read8(dev, 0xE3);
 8002768:	21e3      	movs	r1, #227	@ 0xe3
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ff34 	bl	80025d8 <BME280_Read8>
 8002770:	4603      	mov	r3, r0
 8002772:	461a      	mov	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    uint8_t e4, e5, e6;
    HAL_I2C_Mem_Read(dev->i2c, dev->address, 0xE4, 1, &e4, 1, HAL_MAX_DELAY);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	791b      	ldrb	r3, [r3, #4]
 8002782:	4619      	mov	r1, r3
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
 8002788:	9302      	str	r3, [sp, #8]
 800278a:	2301      	movs	r3, #1
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	f107 030f 	add.w	r3, r7, #15
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2301      	movs	r3, #1
 8002796:	22e4      	movs	r2, #228	@ 0xe4
 8002798:	f001 fb66 	bl	8003e68 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(dev->i2c, dev->address, 0xE5, 1, &e5, 1, HAL_MAX_DELAY);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	791b      	ldrb	r3, [r3, #4]
 80027a4:	4619      	mov	r1, r3
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295
 80027aa:	9302      	str	r3, [sp, #8]
 80027ac:	2301      	movs	r3, #1
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	f107 030e 	add.w	r3, r7, #14
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	2301      	movs	r3, #1
 80027b8:	22e5      	movs	r2, #229	@ 0xe5
 80027ba:	f001 fb55 	bl	8003e68 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(dev->i2c, dev->address, 0xE6, 1, &e6, 1, HAL_MAX_DELAY);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	791b      	ldrb	r3, [r3, #4]
 80027c6:	4619      	mov	r1, r3
 80027c8:	f04f 33ff 	mov.w	r3, #4294967295
 80027cc:	9302      	str	r3, [sp, #8]
 80027ce:	2301      	movs	r3, #1
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	f107 030d 	add.w	r3, r7, #13
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2301      	movs	r3, #1
 80027da:	22e6      	movs	r2, #230	@ 0xe6
 80027dc:	f001 fb44 	bl	8003e68 <HAL_I2C_Mem_Read>

    dev->calib.dig_H4 = (int16_t)((e4 << 4) | (e5 & 0x0F));
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	b21b      	sxth	r3, r3
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	b21a      	sxth	r2, r3
 80027e8:	7bbb      	ldrb	r3, [r7, #14]
 80027ea:	b21b      	sxth	r3, r3
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	b21b      	sxth	r3, r3
 80027f2:	4313      	orrs	r3, r2
 80027f4:	b21a      	sxth	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    dev->calib.dig_H5 = (int16_t)((e6 << 4) | (e5 >> 4));
 80027fa:	7b7b      	ldrb	r3, [r7, #13]
 80027fc:	b21b      	sxth	r3, r3
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	b21a      	sxth	r2, r3
 8002802:	7bbb      	ldrb	r3, [r7, #14]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	b2db      	uxtb	r3, r3
 8002808:	b21b      	sxth	r3, r3
 800280a:	4313      	orrs	r3, r2
 800280c:	b21a      	sxth	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	859a      	strh	r2, [r3, #44]	@ 0x2c
    dev->calib.dig_H6 = (int8_t)BME280_Read8(dev, 0xE7);
 8002812:	21e7      	movs	r1, #231	@ 0xe7
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff fedf 	bl	80025d8 <BME280_Read8>
 800281a:	4603      	mov	r3, r0
 800281c:	b25a      	sxtb	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
}
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <Device_Init>:

UBYTE *BlackImage = NULL;
bme280_t bme; // Global BME280 sensor object

void Device_Init(UBYTE rotation, UBYTE background_color)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af02      	add	r7, sp, #8
 8002832:	4603      	mov	r3, r0
 8002834:	460a      	mov	r2, r1
 8002836:	71fb      	strb	r3, [r7, #7]
 8002838:	4613      	mov	r3, r2
 800283a:	71bb      	strb	r3, [r7, #6]
    /*** Initialize E-Paper ***/
    UWORD Imagesize = ((EPD_2in13_V4_WIDTH % 8 == 0) ?
 800283c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002840:	81fb      	strh	r3, [r7, #14]
                      (EPD_2in13_V4_WIDTH / 8) :
                      (EPD_2in13_V4_WIDTH / 8 + 1)) * EPD_2in13_V4_HEIGHT;

    BlackImage = (UBYTE *)malloc(Imagesize);
 8002842:	89fb      	ldrh	r3, [r7, #14]
 8002844:	4618      	mov	r0, r3
 8002846:	f004 fb57 	bl	8006ef8 <malloc>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	4b18      	ldr	r3, [pc, #96]	@ (80028b0 <Device_Init+0x84>)
 8002850:	601a      	str	r2, [r3, #0]
    if (BlackImage == NULL) {
 8002852:	4b17      	ldr	r3, [pc, #92]	@ (80028b0 <Device_Init+0x84>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d103      	bne.n	8002862 <Device_Init+0x36>
        Debug("Device_Init: Failed to allocate BlackImage!\r\n");
 800285a:	4816      	ldr	r0, [pc, #88]	@ (80028b4 <Device_Init+0x88>)
 800285c:	f005 f970 	bl	8007b40 <puts>
        return;
 8002860:	e023      	b.n	80028aa <Device_Init+0x7e>
    }

    Paint_NewImage(BlackImage, EPD_2in13_V4_WIDTH, EPD_2in13_V4_HEIGHT, rotation, background_color);
 8002862:	4b13      	ldr	r3, [pc, #76]	@ (80028b0 <Device_Init+0x84>)
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	b29a      	uxth	r2, r3
 800286a:	79bb      	ldrb	r3, [r7, #6]
 800286c:	b29b      	uxth	r3, r3
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	22fa      	movs	r2, #250	@ 0xfa
 8002874:	217a      	movs	r1, #122	@ 0x7a
 8002876:	f7fe ff21 	bl	80016bc <Paint_NewImage>
    Paint_SelectImage(BlackImage);
 800287a:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <Device_Init+0x84>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe ff72 	bl	8001768 <Paint_SelectImage>
    Paint_Clear(background_color);
 8002884:	79bb      	ldrb	r3, [r7, #6]
 8002886:	b29b      	uxth	r3, r3
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff f8cb 	bl	8001a24 <Paint_Clear>

    EPD_2in13_V4_Init();
 800288e:	f7fe fdda 	bl	8001446 <EPD_2in13_V4_Init>
    EPD_2in13_V4_Display_Base(BlackImage);
 8002892:	4b07      	ldr	r3, [pc, #28]	@ (80028b0 <Device_Init+0x84>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fe55 	bl	8001546 <EPD_2in13_V4_Display_Base>
    EPD_2in13_V4_Init_Fast();
 800289c:	f7fe fe13 	bl	80014c6 <EPD_2in13_V4_Init_Fast>

    /*** Initialize BME280 ***/
    BME280_Init(&bme, &hi2c1, BME280_ADDRESS); // Use your hi2c1
 80028a0:	22ec      	movs	r2, #236	@ 0xec
 80028a2:	4905      	ldr	r1, [pc, #20]	@ (80028b8 <Device_Init+0x8c>)
 80028a4:	4805      	ldr	r0, [pc, #20]	@ (80028bc <Device_Init+0x90>)
 80028a6:	f7ff fa61 	bl	8001d6c <BME280_Init>
}
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000218 	.word	0x20000218
 80028b4:	0800ae80 	.word	0x0800ae80
 80028b8:	2000024c 	.word	0x2000024c
 80028bc:	2000021c 	.word	0x2000021c

080028c0 <EPD_Print>:

void EPD_Print(int x, int y, const char* text,sFONT* font, FontColorMode_t mode)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
    if (mode == FONT_BLACK_ON_WHITE) {
 80028ce:	7e3b      	ldrb	r3, [r7, #24]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10c      	bne.n	80028ee <EPD_Print+0x2e>
        Paint_DrawString_EN(x, y, (char*)text, font, WHITE, BLACK);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	b298      	uxth	r0, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	b299      	uxth	r1, r3
 80028dc:	2300      	movs	r3, #0
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	23ff      	movs	r3, #255	@ 0xff
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	f7ff f9ec 	bl	8001cc4 <Paint_DrawString_EN>
 80028ec:	e00b      	b.n	8002906 <EPD_Print+0x46>
    } else {
        Paint_DrawString_EN(x, y, (char*)text, font, BLACK, WHITE);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	b298      	uxth	r0, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	b299      	uxth	r1, r3
 80028f6:	23ff      	movs	r3, #255	@ 0xff
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	2300      	movs	r3, #0
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	f7ff f9df 	bl	8001cc4 <Paint_DrawString_EN>
    }
    HAL_Delay(500);
 8002906:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800290a:	f000 fe19 	bl	8003540 <HAL_Delay>
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <EPD_PrintTemperature>:

void EPD_PrintTemperature(bme280_t *bme, int x, int y, FontColorMode_t mode)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b090      	sub	sp, #64	@ 0x40
 800291c:	af02      	add	r7, sp, #8
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	70fb      	strb	r3, [r7, #3]
    char buffer[32];
    float temp = BME280_ReadTemperature(bme);
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f7ff fa8e 	bl	8001e48 <BME280_ReadTemperature>
 800292c:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
    sprintf(buffer, "T:%.1f C", temp);
 8002930:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002932:	f7fd fe09 	bl	8000548 <__aeabi_f2d>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	f107 0014 	add.w	r0, r7, #20
 800293e:	4908      	ldr	r1, [pc, #32]	@ (8002960 <EPD_PrintTemperature+0x48>)
 8002940:	f005 f906 	bl	8007b50 <siprintf>
    EPD_Print(x, y, buffer,&Font16, mode);
 8002944:	f107 0214 	add.w	r2, r7, #20
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <EPD_PrintTemperature+0x4c>)
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	68b8      	ldr	r0, [r7, #8]
 8002952:	f7ff ffb5 	bl	80028c0 <EPD_Print>
}
 8002956:	bf00      	nop
 8002958:	3738      	adds	r7, #56	@ 0x38
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	0800aeb4 	.word	0x0800aeb4
 8002964:	20000000 	.word	0x20000000

08002968 <EPD_PrintPressure>:

void EPD_PrintPressure(bme280_t *bme, int x, int y, FontColorMode_t mode)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b090      	sub	sp, #64	@ 0x40
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	70fb      	strb	r3, [r7, #3]
    char buffer[32];
    float press = BME280_ReadPressure(bme);
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7ff fac6 	bl	8001f08 <BME280_ReadPressure>
 800297c:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
    sprintf(buffer, "P:%.1f hPa", press);
 8002980:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002982:	f7fd fde1 	bl	8000548 <__aeabi_f2d>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	f107 0014 	add.w	r0, r7, #20
 800298e:	4908      	ldr	r1, [pc, #32]	@ (80029b0 <EPD_PrintPressure+0x48>)
 8002990:	f005 f8de 	bl	8007b50 <siprintf>
    EPD_Print(x, y, buffer,&Font16, mode);
 8002994:	f107 0214 	add.w	r2, r7, #20
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <EPD_PrintPressure+0x4c>)
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	68b8      	ldr	r0, [r7, #8]
 80029a2:	f7ff ff8d 	bl	80028c0 <EPD_Print>
}
 80029a6:	bf00      	nop
 80029a8:	3738      	adds	r7, #56	@ 0x38
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	0800aec0 	.word	0x0800aec0
 80029b4:	20000000 	.word	0x20000000

080029b8 <EPD_PrintHumidity>:

void EPD_PrintHumidity(bme280_t *bme, int x, int y, FontColorMode_t mode)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b090      	sub	sp, #64	@ 0x40
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	70fb      	strb	r3, [r7, #3]
    char buffer[32];
    float hum = BME280_ReadHumidity(bme);
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7ff fd80 	bl	80024cc <BME280_ReadHumidity>
 80029cc:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
    sprintf(buffer, "H:%.1f %%", hum);
 80029d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80029d2:	f7fd fdb9 	bl	8000548 <__aeabi_f2d>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	f107 0014 	add.w	r0, r7, #20
 80029de:	4908      	ldr	r1, [pc, #32]	@ (8002a00 <EPD_PrintHumidity+0x48>)
 80029e0:	f005 f8b6 	bl	8007b50 <siprintf>
    EPD_Print(x, y, buffer,&Font16, mode);
 80029e4:	f107 0214 	add.w	r2, r7, #20
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <EPD_PrintHumidity+0x4c>)
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	68b8      	ldr	r0, [r7, #8]
 80029f2:	f7ff ff65 	bl	80028c0 <EPD_Print>
}
 80029f6:	bf00      	nop
 80029f8:	3738      	adds	r7, #56	@ 0x38
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	0800aecc 	.word	0x0800aecc
 8002a04:	20000000 	.word	0x20000000

08002a08 <EPD_PrintAltitude>:

void EPD_PrintAltitude(bme280_t *bme, float seaLevelhPa, int x, int y, FontColorMode_t mode)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b092      	sub	sp, #72	@ 0x48
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	6178      	str	r0, [r7, #20]
 8002a10:	ed87 0a04 	vstr	s0, [r7, #16]
 8002a14:	60f9      	str	r1, [r7, #12]
 8002a16:	60ba      	str	r2, [r7, #8]
 8002a18:	71fb      	strb	r3, [r7, #7]
    char buffer[32];
    float pressure = BME280_ReadPressure(bme);
 8002a1a:	6978      	ldr	r0, [r7, #20]
 8002a1c:	f7ff fa74 	bl	8001f08 <BME280_ReadPressure>
 8002a20:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
    float altitude = 44330.0 * (1.0 - pow(pressure / seaLevelhPa, 0.1903));
 8002a24:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002a28:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a30:	ee16 0a90 	vmov	r0, s13
 8002a34:	f7fd fd88 	bl	8000548 <__aeabi_f2d>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	ed9f 1b1a 	vldr	d1, [pc, #104]	@ 8002aa8 <EPD_PrintAltitude+0xa0>
 8002a40:	ec43 2b10 	vmov	d0, r2, r3
 8002a44:	f007 f904 	bl	8009c50 <pow>
 8002a48:	ec53 2b10 	vmov	r2, r3, d0
 8002a4c:	f04f 0000 	mov.w	r0, #0
 8002a50:	4919      	ldr	r1, [pc, #100]	@ (8002ab8 <EPD_PrintAltitude+0xb0>)
 8002a52:	f7fd fc19 	bl	8000288 <__aeabi_dsub>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	a314      	add	r3, pc, #80	@ (adr r3, 8002ab0 <EPD_PrintAltitude+0xa8>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f7fd fdc8 	bl	80005f8 <__aeabi_dmul>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	4619      	mov	r1, r3
 8002a70:	f7fe f89a 	bl	8000ba8 <__aeabi_d2f>
 8002a74:	4603      	mov	r3, r0
 8002a76:	63bb      	str	r3, [r7, #56]	@ 0x38
    sprintf(buffer, "A:%.1f m", altitude);
 8002a78:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002a7a:	f7fd fd65 	bl	8000548 <__aeabi_f2d>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	f107 0018 	add.w	r0, r7, #24
 8002a86:	490d      	ldr	r1, [pc, #52]	@ (8002abc <EPD_PrintAltitude+0xb4>)
 8002a88:	f005 f862 	bl	8007b50 <siprintf>
    EPD_Print(x, y, buffer,&Font16, mode);
 8002a8c:	f107 0218 	add.w	r2, r7, #24
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac0 <EPD_PrintAltitude+0xb8>)
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7ff ff11 	bl	80028c0 <EPD_Print>
}
 8002a9e:	bf00      	nop
 8002aa0:	3740      	adds	r7, #64	@ 0x40
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	1a36e2eb 	.word	0x1a36e2eb
 8002aac:	3fc85bc0 	.word	0x3fc85bc0
 8002ab0:	00000000 	.word	0x00000000
 8002ab4:	40e5a540 	.word	0x40e5a540
 8002ab8:	3ff00000 	.word	0x3ff00000
 8002abc:	0800aed8 	.word	0x0800aed8
 8002ac0:	20000000 	.word	0x20000000

08002ac4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	@ 0x28
 8002ac8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	60da      	str	r2, [r3, #12]
 8002ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ada:	4b3e      	ldr	r3, [pc, #248]	@ (8002bd4 <MX_GPIO_Init+0x110>)
 8002adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ade:	4a3d      	ldr	r2, [pc, #244]	@ (8002bd4 <MX_GPIO_Init+0x110>)
 8002ae0:	f043 0304 	orr.w	r3, r3, #4
 8002ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd4 <MX_GPIO_Init+0x110>)
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002af2:	4b38      	ldr	r3, [pc, #224]	@ (8002bd4 <MX_GPIO_Init+0x110>)
 8002af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af6:	4a37      	ldr	r2, [pc, #220]	@ (8002bd4 <MX_GPIO_Init+0x110>)
 8002af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002afe:	4b35      	ldr	r3, [pc, #212]	@ (8002bd4 <MX_GPIO_Init+0x110>)
 8002b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0a:	4b32      	ldr	r3, [pc, #200]	@ (8002bd4 <MX_GPIO_Init+0x110>)
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0e:	4a31      	ldr	r2, [pc, #196]	@ (8002bd4 <MX_GPIO_Init+0x110>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b16:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd4 <MX_GPIO_Init+0x110>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b22:	4b2c      	ldr	r3, [pc, #176]	@ (8002bd4 <MX_GPIO_Init+0x110>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b26:	4a2b      	ldr	r2, [pc, #172]	@ (8002bd4 <MX_GPIO_Init+0x110>)
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b2e:	4b29      	ldr	r3, [pc, #164]	@ (8002bd4 <MX_GPIO_Init+0x110>)
 8002b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RST_Pin, GPIO_PIN_RESET);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f44f 6102 	mov.w	r1, #2080	@ 0x820
 8002b40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b44:	f000 ffc8 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f241 0102 	movw	r1, #4098	@ 0x1002
 8002b4e:	4822      	ldr	r0, [pc, #136]	@ (8002bd8 <MX_GPIO_Init+0x114>)
 8002b50:	f000 ffc2 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin RST_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|RST_Pin;
 8002b54:	f44f 6302 	mov.w	r3, #2080	@ 0x820
 8002b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b62:	2300      	movs	r3, #0
 8002b64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b66:	f107 0314 	add.w	r3, r7, #20
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b70:	f000 fdf0 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = DC_Pin|SPI_CS_Pin;
 8002b74:	f241 0302 	movw	r3, #4098	@ 0x1002
 8002b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4812      	ldr	r0, [pc, #72]	@ (8002bd8 <MX_GPIO_Init+0x114>)
 8002b8e:	f000 fde1 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8002b92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002baa:	f000 fdd3 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002bae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bb4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bc8:	f000 fdc4 	bl	8003754 <HAL_GPIO_Init>

}
 8002bcc:	bf00      	nop
 8002bce:	3728      	adds	r7, #40	@ 0x28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	48000400 	.word	0x48000400

08002bdc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002be0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <MX_I2C1_Init+0x74>)
 8002be2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c54 <MX_I2C1_Init+0x78>)
 8002be4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8002be6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <MX_I2C1_Init+0x74>)
 8002be8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c58 <MX_I2C1_Init+0x7c>)
 8002bea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002bec:	4b18      	ldr	r3, [pc, #96]	@ (8002c50 <MX_I2C1_Init+0x74>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bf2:	4b17      	ldr	r3, [pc, #92]	@ (8002c50 <MX_I2C1_Init+0x74>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bf8:	4b15      	ldr	r3, [pc, #84]	@ (8002c50 <MX_I2C1_Init+0x74>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bfe:	4b14      	ldr	r3, [pc, #80]	@ (8002c50 <MX_I2C1_Init+0x74>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c04:	4b12      	ldr	r3, [pc, #72]	@ (8002c50 <MX_I2C1_Init+0x74>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c0a:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <MX_I2C1_Init+0x74>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c10:	4b0f      	ldr	r3, [pc, #60]	@ (8002c50 <MX_I2C1_Init+0x74>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c16:	480e      	ldr	r0, [pc, #56]	@ (8002c50 <MX_I2C1_Init+0x74>)
 8002c18:	f000 ff76 	bl	8003b08 <HAL_I2C_Init>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002c22:	f000 f937 	bl	8002e94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c26:	2100      	movs	r1, #0
 8002c28:	4809      	ldr	r0, [pc, #36]	@ (8002c50 <MX_I2C1_Init+0x74>)
 8002c2a:	f001 fcf9 	bl	8004620 <HAL_I2CEx_ConfigAnalogFilter>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002c34:	f000 f92e 	bl	8002e94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4805      	ldr	r0, [pc, #20]	@ (8002c50 <MX_I2C1_Init+0x74>)
 8002c3c:	f001 fd3b 	bl	80046b6 <HAL_I2CEx_ConfigDigitalFilter>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c46:	f000 f925 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000024c 	.word	0x2000024c
 8002c54:	40005400 	.word	0x40005400
 8002c58:	00503d58 	.word	0x00503d58

08002c5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b0ac      	sub	sp, #176	@ 0xb0
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	2288      	movs	r2, #136	@ 0x88
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f005 f861 	bl	8007d44 <memset>
  if(i2cHandle->Instance==I2C1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a21      	ldr	r2, [pc, #132]	@ (8002d0c <HAL_I2C_MspInit+0xb0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d13a      	bne.n	8002d02 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c8c:	2340      	movs	r3, #64	@ 0x40
 8002c8e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c90:	2300      	movs	r3, #0
 8002c92:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f002 fb95 	bl	80053c8 <HAL_RCCEx_PeriphCLKConfig>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002ca4:	f000 f8f6 	bl	8002e94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca8:	4b19      	ldr	r3, [pc, #100]	@ (8002d10 <HAL_I2C_MspInit+0xb4>)
 8002caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cac:	4a18      	ldr	r2, [pc, #96]	@ (8002d10 <HAL_I2C_MspInit+0xb4>)
 8002cae:	f043 0302 	orr.w	r3, r3, #2
 8002cb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cb4:	4b16      	ldr	r3, [pc, #88]	@ (8002d10 <HAL_I2C_MspInit+0xb4>)
 8002cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8002cc0:	23c0      	movs	r3, #192	@ 0xc0
 8002cc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cc6:	2312      	movs	r3, #18
 8002cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cd8:	2304      	movs	r3, #4
 8002cda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cde:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	480b      	ldr	r0, [pc, #44]	@ (8002d14 <HAL_I2C_MspInit+0xb8>)
 8002ce6:	f000 fd35 	bl	8003754 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cea:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <HAL_I2C_MspInit+0xb4>)
 8002cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cee:	4a08      	ldr	r2, [pc, #32]	@ (8002d10 <HAL_I2C_MspInit+0xb4>)
 8002cf0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cf6:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <HAL_I2C_MspInit+0xb4>)
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002d02:	bf00      	nop
 8002d04:	37b0      	adds	r7, #176	@ 0xb0
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40005400 	.word	0x40005400
 8002d10:	40021000 	.word	0x40021000
 8002d14:	48000400 	.word	0x48000400

08002d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d1e:	f000 fb93 	bl	8003448 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d22:	f000 f863 	bl	8002dec <SystemClock_Config>
  //LED_Init();

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d26:	f7ff fecd 	bl	8002ac4 <MX_GPIO_Init>
  //MX_USART2_UART_Init();
  MX_SPI2_Init();
 8002d2a:	f000 f985 	bl	8003038 <MX_SPI2_Init>
  MX_I2C1_Init();
 8002d2e:	f7ff ff55 	bl	8002bdc <MX_I2C1_Init>
  MX_RTC_Init();
 8002d32:	f000 f8b5 	bl	8002ea0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */


   DEV_Module_Init(); // Initialize SPI, CS, DC, RST
 8002d36:	f7fe fa75 	bl	8001224 <DEV_Module_Init>


   // 2. Initialize E-paper display
   EPD_2in13_V4_Init();
 8002d3a:	f7fe fb84 	bl	8001446 <EPD_2in13_V4_Init>
//   EPD_2in13_V4_Clear();
   // Initalize BME280 in Device.h
   Device_Init(90/* rotation */, WHITE /* background color */);
 8002d3e:	21ff      	movs	r1, #255	@ 0xff
 8002d40:	205a      	movs	r0, #90	@ 0x5a
 8002d42:	f7ff fd73 	bl	800282c <Device_Init>
   Paint_Clear(WHITE);
 8002d46:	20ff      	movs	r0, #255	@ 0xff
 8002d48:	f7fe fe6c 	bl	8001a24 <Paint_Clear>
   EPD_Print(40,40, "L4 Wea",&Font20, FONT_BLACK_ON_WHITE);
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd0 <main+0xb8>)
 8002d52:	4a20      	ldr	r2, [pc, #128]	@ (8002dd4 <main+0xbc>)
 8002d54:	2128      	movs	r1, #40	@ 0x28
 8002d56:	2028      	movs	r0, #40	@ 0x28
 8002d58:	f7ff fdb2 	bl	80028c0 <EPD_Print>
   EPD_Print(30,70, "By Akshit Bhangale",&Font16, FONT_BLACK_ON_WHITE);
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd8 <main+0xc0>)
 8002d62:	4a1e      	ldr	r2, [pc, #120]	@ (8002ddc <main+0xc4>)
 8002d64:	2146      	movs	r1, #70	@ 0x46
 8002d66:	201e      	movs	r0, #30
 8002d68:	f7ff fdaa 	bl	80028c0 <EPD_Print>
   HAL_Delay(500);
 8002d6c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d70:	f000 fbe6 	bl	8003540 <HAL_Delay>
   EPD_2in13_V4_Display_Partial(BlackImage);
 8002d74:	4b1a      	ldr	r3, [pc, #104]	@ (8002de0 <main+0xc8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe fc3a 	bl	80015f2 <EPD_2in13_V4_Display_Partial>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Clear last frame */
	  	         Paint_Clear(WHITE);
 8002d7e:	20ff      	movs	r0, #255	@ 0xff
 8002d80:	f7fe fe50 	bl	8001a24 <Paint_Clear>


	  	         /* Draw live sensor values (device.c does the reading) */
	  	         EPD_PrintTemperature(&bme,  4, 10, FONT_BLACK_ON_WHITE);
 8002d84:	2300      	movs	r3, #0
 8002d86:	220a      	movs	r2, #10
 8002d88:	2104      	movs	r1, #4
 8002d8a:	4816      	ldr	r0, [pc, #88]	@ (8002de4 <main+0xcc>)
 8002d8c:	f7ff fdc4 	bl	8002918 <EPD_PrintTemperature>
	  	         EPD_PrintPressure   (&bme,  4, 30, FONT_BLACK_ON_WHITE);
 8002d90:	2300      	movs	r3, #0
 8002d92:	221e      	movs	r2, #30
 8002d94:	2104      	movs	r1, #4
 8002d96:	4813      	ldr	r0, [pc, #76]	@ (8002de4 <main+0xcc>)
 8002d98:	f7ff fde6 	bl	8002968 <EPD_PrintPressure>
	  	         EPD_PrintHumidity   (&bme,  4, 50, FONT_BLACK_ON_WHITE);
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2232      	movs	r2, #50	@ 0x32
 8002da0:	2104      	movs	r1, #4
 8002da2:	4810      	ldr	r0, [pc, #64]	@ (8002de4 <main+0xcc>)
 8002da4:	f7ff fe08 	bl	80029b8 <EPD_PrintHumidity>
	  	         EPD_PrintAltitude   (&bme, 1013.25f, 4, 70, FONT_BLACK_ON_WHITE);
 8002da8:	2300      	movs	r3, #0
 8002daa:	2246      	movs	r2, #70	@ 0x46
 8002dac:	2104      	movs	r1, #4
 8002dae:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8002de8 <main+0xd0>
 8002db2:	480c      	ldr	r0, [pc, #48]	@ (8002de4 <main+0xcc>)
 8002db4:	f7ff fe28 	bl	8002a08 <EPD_PrintAltitude>

	  	         /* Push the buffer to the panel (fast refresh) */
	  	         EPD_2in13_V4_Display_Partial(BlackImage); // Disp_partial Is important for seamless digit changes
 8002db8:	4b09      	ldr	r3, [pc, #36]	@ (8002de0 <main+0xc8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe fc18 	bl	80015f2 <EPD_2in13_V4_Display_Partial>

	  	         HAL_Delay(10000);   /* 1-Minute update rate */
 8002dc2:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002dc6:	f000 fbbb 	bl	8003540 <HAL_Delay>
	  	         Paint_Clear(WHITE);
 8002dca:	bf00      	nop
 8002dcc:	e7d7      	b.n	8002d7e <main+0x66>
 8002dce:	bf00      	nop
 8002dd0:	20000008 	.word	0x20000008
 8002dd4:	0800aee4 	.word	0x0800aee4
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	0800aeec 	.word	0x0800aeec
 8002de0:	20000218 	.word	0x20000218
 8002de4:	2000021c 	.word	0x2000021c
 8002de8:	447d5000 	.word	0x447d5000

08002dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b096      	sub	sp, #88	@ 0x58
 8002df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002df2:	f107 0314 	add.w	r3, r7, #20
 8002df6:	2244      	movs	r2, #68	@ 0x44
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f004 ffa2 	bl	8007d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e00:	463b      	mov	r3, r7
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	60da      	str	r2, [r3, #12]
 8002e0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002e0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002e12:	f001 fcbb 	bl	800478c <HAL_PWREx_ControlVoltageScaling>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002e1c:	f000 f83a 	bl	8002e94 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002e20:	f001 fc96 	bl	8004750 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002e24:	4b1a      	ldr	r3, [pc, #104]	@ (8002e90 <SystemClock_Config+0xa4>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2a:	4a19      	ldr	r2, [pc, #100]	@ (8002e90 <SystemClock_Config+0xa4>)
 8002e2c:	f023 0318 	bic.w	r3, r3, #24
 8002e30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002e34:	2306      	movs	r3, #6
 8002e36:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e42:	2310      	movs	r3, #16
 8002e44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e4a:	f107 0314 	add.w	r3, r7, #20
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f001 fcf2 	bl	8004838 <HAL_RCC_OscConfig>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002e5a:	f000 f81b 	bl	8002e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e5e:	230f      	movs	r3, #15
 8002e60:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002e62:	2301      	movs	r3, #1
 8002e64:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e72:	463b      	mov	r3, r7
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f002 f8ba 	bl	8004ff0 <HAL_RCC_ClockConfig>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002e82:	f000 f807 	bl	8002e94 <Error_Handler>
  }
}
 8002e86:	bf00      	nop
 8002e88:	3758      	adds	r7, #88	@ 0x58
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000

08002e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e98:	b672      	cpsid	i
}
 8002e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e9c:	bf00      	nop
 8002e9e:	e7fd      	b.n	8002e9c <Error_Handler+0x8>

08002ea0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b092      	sub	sp, #72	@ 0x48
 8002ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002ea6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	60da      	str	r2, [r3, #12]
 8002eb4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	222c      	movs	r2, #44	@ 0x2c
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f004 ff3f 	bl	8007d44 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ec6:	4b41      	ldr	r3, [pc, #260]	@ (8002fcc <MX_RTC_Init+0x12c>)
 8002ec8:	4a41      	ldr	r2, [pc, #260]	@ (8002fd0 <MX_RTC_Init+0x130>)
 8002eca:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8002fcc <MX_RTC_Init+0x12c>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8002fcc <MX_RTC_Init+0x12c>)
 8002ed4:	227f      	movs	r2, #127	@ 0x7f
 8002ed6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8002fcc <MX_RTC_Init+0x12c>)
 8002eda:	22ff      	movs	r2, #255	@ 0xff
 8002edc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ede:	4b3b      	ldr	r3, [pc, #236]	@ (8002fcc <MX_RTC_Init+0x12c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002ee4:	4b39      	ldr	r3, [pc, #228]	@ (8002fcc <MX_RTC_Init+0x12c>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002eea:	4b38      	ldr	r3, [pc, #224]	@ (8002fcc <MX_RTC_Init+0x12c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ef0:	4b36      	ldr	r3, [pc, #216]	@ (8002fcc <MX_RTC_Init+0x12c>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ef6:	4835      	ldr	r0, [pc, #212]	@ (8002fcc <MX_RTC_Init+0x12c>)
 8002ef8:	f002 ff22 	bl	8005d40 <HAL_RTC_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002f02:	f7ff ffc7 	bl	8002e94 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0x0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0x0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002f20:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f24:	2201      	movs	r2, #1
 8002f26:	4619      	mov	r1, r3
 8002f28:	4828      	ldr	r0, [pc, #160]	@ (8002fcc <MX_RTC_Init+0x12c>)
 8002f2a:	f002 ff91 	bl	8005e50 <HAL_RTC_SetTime>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8002f34:	f7ff ffae 	bl	8002e94 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 0x1;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0x0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002f50:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f54:	2201      	movs	r2, #1
 8002f56:	4619      	mov	r1, r3
 8002f58:	481c      	ldr	r0, [pc, #112]	@ (8002fcc <MX_RTC_Init+0x12c>)
 8002f5a:	f003 f816 	bl	8005f8a <HAL_RTC_SetDate>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8002f64:	f7ff ff96 	bl	8002e94 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8002f92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002f98:	1d3b      	adds	r3, r7, #4
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	480b      	ldr	r0, [pc, #44]	@ (8002fcc <MX_RTC_Init+0x12c>)
 8002fa0:	f003 f87a 	bl	8006098 <HAL_RTC_SetAlarm>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8002faa:	f7ff ff73 	bl	8002e94 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4806      	ldr	r0, [pc, #24]	@ (8002fcc <MX_RTC_Init+0x12c>)
 8002fb4:	f003 fa54 	bl	8006460 <HAL_RTCEx_SetWakeUpTimer>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_RTC_Init+0x122>
  {
    Error_Handler();
 8002fbe:	f7ff ff69 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002fc2:	bf00      	nop
 8002fc4:	3748      	adds	r7, #72	@ 0x48
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	200002a0 	.word	0x200002a0
 8002fd0:	40002800 	.word	0x40002800

08002fd4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b0a4      	sub	sp, #144	@ 0x90
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fdc:	f107 0308 	add.w	r3, r7, #8
 8002fe0:	2288      	movs	r2, #136	@ 0x88
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f004 fead 	bl	8007d44 <memset>
  if(rtcHandle->Instance==RTC)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a10      	ldr	r2, [pc, #64]	@ (8003030 <HAL_RTC_MspInit+0x5c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d118      	bne.n	8003026 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ff4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ff8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002ffa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ffe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003002:	f107 0308 	add.w	r3, r7, #8
 8003006:	4618      	mov	r0, r3
 8003008:	f002 f9de 	bl	80053c8 <HAL_RCCEx_PeriphCLKConfig>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003012:	f7ff ff3f 	bl	8002e94 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003016:	4b07      	ldr	r3, [pc, #28]	@ (8003034 <HAL_RTC_MspInit+0x60>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301c:	4a05      	ldr	r2, [pc, #20]	@ (8003034 <HAL_RTC_MspInit+0x60>)
 800301e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003022:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003026:	bf00      	nop
 8003028:	3790      	adds	r7, #144	@ 0x90
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40002800 	.word	0x40002800
 8003034:	40021000 	.word	0x40021000

08003038 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800303c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ac <MX_SPI2_Init+0x74>)
 800303e:	4a1c      	ldr	r2, [pc, #112]	@ (80030b0 <MX_SPI2_Init+0x78>)
 8003040:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003042:	4b1a      	ldr	r3, [pc, #104]	@ (80030ac <MX_SPI2_Init+0x74>)
 8003044:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003048:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800304a:	4b18      	ldr	r3, [pc, #96]	@ (80030ac <MX_SPI2_Init+0x74>)
 800304c:	2200      	movs	r2, #0
 800304e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003050:	4b16      	ldr	r3, [pc, #88]	@ (80030ac <MX_SPI2_Init+0x74>)
 8003052:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003056:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003058:	4b14      	ldr	r3, [pc, #80]	@ (80030ac <MX_SPI2_Init+0x74>)
 800305a:	2200      	movs	r2, #0
 800305c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800305e:	4b13      	ldr	r3, [pc, #76]	@ (80030ac <MX_SPI2_Init+0x74>)
 8003060:	2200      	movs	r2, #0
 8003062:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003064:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <MX_SPI2_Init+0x74>)
 8003066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800306a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800306c:	4b0f      	ldr	r3, [pc, #60]	@ (80030ac <MX_SPI2_Init+0x74>)
 800306e:	2200      	movs	r2, #0
 8003070:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003072:	4b0e      	ldr	r3, [pc, #56]	@ (80030ac <MX_SPI2_Init+0x74>)
 8003074:	2200      	movs	r2, #0
 8003076:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003078:	4b0c      	ldr	r3, [pc, #48]	@ (80030ac <MX_SPI2_Init+0x74>)
 800307a:	2200      	movs	r2, #0
 800307c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800307e:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <MX_SPI2_Init+0x74>)
 8003080:	2200      	movs	r2, #0
 8003082:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003084:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <MX_SPI2_Init+0x74>)
 8003086:	2207      	movs	r2, #7
 8003088:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800308a:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <MX_SPI2_Init+0x74>)
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003090:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <MX_SPI2_Init+0x74>)
 8003092:	2208      	movs	r2, #8
 8003094:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003096:	4805      	ldr	r0, [pc, #20]	@ (80030ac <MX_SPI2_Init+0x74>)
 8003098:	f003 fa56 	bl	8006548 <HAL_SPI_Init>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80030a2:	f7ff fef7 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	200002c4 	.word	0x200002c4
 80030b0:	40003800 	.word	0x40003800

080030b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	@ 0x28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a25      	ldr	r2, [pc, #148]	@ (8003168 <HAL_SPI_MspInit+0xb4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d144      	bne.n	8003160 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030d6:	4b25      	ldr	r3, [pc, #148]	@ (800316c <HAL_SPI_MspInit+0xb8>)
 80030d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030da:	4a24      	ldr	r2, [pc, #144]	@ (800316c <HAL_SPI_MspInit+0xb8>)
 80030dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80030e2:	4b22      	ldr	r3, [pc, #136]	@ (800316c <HAL_SPI_MspInit+0xb8>)
 80030e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ee:	4b1f      	ldr	r3, [pc, #124]	@ (800316c <HAL_SPI_MspInit+0xb8>)
 80030f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f2:	4a1e      	ldr	r2, [pc, #120]	@ (800316c <HAL_SPI_MspInit+0xb8>)
 80030f4:	f043 0304 	orr.w	r3, r3, #4
 80030f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030fa:	4b1c      	ldr	r3, [pc, #112]	@ (800316c <HAL_SPI_MspInit+0xb8>)
 80030fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003106:	4b19      	ldr	r3, [pc, #100]	@ (800316c <HAL_SPI_MspInit+0xb8>)
 8003108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310a:	4a18      	ldr	r2, [pc, #96]	@ (800316c <HAL_SPI_MspInit+0xb8>)
 800310c:	f043 0302 	orr.w	r3, r3, #2
 8003110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003112:	4b16      	ldr	r3, [pc, #88]	@ (800316c <HAL_SPI_MspInit+0xb8>)
 8003114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|DIN_Pin;
 800311e:	230c      	movs	r3, #12
 8003120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003122:	2302      	movs	r3, #2
 8003124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312a:	2303      	movs	r3, #3
 800312c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800312e:	2305      	movs	r3, #5
 8003130:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003132:	f107 0314 	add.w	r3, r7, #20
 8003136:	4619      	mov	r1, r3
 8003138:	480d      	ldr	r0, [pc, #52]	@ (8003170 <HAL_SPI_MspInit+0xbc>)
 800313a:	f000 fb0b 	bl	8003754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_Pin;
 800313e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003144:	2302      	movs	r3, #2
 8003146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314c:	2303      	movs	r3, #3
 800314e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003150:	2305      	movs	r3, #5
 8003152:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4619      	mov	r1, r3
 800315a:	4806      	ldr	r0, [pc, #24]	@ (8003174 <HAL_SPI_MspInit+0xc0>)
 800315c:	f000 fafa 	bl	8003754 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003160:	bf00      	nop
 8003162:	3728      	adds	r7, #40	@ 0x28
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40003800 	.word	0x40003800
 800316c:	40021000 	.word	0x40021000
 8003170:	48000800 	.word	0x48000800
 8003174:	48000400 	.word	0x48000400

08003178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317e:	4b0f      	ldr	r3, [pc, #60]	@ (80031bc <HAL_MspInit+0x44>)
 8003180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003182:	4a0e      	ldr	r2, [pc, #56]	@ (80031bc <HAL_MspInit+0x44>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6613      	str	r3, [r2, #96]	@ 0x60
 800318a:	4b0c      	ldr	r3, [pc, #48]	@ (80031bc <HAL_MspInit+0x44>)
 800318c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	607b      	str	r3, [r7, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003196:	4b09      	ldr	r3, [pc, #36]	@ (80031bc <HAL_MspInit+0x44>)
 8003198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319a:	4a08      	ldr	r2, [pc, #32]	@ (80031bc <HAL_MspInit+0x44>)
 800319c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80031a2:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <HAL_MspInit+0x44>)
 80031a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000

080031c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031c4:	bf00      	nop
 80031c6:	e7fd      	b.n	80031c4 <NMI_Handler+0x4>

080031c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <HardFault_Handler+0x4>

080031d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <MemManage_Handler+0x4>

080031d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <BusFault_Handler+0x4>

080031e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031e4:	bf00      	nop
 80031e6:	e7fd      	b.n	80031e4 <UsageFault_Handler+0x4>

080031e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003208:	bf00      	nop
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003216:	f000 f973 	bl	8003500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}

0800321e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0
  return 1;
 8003222:	2301      	movs	r3, #1
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <_kill>:

int _kill(int pid, int sig)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003238:	f004 fde6 	bl	8007e08 <__errno>
 800323c:	4603      	mov	r3, r0
 800323e:	2216      	movs	r2, #22
 8003240:	601a      	str	r2, [r3, #0]
  return -1;
 8003242:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <_exit>:

void _exit (int status)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003256:	f04f 31ff 	mov.w	r1, #4294967295
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff ffe7 	bl	800322e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003260:	bf00      	nop
 8003262:	e7fd      	b.n	8003260 <_exit+0x12>

08003264 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	e00a      	b.n	800328c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003276:	f3af 8000 	nop.w
 800327a:	4601      	mov	r1, r0
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	60ba      	str	r2, [r7, #8]
 8003282:	b2ca      	uxtb	r2, r1
 8003284:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	3301      	adds	r3, #1
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	dbf0      	blt.n	8003276 <_read+0x12>
  }

  return len;
 8003294:	687b      	ldr	r3, [r7, #4]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b086      	sub	sp, #24
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	e009      	b.n	80032c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	60ba      	str	r2, [r7, #8]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 f889 	bl	80033d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	3301      	adds	r3, #1
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	dbf1      	blt.n	80032b0 <_write+0x12>
  }
  return len;
 80032cc:	687b      	ldr	r3, [r7, #4]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <_close>:

int _close(int file)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032fe:	605a      	str	r2, [r3, #4]
  return 0;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <_isatty>:

int _isatty(int file)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003316:	2301      	movs	r3, #1
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003348:	4a14      	ldr	r2, [pc, #80]	@ (800339c <_sbrk+0x5c>)
 800334a:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <_sbrk+0x60>)
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003354:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <_sbrk+0x64>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800335c:	4b11      	ldr	r3, [pc, #68]	@ (80033a4 <_sbrk+0x64>)
 800335e:	4a12      	ldr	r2, [pc, #72]	@ (80033a8 <_sbrk+0x68>)
 8003360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003362:	4b10      	ldr	r3, [pc, #64]	@ (80033a4 <_sbrk+0x64>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4413      	add	r3, r2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	429a      	cmp	r2, r3
 800336e:	d207      	bcs.n	8003380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003370:	f004 fd4a 	bl	8007e08 <__errno>
 8003374:	4603      	mov	r3, r0
 8003376:	220c      	movs	r2, #12
 8003378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800337a:	f04f 33ff 	mov.w	r3, #4294967295
 800337e:	e009      	b.n	8003394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003380:	4b08      	ldr	r3, [pc, #32]	@ (80033a4 <_sbrk+0x64>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003386:	4b07      	ldr	r3, [pc, #28]	@ (80033a4 <_sbrk+0x64>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4413      	add	r3, r2
 800338e:	4a05      	ldr	r2, [pc, #20]	@ (80033a4 <_sbrk+0x64>)
 8003390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20018000 	.word	0x20018000
 80033a0:	00000400 	.word	0x00000400
 80033a4:	20000328 	.word	0x20000328
 80033a8:	20000508 	.word	0x20000508

080033ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80033b0:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <SystemInit+0x20>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b6:	4a05      	ldr	r2, [pc, #20]	@ (80033cc <SystemInit+0x20>)
 80033b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80033d8:	1d39      	adds	r1, r7, #4
 80033da:	f04f 33ff 	mov.w	r3, #4294967295
 80033de:	2201      	movs	r2, #1
 80033e0:	4803      	ldr	r0, [pc, #12]	@ (80033f0 <__io_putchar+0x20>)
 80033e2:	f003 fc2f 	bl	8006c44 <HAL_UART_Transmit>
    return ch;
 80033e6:	687b      	ldr	r3, [r7, #4]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	2000032c 	.word	0x2000032c

080033f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80033f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800342c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033f8:	f7ff ffd8 	bl	80033ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033fc:	480c      	ldr	r0, [pc, #48]	@ (8003430 <LoopForever+0x6>)
  ldr r1, =_edata
 80033fe:	490d      	ldr	r1, [pc, #52]	@ (8003434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003400:	4a0d      	ldr	r2, [pc, #52]	@ (8003438 <LoopForever+0xe>)
  movs r3, #0
 8003402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003404:	e002      	b.n	800340c <LoopCopyDataInit>

08003406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800340a:	3304      	adds	r3, #4

0800340c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800340c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800340e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003410:	d3f9      	bcc.n	8003406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003412:	4a0a      	ldr	r2, [pc, #40]	@ (800343c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003414:	4c0a      	ldr	r4, [pc, #40]	@ (8003440 <LoopForever+0x16>)
  movs r3, #0
 8003416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003418:	e001      	b.n	800341e <LoopFillZerobss>

0800341a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800341a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800341c:	3204      	adds	r2, #4

0800341e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800341e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003420:	d3fb      	bcc.n	800341a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003422:	f004 fcf7 	bl	8007e14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003426:	f7ff fc77 	bl	8002d18 <main>

0800342a <LoopForever>:

LoopForever:
    b LoopForever
 800342a:	e7fe      	b.n	800342a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800342c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003434:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003438:	0800cdc0 	.word	0x0800cdc0
  ldr r2, =_sbss
 800343c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003440:	20000504 	.word	0x20000504

08003444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003444:	e7fe      	b.n	8003444 <ADC1_2_IRQHandler>
	...

08003448 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003452:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <HAL_Init+0x3c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a0b      	ldr	r2, [pc, #44]	@ (8003484 <HAL_Init+0x3c>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800345c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800345e:	2003      	movs	r0, #3
 8003460:	f000 f944 	bl	80036ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003464:	2000      	movs	r0, #0
 8003466:	f000 f80f 	bl	8003488 <HAL_InitTick>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	71fb      	strb	r3, [r7, #7]
 8003474:	e001      	b.n	800347a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003476:	f7ff fe7f 	bl	8003178 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800347a:	79fb      	ldrb	r3, [r7, #7]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40022000 	.word	0x40022000

08003488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003494:	4b17      	ldr	r3, [pc, #92]	@ (80034f4 <HAL_InitTick+0x6c>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d023      	beq.n	80034e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800349c:	4b16      	ldr	r3, [pc, #88]	@ (80034f8 <HAL_InitTick+0x70>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4b14      	ldr	r3, [pc, #80]	@ (80034f4 <HAL_InitTick+0x6c>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	4619      	mov	r1, r3
 80034a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f941 	bl	800373a <HAL_SYSTICK_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10f      	bne.n	80034de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b0f      	cmp	r3, #15
 80034c2:	d809      	bhi.n	80034d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034c4:	2200      	movs	r2, #0
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295
 80034cc:	f000 f919 	bl	8003702 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034d0:	4a0a      	ldr	r2, [pc, #40]	@ (80034fc <HAL_InitTick+0x74>)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	e007      	b.n	80034e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
 80034dc:	e004      	b.n	80034e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	e001      	b.n	80034e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000018 	.word	0x20000018
 80034f8:	20000010 	.word	0x20000010
 80034fc:	20000014 	.word	0x20000014

08003500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003504:	4b06      	ldr	r3, [pc, #24]	@ (8003520 <HAL_IncTick+0x20>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <HAL_IncTick+0x24>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4413      	add	r3, r2
 8003510:	4a04      	ldr	r2, [pc, #16]	@ (8003524 <HAL_IncTick+0x24>)
 8003512:	6013      	str	r3, [r2, #0]
}
 8003514:	bf00      	nop
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	20000018 	.word	0x20000018
 8003524:	200003b4 	.word	0x200003b4

08003528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return uwTick;
 800352c:	4b03      	ldr	r3, [pc, #12]	@ (800353c <HAL_GetTick+0x14>)
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	200003b4 	.word	0x200003b4

08003540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003548:	f7ff ffee 	bl	8003528 <HAL_GetTick>
 800354c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d005      	beq.n	8003566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800355a:	4b0a      	ldr	r3, [pc, #40]	@ (8003584 <HAL_Delay+0x44>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4413      	add	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003566:	bf00      	nop
 8003568:	f7ff ffde 	bl	8003528 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	429a      	cmp	r2, r3
 8003576:	d8f7      	bhi.n	8003568 <HAL_Delay+0x28>
  {
  }
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000018 	.word	0x20000018

08003588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003598:	4b0c      	ldr	r3, [pc, #48]	@ (80035cc <__NVIC_SetPriorityGrouping+0x44>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035a4:	4013      	ands	r3, r2
 80035a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ba:	4a04      	ldr	r2, [pc, #16]	@ (80035cc <__NVIC_SetPriorityGrouping+0x44>)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	60d3      	str	r3, [r2, #12]
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035d4:	4b04      	ldr	r3, [pc, #16]	@ (80035e8 <__NVIC_GetPriorityGrouping+0x18>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	0a1b      	lsrs	r3, r3, #8
 80035da:	f003 0307 	and.w	r3, r3, #7
}
 80035de:	4618      	mov	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	e000ed00 	.word	0xe000ed00

080035ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	6039      	str	r1, [r7, #0]
 80035f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	db0a      	blt.n	8003616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	b2da      	uxtb	r2, r3
 8003604:	490c      	ldr	r1, [pc, #48]	@ (8003638 <__NVIC_SetPriority+0x4c>)
 8003606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360a:	0112      	lsls	r2, r2, #4
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	440b      	add	r3, r1
 8003610:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003614:	e00a      	b.n	800362c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	b2da      	uxtb	r2, r3
 800361a:	4908      	ldr	r1, [pc, #32]	@ (800363c <__NVIC_SetPriority+0x50>)
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	3b04      	subs	r3, #4
 8003624:	0112      	lsls	r2, r2, #4
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	440b      	add	r3, r1
 800362a:	761a      	strb	r2, [r3, #24]
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000e100 	.word	0xe000e100
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003640:	b480      	push	{r7}
 8003642:	b089      	sub	sp, #36	@ 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f1c3 0307 	rsb	r3, r3, #7
 800365a:	2b04      	cmp	r3, #4
 800365c:	bf28      	it	cs
 800365e:	2304      	movcs	r3, #4
 8003660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	3304      	adds	r3, #4
 8003666:	2b06      	cmp	r3, #6
 8003668:	d902      	bls.n	8003670 <NVIC_EncodePriority+0x30>
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3b03      	subs	r3, #3
 800366e:	e000      	b.n	8003672 <NVIC_EncodePriority+0x32>
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	f04f 32ff 	mov.w	r2, #4294967295
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43da      	mvns	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	401a      	ands	r2, r3
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003688:	f04f 31ff 	mov.w	r1, #4294967295
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	fa01 f303 	lsl.w	r3, r1, r3
 8003692:	43d9      	mvns	r1, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003698:	4313      	orrs	r3, r2
         );
}
 800369a:	4618      	mov	r0, r3
 800369c:	3724      	adds	r7, #36	@ 0x24
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
	...

080036a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036b8:	d301      	bcc.n	80036be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ba:	2301      	movs	r3, #1
 80036bc:	e00f      	b.n	80036de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036be:	4a0a      	ldr	r2, [pc, #40]	@ (80036e8 <SysTick_Config+0x40>)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036c6:	210f      	movs	r1, #15
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	f7ff ff8e 	bl	80035ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d0:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <SysTick_Config+0x40>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036d6:	4b04      	ldr	r3, [pc, #16]	@ (80036e8 <SysTick_Config+0x40>)
 80036d8:	2207      	movs	r2, #7
 80036da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	e000e010 	.word	0xe000e010

080036ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff ff47 	bl	8003588 <__NVIC_SetPriorityGrouping>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b086      	sub	sp, #24
 8003706:	af00      	add	r7, sp, #0
 8003708:	4603      	mov	r3, r0
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003714:	f7ff ff5c 	bl	80035d0 <__NVIC_GetPriorityGrouping>
 8003718:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	6978      	ldr	r0, [r7, #20]
 8003720:	f7ff ff8e 	bl	8003640 <NVIC_EncodePriority>
 8003724:	4602      	mov	r2, r0
 8003726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff ff5d 	bl	80035ec <__NVIC_SetPriority>
}
 8003732:	bf00      	nop
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff ffb0 	bl	80036a8 <SysTick_Config>
 8003748:	4603      	mov	r3, r0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003762:	e17f      	b.n	8003a64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	2101      	movs	r1, #1
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	fa01 f303 	lsl.w	r3, r1, r3
 8003770:	4013      	ands	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 8171 	beq.w	8003a5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d005      	beq.n	8003794 <HAL_GPIO_Init+0x40>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d130      	bne.n	80037f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	2203      	movs	r2, #3
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4013      	ands	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037ca:	2201      	movs	r2, #1
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4013      	ands	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	091b      	lsrs	r3, r3, #4
 80037e0:	f003 0201 	and.w	r2, r3, #1
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d118      	bne.n	8003834 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003806:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003808:	2201      	movs	r2, #1
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	08db      	lsrs	r3, r3, #3
 800381e:	f003 0201 	and.w	r2, r3, #1
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	2b03      	cmp	r3, #3
 800383e:	d017      	beq.n	8003870 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	2203      	movs	r2, #3
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4013      	ands	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d123      	bne.n	80038c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	08da      	lsrs	r2, r3, #3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3208      	adds	r2, #8
 8003884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003888:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	220f      	movs	r2, #15
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4013      	ands	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	08da      	lsrs	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3208      	adds	r2, #8
 80038be:	6939      	ldr	r1, [r7, #16]
 80038c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	2203      	movs	r2, #3
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 0203 	and.w	r2, r3, #3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80ac 	beq.w	8003a5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003906:	4b5f      	ldr	r3, [pc, #380]	@ (8003a84 <HAL_GPIO_Init+0x330>)
 8003908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800390a:	4a5e      	ldr	r2, [pc, #376]	@ (8003a84 <HAL_GPIO_Init+0x330>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	6613      	str	r3, [r2, #96]	@ 0x60
 8003912:	4b5c      	ldr	r3, [pc, #368]	@ (8003a84 <HAL_GPIO_Init+0x330>)
 8003914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800391e:	4a5a      	ldr	r2, [pc, #360]	@ (8003a88 <HAL_GPIO_Init+0x334>)
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	089b      	lsrs	r3, r3, #2
 8003924:	3302      	adds	r3, #2
 8003926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	220f      	movs	r2, #15
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003948:	d025      	beq.n	8003996 <HAL_GPIO_Init+0x242>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a4f      	ldr	r2, [pc, #316]	@ (8003a8c <HAL_GPIO_Init+0x338>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d01f      	beq.n	8003992 <HAL_GPIO_Init+0x23e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a4e      	ldr	r2, [pc, #312]	@ (8003a90 <HAL_GPIO_Init+0x33c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d019      	beq.n	800398e <HAL_GPIO_Init+0x23a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a4d      	ldr	r2, [pc, #308]	@ (8003a94 <HAL_GPIO_Init+0x340>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d013      	beq.n	800398a <HAL_GPIO_Init+0x236>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a4c      	ldr	r2, [pc, #304]	@ (8003a98 <HAL_GPIO_Init+0x344>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00d      	beq.n	8003986 <HAL_GPIO_Init+0x232>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a4b      	ldr	r2, [pc, #300]	@ (8003a9c <HAL_GPIO_Init+0x348>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d007      	beq.n	8003982 <HAL_GPIO_Init+0x22e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a4a      	ldr	r2, [pc, #296]	@ (8003aa0 <HAL_GPIO_Init+0x34c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d101      	bne.n	800397e <HAL_GPIO_Init+0x22a>
 800397a:	2306      	movs	r3, #6
 800397c:	e00c      	b.n	8003998 <HAL_GPIO_Init+0x244>
 800397e:	2307      	movs	r3, #7
 8003980:	e00a      	b.n	8003998 <HAL_GPIO_Init+0x244>
 8003982:	2305      	movs	r3, #5
 8003984:	e008      	b.n	8003998 <HAL_GPIO_Init+0x244>
 8003986:	2304      	movs	r3, #4
 8003988:	e006      	b.n	8003998 <HAL_GPIO_Init+0x244>
 800398a:	2303      	movs	r3, #3
 800398c:	e004      	b.n	8003998 <HAL_GPIO_Init+0x244>
 800398e:	2302      	movs	r3, #2
 8003990:	e002      	b.n	8003998 <HAL_GPIO_Init+0x244>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <HAL_GPIO_Init+0x244>
 8003996:	2300      	movs	r3, #0
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	f002 0203 	and.w	r2, r2, #3
 800399e:	0092      	lsls	r2, r2, #2
 80039a0:	4093      	lsls	r3, r2
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039a8:	4937      	ldr	r1, [pc, #220]	@ (8003a88 <HAL_GPIO_Init+0x334>)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	089b      	lsrs	r3, r3, #2
 80039ae:	3302      	adds	r3, #2
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039b6:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa4 <HAL_GPIO_Init+0x350>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039da:	4a32      	ldr	r2, [pc, #200]	@ (8003aa4 <HAL_GPIO_Init+0x350>)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039e0:	4b30      	ldr	r3, [pc, #192]	@ (8003aa4 <HAL_GPIO_Init+0x350>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4013      	ands	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a04:	4a27      	ldr	r2, [pc, #156]	@ (8003aa4 <HAL_GPIO_Init+0x350>)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a0a:	4b26      	ldr	r3, [pc, #152]	@ (8003aa4 <HAL_GPIO_Init+0x350>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4013      	ands	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa4 <HAL_GPIO_Init+0x350>)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a34:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa4 <HAL_GPIO_Init+0x350>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a58:	4a12      	ldr	r2, [pc, #72]	@ (8003aa4 <HAL_GPIO_Init+0x350>)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	3301      	adds	r3, #1
 8003a62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f47f ae78 	bne.w	8003764 <HAL_GPIO_Init+0x10>
  }
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	48000400 	.word	0x48000400
 8003a90:	48000800 	.word	0x48000800
 8003a94:	48000c00 	.word	0x48000c00
 8003a98:	48001000 	.word	0x48001000
 8003a9c:	48001400 	.word	0x48001400
 8003aa0:	48001800 	.word	0x48001800
 8003aa4:	40010400 	.word	0x40010400

08003aa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	887b      	ldrh	r3, [r7, #2]
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
 8003ac4:	e001      	b.n	8003aca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	807b      	strh	r3, [r7, #2]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ae8:	787b      	ldrb	r3, [r7, #1]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aee:	887a      	ldrh	r2, [r7, #2]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003af4:	e002      	b.n	8003afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003af6:	887a      	ldrh	r2, [r7, #2]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e08d      	b.n	8003c36 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff f894 	bl	8002c5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2224      	movs	r2, #36	@ 0x24
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d107      	bne.n	8003b82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	e006      	b.n	8003b90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d108      	bne.n	8003baa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ba6:	605a      	str	r2, [r3, #4]
 8003ba8:	e007      	b.n	8003bba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69d9      	ldr	r1, [r3, #28]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1a      	ldr	r2, [r3, #32]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	4608      	mov	r0, r1
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4603      	mov	r3, r0
 8003c50:	817b      	strh	r3, [r7, #10]
 8003c52:	460b      	mov	r3, r1
 8003c54:	813b      	strh	r3, [r7, #8]
 8003c56:	4613      	mov	r3, r2
 8003c58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	f040 80f9 	bne.w	8003e5a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_I2C_Mem_Write+0x34>
 8003c6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d105      	bne.n	8003c80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c7a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0ed      	b.n	8003e5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_I2C_Mem_Write+0x4e>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e0e6      	b.n	8003e5c <HAL_I2C_Mem_Write+0x21c>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c96:	f7ff fc47 	bl	8003528 <HAL_GetTick>
 8003c9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	2319      	movs	r3, #25
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 fac3 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0d1      	b.n	8003e5c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2221      	movs	r2, #33	@ 0x21
 8003cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2240      	movs	r2, #64	@ 0x40
 8003cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a3a      	ldr	r2, [r7, #32]
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ce0:	88f8      	ldrh	r0, [r7, #6]
 8003ce2:	893a      	ldrh	r2, [r7, #8]
 8003ce4:	8979      	ldrh	r1, [r7, #10]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	9301      	str	r3, [sp, #4]
 8003cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	4603      	mov	r3, r0
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f9d3 	bl	800409c <I2C_RequestMemoryWrite>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e0a9      	b.n	8003e5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2bff      	cmp	r3, #255	@ 0xff
 8003d10:	d90e      	bls.n	8003d30 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	22ff      	movs	r2, #255	@ 0xff
 8003d16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	8979      	ldrh	r1, [r7, #10]
 8003d20:	2300      	movs	r3, #0
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fc47 	bl	80045bc <I2C_TransferConfig>
 8003d2e:	e00f      	b.n	8003d50 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	8979      	ldrh	r1, [r7, #10]
 8003d42:	2300      	movs	r3, #0
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 fc36 	bl	80045bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 fac6 	bl	80042e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e07b      	b.n	8003e5c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d034      	beq.n	8003e08 <HAL_I2C_Mem_Write+0x1c8>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d130      	bne.n	8003e08 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dac:	2200      	movs	r2, #0
 8003dae:	2180      	movs	r1, #128	@ 0x80
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 fa3f 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e04d      	b.n	8003e5c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2bff      	cmp	r3, #255	@ 0xff
 8003dc8:	d90e      	bls.n	8003de8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	22ff      	movs	r2, #255	@ 0xff
 8003dce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	8979      	ldrh	r1, [r7, #10]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fbeb 	bl	80045bc <I2C_TransferConfig>
 8003de6:	e00f      	b.n	8003e08 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	8979      	ldrh	r1, [r7, #10]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 fbda 	bl	80045bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d19e      	bne.n	8003d50 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 faac 	bl	8004374 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e01a      	b.n	8003e5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b0a      	ldr	r3, [pc, #40]	@ (8003e64 <HAL_I2C_Mem_Write+0x224>)
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e000      	b.n	8003e5c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
  }
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	fe00e800 	.word	0xfe00e800

08003e68 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	4608      	mov	r0, r1
 8003e72:	4611      	mov	r1, r2
 8003e74:	461a      	mov	r2, r3
 8003e76:	4603      	mov	r3, r0
 8003e78:	817b      	strh	r3, [r7, #10]
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	813b      	strh	r3, [r7, #8]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	f040 80fd 	bne.w	800408a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_I2C_Mem_Read+0x34>
 8003e96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d105      	bne.n	8003ea8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ea2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0f1      	b.n	800408c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_I2C_Mem_Read+0x4e>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e0ea      	b.n	800408c <HAL_I2C_Mem_Read+0x224>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ebe:	f7ff fb33 	bl	8003528 <HAL_GetTick>
 8003ec2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	2319      	movs	r3, #25
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f9af 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0d5      	b.n	800408c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2222      	movs	r2, #34	@ 0x22
 8003ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2240      	movs	r2, #64	@ 0x40
 8003eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a3a      	ldr	r2, [r7, #32]
 8003efa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f08:	88f8      	ldrh	r0, [r7, #6]
 8003f0a:	893a      	ldrh	r2, [r7, #8]
 8003f0c:	8979      	ldrh	r1, [r7, #10]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	4603      	mov	r3, r0
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f913 	bl	8004144 <I2C_RequestMemoryRead>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0ad      	b.n	800408c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2bff      	cmp	r3, #255	@ 0xff
 8003f38:	d90e      	bls.n	8003f58 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	8979      	ldrh	r1, [r7, #10]
 8003f48:	4b52      	ldr	r3, [pc, #328]	@ (8004094 <HAL_I2C_Mem_Read+0x22c>)
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 fb33 	bl	80045bc <I2C_TransferConfig>
 8003f56:	e00f      	b.n	8003f78 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	8979      	ldrh	r1, [r7, #10]
 8003f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8004094 <HAL_I2C_Mem_Read+0x22c>)
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 fb22 	bl	80045bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2104      	movs	r1, #4
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f956 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e07c      	b.n	800408c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d034      	beq.n	8004038 <HAL_I2C_Mem_Read+0x1d0>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d130      	bne.n	8004038 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2180      	movs	r1, #128	@ 0x80
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f927 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e04d      	b.n	800408c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2bff      	cmp	r3, #255	@ 0xff
 8003ff8:	d90e      	bls.n	8004018 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004004:	b2da      	uxtb	r2, r3
 8004006:	8979      	ldrh	r1, [r7, #10]
 8004008:	2300      	movs	r3, #0
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fad3 	bl	80045bc <I2C_TransferConfig>
 8004016:	e00f      	b.n	8004038 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004026:	b2da      	uxtb	r2, r3
 8004028:	8979      	ldrh	r1, [r7, #10]
 800402a:	2300      	movs	r3, #0
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 fac2 	bl	80045bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d19a      	bne.n	8003f78 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f994 	bl	8004374 <I2C_WaitOnSTOPFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e01a      	b.n	800408c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2220      	movs	r2, #32
 800405c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6859      	ldr	r1, [r3, #4]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	4b0b      	ldr	r3, [pc, #44]	@ (8004098 <HAL_I2C_Mem_Read+0x230>)
 800406a:	400b      	ands	r3, r1
 800406c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	e000      	b.n	800408c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800408a:	2302      	movs	r3, #2
  }
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	80002400 	.word	0x80002400
 8004098:	fe00e800 	.word	0xfe00e800

0800409c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	4608      	mov	r0, r1
 80040a6:	4611      	mov	r1, r2
 80040a8:	461a      	mov	r2, r3
 80040aa:	4603      	mov	r3, r0
 80040ac:	817b      	strh	r3, [r7, #10]
 80040ae:	460b      	mov	r3, r1
 80040b0:	813b      	strh	r3, [r7, #8]
 80040b2:	4613      	mov	r3, r2
 80040b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	8979      	ldrh	r1, [r7, #10]
 80040bc:	4b20      	ldr	r3, [pc, #128]	@ (8004140 <I2C_RequestMemoryWrite+0xa4>)
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 fa79 	bl	80045bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	69b9      	ldr	r1, [r7, #24]
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f909 	bl	80042e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e02c      	b.n	8004138 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d105      	bne.n	80040f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040e4:	893b      	ldrh	r3, [r7, #8]
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80040ee:	e015      	b.n	800411c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040f0:	893b      	ldrh	r3, [r7, #8]
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fe:	69fa      	ldr	r2, [r7, #28]
 8004100:	69b9      	ldr	r1, [r7, #24]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f8ef 	bl	80042e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e012      	b.n	8004138 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004112:	893b      	ldrh	r3, [r7, #8]
 8004114:	b2da      	uxtb	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2200      	movs	r2, #0
 8004124:	2180      	movs	r1, #128	@ 0x80
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f884 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	80002000 	.word	0x80002000

08004144 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	4608      	mov	r0, r1
 800414e:	4611      	mov	r1, r2
 8004150:	461a      	mov	r2, r3
 8004152:	4603      	mov	r3, r0
 8004154:	817b      	strh	r3, [r7, #10]
 8004156:	460b      	mov	r3, r1
 8004158:	813b      	strh	r3, [r7, #8]
 800415a:	4613      	mov	r3, r2
 800415c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	b2da      	uxtb	r2, r3
 8004162:	8979      	ldrh	r1, [r7, #10]
 8004164:	4b20      	ldr	r3, [pc, #128]	@ (80041e8 <I2C_RequestMemoryRead+0xa4>)
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	2300      	movs	r3, #0
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 fa26 	bl	80045bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	69b9      	ldr	r1, [r7, #24]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f8b6 	bl	80042e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e02c      	b.n	80041de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d105      	bne.n	8004196 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800418a:	893b      	ldrh	r3, [r7, #8]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	629a      	str	r2, [r3, #40]	@ 0x28
 8004194:	e015      	b.n	80041c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004196:	893b      	ldrh	r3, [r7, #8]
 8004198:	0a1b      	lsrs	r3, r3, #8
 800419a:	b29b      	uxth	r3, r3
 800419c:	b2da      	uxtb	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	69b9      	ldr	r1, [r7, #24]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f89c 	bl	80042e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e012      	b.n	80041de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041b8:	893b      	ldrh	r3, [r7, #8]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	2200      	movs	r2, #0
 80041ca:	2140      	movs	r1, #64	@ 0x40
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f831 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e000      	b.n	80041de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	80002000 	.word	0x80002000

080041ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d103      	bne.n	800420a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2200      	movs	r2, #0
 8004208:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b01      	cmp	r3, #1
 8004216:	d007      	beq.n	8004228 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	619a      	str	r2, [r3, #24]
  }
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	4613      	mov	r3, r2
 8004242:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004244:	e03b      	b.n	80042be <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	6839      	ldr	r1, [r7, #0]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f8d6 	bl	80043fc <I2C_IsErrorOccurred>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e041      	b.n	80042de <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d02d      	beq.n	80042be <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004262:	f7ff f961 	bl	8003528 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d302      	bcc.n	8004278 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d122      	bne.n	80042be <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	4013      	ands	r3, r2
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	429a      	cmp	r2, r3
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	461a      	mov	r2, r3
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	429a      	cmp	r2, r3
 8004294:	d113      	bne.n	80042be <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429a:	f043 0220 	orr.w	r2, r3, #32
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e00f      	b.n	80042de <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699a      	ldr	r2, [r3, #24]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4013      	ands	r3, r2
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	bf0c      	ite	eq
 80042ce:	2301      	moveq	r3, #1
 80042d0:	2300      	movne	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d0b4      	beq.n	8004246 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042f2:	e033      	b.n	800435c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f87f 	bl	80043fc <I2C_IsErrorOccurred>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e031      	b.n	800436c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430e:	d025      	beq.n	800435c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004310:	f7ff f90a 	bl	8003528 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	429a      	cmp	r2, r3
 800431e:	d302      	bcc.n	8004326 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d11a      	bne.n	800435c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b02      	cmp	r3, #2
 8004332:	d013      	beq.n	800435c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e007      	b.n	800436c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b02      	cmp	r3, #2
 8004368:	d1c4      	bne.n	80042f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004380:	e02f      	b.n	80043e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 f838 	bl	80043fc <I2C_IsErrorOccurred>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e02d      	b.n	80043f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004396:	f7ff f8c7 	bl	8003528 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d302      	bcc.n	80043ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d11a      	bne.n	80043e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d013      	beq.n	80043e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043be:	f043 0220 	orr.w	r2, r3, #32
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e007      	b.n	80043f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d1c8      	bne.n	8004382 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08a      	sub	sp, #40	@ 0x28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004416:	2300      	movs	r3, #0
 8004418:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	d068      	beq.n	80044fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2210      	movs	r2, #16
 800442e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004430:	e049      	b.n	80044c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d045      	beq.n	80044c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800443a:	f7ff f875 	bl	8003528 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	429a      	cmp	r2, r3
 8004448:	d302      	bcc.n	8004450 <I2C_IsErrorOccurred+0x54>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d13a      	bne.n	80044c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800445a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004462:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800446e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004472:	d121      	bne.n	80044b8 <I2C_IsErrorOccurred+0xbc>
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800447a:	d01d      	beq.n	80044b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800447c:	7cfb      	ldrb	r3, [r7, #19]
 800447e:	2b20      	cmp	r3, #32
 8004480:	d01a      	beq.n	80044b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004490:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004492:	f7ff f849 	bl	8003528 <HAL_GetTick>
 8004496:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004498:	e00e      	b.n	80044b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800449a:	f7ff f845 	bl	8003528 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b19      	cmp	r3, #25
 80044a6:	d907      	bls.n	80044b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	f043 0320 	orr.w	r3, r3, #32
 80044ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80044b6:	e006      	b.n	80044c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d1e9      	bne.n	800449a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d003      	beq.n	80044dc <I2C_IsErrorOccurred+0xe0>
 80044d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0aa      	beq.n	8004432 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80044dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d103      	bne.n	80044ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2220      	movs	r2, #32
 80044ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	f043 0304 	orr.w	r3, r3, #4
 80044f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00b      	beq.n	8004524 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800451c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00b      	beq.n	8004546 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	f043 0308 	orr.w	r3, r3, #8
 8004534:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800453e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00b      	beq.n	8004568 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	f043 0302 	orr.w	r3, r3, #2
 8004556:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004560:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01c      	beq.n	80045aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff fe3b 	bl	80041ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6859      	ldr	r1, [r3, #4]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	4b0d      	ldr	r3, [pc, #52]	@ (80045b8 <I2C_IsErrorOccurred+0x1bc>)
 8004582:	400b      	ands	r3, r1
 8004584:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	431a      	orrs	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2220      	movs	r2, #32
 8004596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80045aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3728      	adds	r7, #40	@ 0x28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	fe00e800 	.word	0xfe00e800

080045bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	460b      	mov	r3, r1
 80045c8:	817b      	strh	r3, [r7, #10]
 80045ca:	4613      	mov	r3, r2
 80045cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045ce:	897b      	ldrh	r3, [r7, #10]
 80045d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045d4:	7a7b      	ldrb	r3, [r7, #9]
 80045d6:	041b      	lsls	r3, r3, #16
 80045d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	0d5b      	lsrs	r3, r3, #21
 80045f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80045fa:	4b08      	ldr	r3, [pc, #32]	@ (800461c <I2C_TransferConfig+0x60>)
 80045fc:	430b      	orrs	r3, r1
 80045fe:	43db      	mvns	r3, r3
 8004600:	ea02 0103 	and.w	r1, r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	03ff63ff 	.word	0x03ff63ff

08004620 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b20      	cmp	r3, #32
 8004634:	d138      	bne.n	80046a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004640:	2302      	movs	r3, #2
 8004642:	e032      	b.n	80046aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2224      	movs	r2, #36	@ 0x24
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0201 	bic.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004672:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6819      	ldr	r1, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e000      	b.n	80046aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
  }
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b085      	sub	sp, #20
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d139      	bne.n	8004740 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e033      	b.n	8004742 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2224      	movs	r2, #36	@ 0x24
 80046e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0201 	bic.w	r2, r2, #1
 80046f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004708:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	e000      	b.n	8004742 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
	...

08004750 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004754:	4b05      	ldr	r3, [pc, #20]	@ (800476c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a04      	ldr	r2, [pc, #16]	@ (800476c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800475a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800475e:	6013      	str	r3, [r2, #0]
}
 8004760:	bf00      	nop
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40007000 	.word	0x40007000

08004770 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004774:	4b04      	ldr	r3, [pc, #16]	@ (8004788 <HAL_PWREx_GetVoltageRange+0x18>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800477c:	4618      	mov	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40007000 	.word	0x40007000

0800478c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800479a:	d130      	bne.n	80047fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800479c:	4b23      	ldr	r3, [pc, #140]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047a8:	d038      	beq.n	800481c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047aa:	4b20      	ldr	r3, [pc, #128]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047b2:	4a1e      	ldr	r2, [pc, #120]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2232      	movs	r2, #50	@ 0x32
 80047c0:	fb02 f303 	mul.w	r3, r2, r3
 80047c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004834 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	0c9b      	lsrs	r3, r3, #18
 80047cc:	3301      	adds	r3, #1
 80047ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047d0:	e002      	b.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047d8:	4b14      	ldr	r3, [pc, #80]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e4:	d102      	bne.n	80047ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f2      	bne.n	80047d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047ec:	4b0f      	ldr	r3, [pc, #60]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f8:	d110      	bne.n	800481c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e00f      	b.n	800481e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047fe:	4b0b      	ldr	r3, [pc, #44]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800480a:	d007      	beq.n	800481c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800480c:	4b07      	ldr	r3, [pc, #28]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004814:	4a05      	ldr	r2, [pc, #20]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004816:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800481a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40007000 	.word	0x40007000
 8004830:	20000010 	.word	0x20000010
 8004834:	431bde83 	.word	0x431bde83

08004838 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e3ca      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800484a:	4b97      	ldr	r3, [pc, #604]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004854:	4b94      	ldr	r3, [pc, #592]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80e4 	beq.w	8004a34 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d007      	beq.n	8004882 <HAL_RCC_OscConfig+0x4a>
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	2b0c      	cmp	r3, #12
 8004876:	f040 808b 	bne.w	8004990 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b01      	cmp	r3, #1
 800487e:	f040 8087 	bne.w	8004990 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004882:	4b89      	ldr	r3, [pc, #548]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_RCC_OscConfig+0x62>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e3a2      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1a      	ldr	r2, [r3, #32]
 800489e:	4b82      	ldr	r3, [pc, #520]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d004      	beq.n	80048b4 <HAL_RCC_OscConfig+0x7c>
 80048aa:	4b7f      	ldr	r3, [pc, #508]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048b2:	e005      	b.n	80048c0 <HAL_RCC_OscConfig+0x88>
 80048b4:	4b7c      	ldr	r3, [pc, #496]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80048b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ba:	091b      	lsrs	r3, r3, #4
 80048bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d223      	bcs.n	800490c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fd1d 	bl	8005308 <RCC_SetFlashLatencyFromMSIRange>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e383      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048d8:	4b73      	ldr	r3, [pc, #460]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a72      	ldr	r2, [pc, #456]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80048de:	f043 0308 	orr.w	r3, r3, #8
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	4b70      	ldr	r3, [pc, #448]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	496d      	ldr	r1, [pc, #436]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048f6:	4b6c      	ldr	r3, [pc, #432]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	4968      	ldr	r1, [pc, #416]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004906:	4313      	orrs	r3, r2
 8004908:	604b      	str	r3, [r1, #4]
 800490a:	e025      	b.n	8004958 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800490c:	4b66      	ldr	r3, [pc, #408]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a65      	ldr	r2, [pc, #404]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004912:	f043 0308 	orr.w	r3, r3, #8
 8004916:	6013      	str	r3, [r2, #0]
 8004918:	4b63      	ldr	r3, [pc, #396]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	4960      	ldr	r1, [pc, #384]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004926:	4313      	orrs	r3, r2
 8004928:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800492a:	4b5f      	ldr	r3, [pc, #380]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	495b      	ldr	r1, [pc, #364]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 800493a:	4313      	orrs	r3, r2
 800493c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d109      	bne.n	8004958 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fcdd 	bl	8005308 <RCC_SetFlashLatencyFromMSIRange>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e343      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004958:	f000 fc4a 	bl	80051f0 <HAL_RCC_GetSysClockFreq>
 800495c:	4602      	mov	r2, r0
 800495e:	4b52      	ldr	r3, [pc, #328]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	091b      	lsrs	r3, r3, #4
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	4950      	ldr	r1, [pc, #320]	@ (8004aac <HAL_RCC_OscConfig+0x274>)
 800496a:	5ccb      	ldrb	r3, [r1, r3]
 800496c:	f003 031f 	and.w	r3, r3, #31
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
 8004974:	4a4e      	ldr	r2, [pc, #312]	@ (8004ab0 <HAL_RCC_OscConfig+0x278>)
 8004976:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004978:	4b4e      	ldr	r3, [pc, #312]	@ (8004ab4 <HAL_RCC_OscConfig+0x27c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f7fe fd83 	bl	8003488 <HAL_InitTick>
 8004982:	4603      	mov	r3, r0
 8004984:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d052      	beq.n	8004a32 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	e327      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d032      	beq.n	80049fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004998:	4b43      	ldr	r3, [pc, #268]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a42      	ldr	r2, [pc, #264]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 800499e:	f043 0301 	orr.w	r3, r3, #1
 80049a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049a4:	f7fe fdc0 	bl	8003528 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049ac:	f7fe fdbc 	bl	8003528 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e310      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049be:	4b3a      	ldr	r3, [pc, #232]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049ca:	4b37      	ldr	r3, [pc, #220]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a36      	ldr	r2, [pc, #216]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80049d0:	f043 0308 	orr.w	r3, r3, #8
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	4b34      	ldr	r3, [pc, #208]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	4931      	ldr	r1, [pc, #196]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049e8:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	021b      	lsls	r3, r3, #8
 80049f6:	492c      	ldr	r1, [pc, #176]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	604b      	str	r3, [r1, #4]
 80049fc:	e01a      	b.n	8004a34 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049fe:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a29      	ldr	r2, [pc, #164]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a04:	f023 0301 	bic.w	r3, r3, #1
 8004a08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a0a:	f7fe fd8d 	bl	8003528 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a12:	f7fe fd89 	bl	8003528 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e2dd      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a24:	4b20      	ldr	r3, [pc, #128]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <HAL_RCC_OscConfig+0x1da>
 8004a30:	e000      	b.n	8004a34 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d074      	beq.n	8004b2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d005      	beq.n	8004a52 <HAL_RCC_OscConfig+0x21a>
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b0c      	cmp	r3, #12
 8004a4a:	d10e      	bne.n	8004a6a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d10b      	bne.n	8004a6a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a52:	4b15      	ldr	r3, [pc, #84]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d064      	beq.n	8004b28 <HAL_RCC_OscConfig+0x2f0>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d160      	bne.n	8004b28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e2ba      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a72:	d106      	bne.n	8004a82 <HAL_RCC_OscConfig+0x24a>
 8004a74:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a0b      	ldr	r2, [pc, #44]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	e026      	b.n	8004ad0 <HAL_RCC_OscConfig+0x298>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a8a:	d115      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x280>
 8004a8c:	4b06      	ldr	r3, [pc, #24]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a05      	ldr	r2, [pc, #20]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	4b03      	ldr	r3, [pc, #12]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a02      	ldr	r2, [pc, #8]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	e014      	b.n	8004ad0 <HAL_RCC_OscConfig+0x298>
 8004aa6:	bf00      	nop
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	0800c9b8 	.word	0x0800c9b8
 8004ab0:	20000010 	.word	0x20000010
 8004ab4:	20000014 	.word	0x20000014
 8004ab8:	4ba0      	ldr	r3, [pc, #640]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a9f      	ldr	r2, [pc, #636]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	4b9d      	ldr	r3, [pc, #628]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a9c      	ldr	r2, [pc, #624]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d013      	beq.n	8004b00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad8:	f7fe fd26 	bl	8003528 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae0:	f7fe fd22 	bl	8003528 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	@ 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e276      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004af2:	4b92      	ldr	r3, [pc, #584]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f0      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x2a8>
 8004afe:	e014      	b.n	8004b2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7fe fd12 	bl	8003528 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b08:	f7fe fd0e 	bl	8003528 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	@ 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e262      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b1a:	4b88      	ldr	r3, [pc, #544]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x2d0>
 8004b26:	e000      	b.n	8004b2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d060      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_OscConfig+0x310>
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2b0c      	cmp	r3, #12
 8004b40:	d119      	bne.n	8004b76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d116      	bne.n	8004b76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b48:	4b7c      	ldr	r3, [pc, #496]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_RCC_OscConfig+0x328>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e23f      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b60:	4b76      	ldr	r3, [pc, #472]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	061b      	lsls	r3, r3, #24
 8004b6e:	4973      	ldr	r1, [pc, #460]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b74:	e040      	b.n	8004bf8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d023      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b7e:	4b6f      	ldr	r3, [pc, #444]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a6e      	ldr	r2, [pc, #440]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fe fccd 	bl	8003528 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b92:	f7fe fcc9 	bl	8003528 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e21d      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ba4:	4b65      	ldr	r3, [pc, #404]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb0:	4b62      	ldr	r3, [pc, #392]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	061b      	lsls	r3, r3, #24
 8004bbe:	495f      	ldr	r1, [pc, #380]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	604b      	str	r3, [r1, #4]
 8004bc4:	e018      	b.n	8004bf8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bc6:	4b5d      	ldr	r3, [pc, #372]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a5c      	ldr	r2, [pc, #368]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd2:	f7fe fca9 	bl	8003528 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bda:	f7fe fca5 	bl	8003528 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e1f9      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bec:	4b53      	ldr	r3, [pc, #332]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1f0      	bne.n	8004bda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d03c      	beq.n	8004c7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01c      	beq.n	8004c46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c12:	4a4a      	ldr	r2, [pc, #296]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004c14:	f043 0301 	orr.w	r3, r3, #1
 8004c18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1c:	f7fe fc84 	bl	8003528 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c24:	f7fe fc80 	bl	8003528 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e1d4      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c36:	4b41      	ldr	r3, [pc, #260]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0ef      	beq.n	8004c24 <HAL_RCC_OscConfig+0x3ec>
 8004c44:	e01b      	b.n	8004c7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c46:	4b3d      	ldr	r3, [pc, #244]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c4c:	4a3b      	ldr	r2, [pc, #236]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004c4e:	f023 0301 	bic.w	r3, r3, #1
 8004c52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c56:	f7fe fc67 	bl	8003528 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c5e:	f7fe fc63 	bl	8003528 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e1b7      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c70:	4b32      	ldr	r3, [pc, #200]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1ef      	bne.n	8004c5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 80a6 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c90:	4b2a      	ldr	r3, [pc, #168]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10d      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c9c:	4b27      	ldr	r3, [pc, #156]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca0:	4a26      	ldr	r2, [pc, #152]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ca8:	4b24      	ldr	r3, [pc, #144]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cb8:	4b21      	ldr	r3, [pc, #132]	@ (8004d40 <HAL_RCC_OscConfig+0x508>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d118      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8004d40 <HAL_RCC_OscConfig+0x508>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d40 <HAL_RCC_OscConfig+0x508>)
 8004cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cd0:	f7fe fc2a 	bl	8003528 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd8:	f7fe fc26 	bl	8003528 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e17a      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cea:	4b15      	ldr	r3, [pc, #84]	@ (8004d40 <HAL_RCC_OscConfig+0x508>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d108      	bne.n	8004d10 <HAL_RCC_OscConfig+0x4d8>
 8004cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d04:	4a0d      	ldr	r2, [pc, #52]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d0e:	e029      	b.n	8004d64 <HAL_RCC_OscConfig+0x52c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b05      	cmp	r3, #5
 8004d16:	d115      	bne.n	8004d44 <HAL_RCC_OscConfig+0x50c>
 8004d18:	4b08      	ldr	r3, [pc, #32]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1e:	4a07      	ldr	r2, [pc, #28]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004d20:	f043 0304 	orr.w	r3, r3, #4
 8004d24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d28:	4b04      	ldr	r3, [pc, #16]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2e:	4a03      	ldr	r2, [pc, #12]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004d30:	f043 0301 	orr.w	r3, r3, #1
 8004d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d38:	e014      	b.n	8004d64 <HAL_RCC_OscConfig+0x52c>
 8004d3a:	bf00      	nop
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	40007000 	.word	0x40007000
 8004d44:	4b9c      	ldr	r3, [pc, #624]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d4a:	4a9b      	ldr	r2, [pc, #620]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d54:	4b98      	ldr	r3, [pc, #608]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5a:	4a97      	ldr	r2, [pc, #604]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004d5c:	f023 0304 	bic.w	r3, r3, #4
 8004d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d016      	beq.n	8004d9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6c:	f7fe fbdc 	bl	8003528 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d72:	e00a      	b.n	8004d8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d74:	f7fe fbd8 	bl	8003528 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e12a      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d8a:	4b8b      	ldr	r3, [pc, #556]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0ed      	beq.n	8004d74 <HAL_RCC_OscConfig+0x53c>
 8004d98:	e015      	b.n	8004dc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9a:	f7fe fbc5 	bl	8003528 <HAL_GetTick>
 8004d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004da0:	e00a      	b.n	8004db8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da2:	f7fe fbc1 	bl	8003528 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e113      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004db8:	4b7f      	ldr	r3, [pc, #508]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1ed      	bne.n	8004da2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dc6:	7ffb      	ldrb	r3, [r7, #31]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d105      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dcc:	4b7a      	ldr	r3, [pc, #488]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd0:	4a79      	ldr	r2, [pc, #484]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dd6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 80fe 	beq.w	8004fde <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	f040 80d0 	bne.w	8004f8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004dec:	4b72      	ldr	r3, [pc, #456]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f003 0203 	and.w	r2, r3, #3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d130      	bne.n	8004e62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d127      	bne.n	8004e62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d11f      	bne.n	8004e62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e2c:	2a07      	cmp	r2, #7
 8004e2e:	bf14      	ite	ne
 8004e30:	2201      	movne	r2, #1
 8004e32:	2200      	moveq	r2, #0
 8004e34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d113      	bne.n	8004e62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	3b01      	subs	r3, #1
 8004e48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d109      	bne.n	8004e62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	085b      	lsrs	r3, r3, #1
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d06e      	beq.n	8004f40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2b0c      	cmp	r3, #12
 8004e66:	d069      	beq.n	8004f3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e68:	4b53      	ldr	r3, [pc, #332]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e74:	4b50      	ldr	r3, [pc, #320]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e0ad      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e84:	4b4c      	ldr	r3, [pc, #304]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a4b      	ldr	r2, [pc, #300]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004e8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e90:	f7fe fb4a 	bl	8003528 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e98:	f7fe fb46 	bl	8003528 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e09a      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eaa:	4b43      	ldr	r3, [pc, #268]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1f0      	bne.n	8004e98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eb6:	4b40      	ldr	r3, [pc, #256]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	4b40      	ldr	r3, [pc, #256]	@ (8004fbc <HAL_RCC_OscConfig+0x784>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ec6:	3a01      	subs	r2, #1
 8004ec8:	0112      	lsls	r2, r2, #4
 8004eca:	4311      	orrs	r1, r2
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ed0:	0212      	lsls	r2, r2, #8
 8004ed2:	4311      	orrs	r1, r2
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ed8:	0852      	lsrs	r2, r2, #1
 8004eda:	3a01      	subs	r2, #1
 8004edc:	0552      	lsls	r2, r2, #21
 8004ede:	4311      	orrs	r1, r2
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004ee4:	0852      	lsrs	r2, r2, #1
 8004ee6:	3a01      	subs	r2, #1
 8004ee8:	0652      	lsls	r2, r2, #25
 8004eea:	4311      	orrs	r1, r2
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ef0:	0912      	lsrs	r2, r2, #4
 8004ef2:	0452      	lsls	r2, r2, #17
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	4930      	ldr	r1, [pc, #192]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004efc:	4b2e      	ldr	r3, [pc, #184]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2d      	ldr	r2, [pc, #180]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004f02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f08:	4b2b      	ldr	r3, [pc, #172]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004f0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f14:	f7fe fb08 	bl	8003528 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1c:	f7fe fb04 	bl	8003528 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e058      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f2e:	4b22      	ldr	r3, [pc, #136]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0f0      	beq.n	8004f1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f3a:	e050      	b.n	8004fde <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e04f      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f40:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d148      	bne.n	8004fde <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a19      	ldr	r2, [pc, #100]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004f52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f58:	4b17      	ldr	r3, [pc, #92]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	4a16      	ldr	r2, [pc, #88]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004f5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f64:	f7fe fae0 	bl	8003528 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6c:	f7fe fadc 	bl	8003528 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e030      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCC_OscConfig+0x734>
 8004f8a:	e028      	b.n	8004fde <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b0c      	cmp	r3, #12
 8004f90:	d023      	beq.n	8004fda <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f92:	4b09      	ldr	r3, [pc, #36]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a08      	ldr	r2, [pc, #32]	@ (8004fb8 <HAL_RCC_OscConfig+0x780>)
 8004f98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9e:	f7fe fac3 	bl	8003528 <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa4:	e00c      	b.n	8004fc0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa6:	f7fe fabf 	bl	8003528 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d905      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e013      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fc0:	4b09      	ldr	r3, [pc, #36]	@ (8004fe8 <HAL_RCC_OscConfig+0x7b0>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1ec      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004fcc:	4b06      	ldr	r3, [pc, #24]	@ (8004fe8 <HAL_RCC_OscConfig+0x7b0>)
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	4905      	ldr	r1, [pc, #20]	@ (8004fe8 <HAL_RCC_OscConfig+0x7b0>)
 8004fd2:	4b06      	ldr	r3, [pc, #24]	@ (8004fec <HAL_RCC_OscConfig+0x7b4>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	60cb      	str	r3, [r1, #12]
 8004fd8:	e001      	b.n	8004fde <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3720      	adds	r7, #32
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	feeefffc 	.word	0xfeeefffc

08004ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0e7      	b.n	80051d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005004:	4b75      	ldr	r3, [pc, #468]	@ (80051dc <HAL_RCC_ClockConfig+0x1ec>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d910      	bls.n	8005034 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005012:	4b72      	ldr	r3, [pc, #456]	@ (80051dc <HAL_RCC_ClockConfig+0x1ec>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f023 0207 	bic.w	r2, r3, #7
 800501a:	4970      	ldr	r1, [pc, #448]	@ (80051dc <HAL_RCC_ClockConfig+0x1ec>)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	4313      	orrs	r3, r2
 8005020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005022:	4b6e      	ldr	r3, [pc, #440]	@ (80051dc <HAL_RCC_ClockConfig+0x1ec>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d001      	beq.n	8005034 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0cf      	b.n	80051d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d010      	beq.n	8005062 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	4b66      	ldr	r3, [pc, #408]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800504c:	429a      	cmp	r2, r3
 800504e:	d908      	bls.n	8005062 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005050:	4b63      	ldr	r3, [pc, #396]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	4960      	ldr	r1, [pc, #384]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 800505e:	4313      	orrs	r3, r2
 8005060:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d04c      	beq.n	8005108 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b03      	cmp	r3, #3
 8005074:	d107      	bne.n	8005086 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005076:	4b5a      	ldr	r3, [pc, #360]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d121      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e0a6      	b.n	80051d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d107      	bne.n	800509e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800508e:	4b54      	ldr	r3, [pc, #336]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d115      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e09a      	b.n	80051d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d107      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050a6:	4b4e      	ldr	r3, [pc, #312]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d109      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e08e      	b.n	80051d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050b6:	4b4a      	ldr	r3, [pc, #296]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e086      	b.n	80051d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050c6:	4b46      	ldr	r3, [pc, #280]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f023 0203 	bic.w	r2, r3, #3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	4943      	ldr	r1, [pc, #268]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d8:	f7fe fa26 	bl	8003528 <HAL_GetTick>
 80050dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050de:	e00a      	b.n	80050f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e0:	f7fe fa22 	bl	8003528 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e06e      	b.n	80051d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f6:	4b3a      	ldr	r3, [pc, #232]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 020c 	and.w	r2, r3, #12
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	429a      	cmp	r2, r3
 8005106:	d1eb      	bne.n	80050e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d010      	beq.n	8005136 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	4b31      	ldr	r3, [pc, #196]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005120:	429a      	cmp	r2, r3
 8005122:	d208      	bcs.n	8005136 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005124:	4b2e      	ldr	r3, [pc, #184]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	492b      	ldr	r1, [pc, #172]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005132:	4313      	orrs	r3, r2
 8005134:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005136:	4b29      	ldr	r3, [pc, #164]	@ (80051dc <HAL_RCC_ClockConfig+0x1ec>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d210      	bcs.n	8005166 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005144:	4b25      	ldr	r3, [pc, #148]	@ (80051dc <HAL_RCC_ClockConfig+0x1ec>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f023 0207 	bic.w	r2, r3, #7
 800514c:	4923      	ldr	r1, [pc, #140]	@ (80051dc <HAL_RCC_ClockConfig+0x1ec>)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	4313      	orrs	r3, r2
 8005152:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005154:	4b21      	ldr	r3, [pc, #132]	@ (80051dc <HAL_RCC_ClockConfig+0x1ec>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d001      	beq.n	8005166 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e036      	b.n	80051d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	2b00      	cmp	r3, #0
 8005170:	d008      	beq.n	8005184 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005172:	4b1b      	ldr	r3, [pc, #108]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	4918      	ldr	r1, [pc, #96]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005180:	4313      	orrs	r3, r2
 8005182:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0308 	and.w	r3, r3, #8
 800518c:	2b00      	cmp	r3, #0
 800518e:	d009      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005190:	4b13      	ldr	r3, [pc, #76]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	4910      	ldr	r1, [pc, #64]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051a4:	f000 f824 	bl	80051f0 <HAL_RCC_GetSysClockFreq>
 80051a8:	4602      	mov	r2, r0
 80051aa:	4b0d      	ldr	r3, [pc, #52]	@ (80051e0 <HAL_RCC_ClockConfig+0x1f0>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	091b      	lsrs	r3, r3, #4
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	490b      	ldr	r1, [pc, #44]	@ (80051e4 <HAL_RCC_ClockConfig+0x1f4>)
 80051b6:	5ccb      	ldrb	r3, [r1, r3]
 80051b8:	f003 031f 	and.w	r3, r3, #31
 80051bc:	fa22 f303 	lsr.w	r3, r2, r3
 80051c0:	4a09      	ldr	r2, [pc, #36]	@ (80051e8 <HAL_RCC_ClockConfig+0x1f8>)
 80051c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051c4:	4b09      	ldr	r3, [pc, #36]	@ (80051ec <HAL_RCC_ClockConfig+0x1fc>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fe f95d 	bl	8003488 <HAL_InitTick>
 80051ce:	4603      	mov	r3, r0
 80051d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80051d2:	7afb      	ldrb	r3, [r7, #11]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40022000 	.word	0x40022000
 80051e0:	40021000 	.word	0x40021000
 80051e4:	0800c9b8 	.word	0x0800c9b8
 80051e8:	20000010 	.word	0x20000010
 80051ec:	20000014 	.word	0x20000014

080051f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b089      	sub	sp, #36	@ 0x24
 80051f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	2300      	movs	r3, #0
 80051fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051fe:	4b3e      	ldr	r3, [pc, #248]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 030c 	and.w	r3, r3, #12
 8005206:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005208:	4b3b      	ldr	r3, [pc, #236]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 0303 	and.w	r3, r3, #3
 8005210:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_RCC_GetSysClockFreq+0x34>
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b0c      	cmp	r3, #12
 800521c:	d121      	bne.n	8005262 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d11e      	bne.n	8005262 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005224:	4b34      	ldr	r3, [pc, #208]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d107      	bne.n	8005240 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005230:	4b31      	ldr	r3, [pc, #196]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005232:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005236:	0a1b      	lsrs	r3, r3, #8
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	61fb      	str	r3, [r7, #28]
 800523e:	e005      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005240:	4b2d      	ldr	r3, [pc, #180]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	091b      	lsrs	r3, r3, #4
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800524c:	4a2b      	ldr	r2, [pc, #172]	@ (80052fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005254:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10d      	bne.n	8005278 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005260:	e00a      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b04      	cmp	r3, #4
 8005266:	d102      	bne.n	800526e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005268:	4b25      	ldr	r3, [pc, #148]	@ (8005300 <HAL_RCC_GetSysClockFreq+0x110>)
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	e004      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b08      	cmp	r3, #8
 8005272:	d101      	bne.n	8005278 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005274:	4b23      	ldr	r3, [pc, #140]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x114>)
 8005276:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b0c      	cmp	r3, #12
 800527c:	d134      	bne.n	80052e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800527e:	4b1e      	ldr	r3, [pc, #120]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d003      	beq.n	8005296 <HAL_RCC_GetSysClockFreq+0xa6>
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b03      	cmp	r3, #3
 8005292:	d003      	beq.n	800529c <HAL_RCC_GetSysClockFreq+0xac>
 8005294:	e005      	b.n	80052a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005296:	4b1a      	ldr	r3, [pc, #104]	@ (8005300 <HAL_RCC_GetSysClockFreq+0x110>)
 8005298:	617b      	str	r3, [r7, #20]
      break;
 800529a:	e005      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800529c:	4b19      	ldr	r3, [pc, #100]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x114>)
 800529e:	617b      	str	r3, [r7, #20]
      break;
 80052a0:	e002      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	617b      	str	r3, [r7, #20]
      break;
 80052a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052a8:	4b13      	ldr	r3, [pc, #76]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	091b      	lsrs	r3, r3, #4
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	3301      	adds	r3, #1
 80052b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052b6:	4b10      	ldr	r3, [pc, #64]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	0a1b      	lsrs	r3, r3, #8
 80052bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	fb03 f202 	mul.w	r2, r3, r2
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052ce:	4b0a      	ldr	r3, [pc, #40]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	0e5b      	lsrs	r3, r3, #25
 80052d4:	f003 0303 	and.w	r3, r3, #3
 80052d8:	3301      	adds	r3, #1
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80052e8:	69bb      	ldr	r3, [r7, #24]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3724      	adds	r7, #36	@ 0x24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40021000 	.word	0x40021000
 80052fc:	0800c9c8 	.word	0x0800c9c8
 8005300:	00f42400 	.word	0x00f42400
 8005304:	007a1200 	.word	0x007a1200

08005308 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005310:	2300      	movs	r3, #0
 8005312:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005314:	4b2a      	ldr	r3, [pc, #168]	@ (80053c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005320:	f7ff fa26 	bl	8004770 <HAL_PWREx_GetVoltageRange>
 8005324:	6178      	str	r0, [r7, #20]
 8005326:	e014      	b.n	8005352 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005328:	4b25      	ldr	r3, [pc, #148]	@ (80053c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800532a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532c:	4a24      	ldr	r2, [pc, #144]	@ (80053c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800532e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005332:	6593      	str	r3, [r2, #88]	@ 0x58
 8005334:	4b22      	ldr	r3, [pc, #136]	@ (80053c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005338:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005340:	f7ff fa16 	bl	8004770 <HAL_PWREx_GetVoltageRange>
 8005344:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005346:	4b1e      	ldr	r3, [pc, #120]	@ (80053c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534a:	4a1d      	ldr	r2, [pc, #116]	@ (80053c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800534c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005350:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005358:	d10b      	bne.n	8005372 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b80      	cmp	r3, #128	@ 0x80
 800535e:	d919      	bls.n	8005394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2ba0      	cmp	r3, #160	@ 0xa0
 8005364:	d902      	bls.n	800536c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005366:	2302      	movs	r3, #2
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	e013      	b.n	8005394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800536c:	2301      	movs	r3, #1
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	e010      	b.n	8005394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b80      	cmp	r3, #128	@ 0x80
 8005376:	d902      	bls.n	800537e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005378:	2303      	movs	r3, #3
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	e00a      	b.n	8005394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b80      	cmp	r3, #128	@ 0x80
 8005382:	d102      	bne.n	800538a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005384:	2302      	movs	r3, #2
 8005386:	613b      	str	r3, [r7, #16]
 8005388:	e004      	b.n	8005394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b70      	cmp	r3, #112	@ 0x70
 800538e:	d101      	bne.n	8005394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005390:	2301      	movs	r3, #1
 8005392:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005394:	4b0b      	ldr	r3, [pc, #44]	@ (80053c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f023 0207 	bic.w	r2, r3, #7
 800539c:	4909      	ldr	r1, [pc, #36]	@ (80053c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053a4:	4b07      	ldr	r3, [pc, #28]	@ (80053c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d001      	beq.n	80053b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40021000 	.word	0x40021000
 80053c4:	40022000 	.word	0x40022000

080053c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053d0:	2300      	movs	r3, #0
 80053d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053d4:	2300      	movs	r3, #0
 80053d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d041      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053e8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80053ec:	d02a      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80053ee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80053f2:	d824      	bhi.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053f8:	d008      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80053fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053fe:	d81e      	bhi.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005404:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005408:	d010      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800540a:	e018      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800540c:	4b86      	ldr	r3, [pc, #536]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	4a85      	ldr	r2, [pc, #532]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005412:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005416:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005418:	e015      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3304      	adds	r3, #4
 800541e:	2100      	movs	r1, #0
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fabb 	bl	800599c <RCCEx_PLLSAI1_Config>
 8005426:	4603      	mov	r3, r0
 8005428:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800542a:	e00c      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3320      	adds	r3, #32
 8005430:	2100      	movs	r1, #0
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fba6 	bl	8005b84 <RCCEx_PLLSAI2_Config>
 8005438:	4603      	mov	r3, r0
 800543a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800543c:	e003      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	74fb      	strb	r3, [r7, #19]
      break;
 8005442:	e000      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005446:	7cfb      	ldrb	r3, [r7, #19]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10b      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800544c:	4b76      	ldr	r3, [pc, #472]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005452:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800545a:	4973      	ldr	r1, [pc, #460]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005462:	e001      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005464:	7cfb      	ldrb	r3, [r7, #19]
 8005466:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d041      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005478:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800547c:	d02a      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800547e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005482:	d824      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005484:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005488:	d008      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800548a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800548e:	d81e      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005498:	d010      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800549a:	e018      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800549c:	4b62      	ldr	r3, [pc, #392]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4a61      	ldr	r2, [pc, #388]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054a8:	e015      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3304      	adds	r3, #4
 80054ae:	2100      	movs	r1, #0
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 fa73 	bl	800599c <RCCEx_PLLSAI1_Config>
 80054b6:	4603      	mov	r3, r0
 80054b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054ba:	e00c      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3320      	adds	r3, #32
 80054c0:	2100      	movs	r1, #0
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fb5e 	bl	8005b84 <RCCEx_PLLSAI2_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054cc:	e003      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	74fb      	strb	r3, [r7, #19]
      break;
 80054d2:	e000      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80054d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054d6:	7cfb      	ldrb	r3, [r7, #19]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10b      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054dc:	4b52      	ldr	r3, [pc, #328]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054ea:	494f      	ldr	r1, [pc, #316]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80054f2:	e001      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f4:	7cfb      	ldrb	r3, [r7, #19]
 80054f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 80a0 	beq.w	8005646 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005506:	2300      	movs	r3, #0
 8005508:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800550a:	4b47      	ldr	r3, [pc, #284]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800550c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800551a:	2300      	movs	r3, #0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00d      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005520:	4b41      	ldr	r3, [pc, #260]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005524:	4a40      	ldr	r2, [pc, #256]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800552a:	6593      	str	r3, [r2, #88]	@ 0x58
 800552c:	4b3e      	ldr	r3, [pc, #248]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800552e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005534:	60bb      	str	r3, [r7, #8]
 8005536:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005538:	2301      	movs	r3, #1
 800553a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800553c:	4b3b      	ldr	r3, [pc, #236]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a3a      	ldr	r2, [pc, #232]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005546:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005548:	f7fd ffee 	bl	8003528 <HAL_GetTick>
 800554c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800554e:	e009      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005550:	f7fd ffea 	bl	8003528 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d902      	bls.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	74fb      	strb	r3, [r7, #19]
        break;
 8005562:	e005      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005564:	4b31      	ldr	r3, [pc, #196]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0ef      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005570:	7cfb      	ldrb	r3, [r7, #19]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d15c      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005576:	4b2c      	ldr	r3, [pc, #176]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800557c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005580:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01f      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	429a      	cmp	r2, r3
 8005592:	d019      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005594:	4b24      	ldr	r3, [pc, #144]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800559e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055a0:	4b21      	ldr	r3, [pc, #132]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a6:	4a20      	ldr	r2, [pc, #128]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055c0:	4a19      	ldr	r2, [pc, #100]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d016      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d2:	f7fd ffa9 	bl	8003528 <HAL_GetTick>
 80055d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055d8:	e00b      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055da:	f7fd ffa5 	bl	8003528 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d902      	bls.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	74fb      	strb	r3, [r7, #19]
            break;
 80055f0:	e006      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0ec      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005600:	7cfb      	ldrb	r3, [r7, #19]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10c      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005606:	4b08      	ldr	r3, [pc, #32]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800560c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005616:	4904      	ldr	r1, [pc, #16]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800561e:	e009      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005620:	7cfb      	ldrb	r3, [r7, #19]
 8005622:	74bb      	strb	r3, [r7, #18]
 8005624:	e006      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005626:	bf00      	nop
 8005628:	40021000 	.word	0x40021000
 800562c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005630:	7cfb      	ldrb	r3, [r7, #19]
 8005632:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005634:	7c7b      	ldrb	r3, [r7, #17]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d105      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800563a:	4b9e      	ldr	r3, [pc, #632]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800563c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800563e:	4a9d      	ldr	r2, [pc, #628]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005640:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005644:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005652:	4b98      	ldr	r3, [pc, #608]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005658:	f023 0203 	bic.w	r2, r3, #3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005660:	4994      	ldr	r1, [pc, #592]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005674:	4b8f      	ldr	r3, [pc, #572]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567a:	f023 020c 	bic.w	r2, r3, #12
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005682:	498c      	ldr	r1, [pc, #560]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005696:	4b87      	ldr	r3, [pc, #540]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a4:	4983      	ldr	r1, [pc, #524]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056b8:	4b7e      	ldr	r3, [pc, #504]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c6:	497b      	ldr	r1, [pc, #492]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056da:	4b76      	ldr	r3, [pc, #472]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056e8:	4972      	ldr	r1, [pc, #456]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0320 	and.w	r3, r3, #32
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056fc:	4b6d      	ldr	r3, [pc, #436]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005702:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800570a:	496a      	ldr	r1, [pc, #424]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800570c:	4313      	orrs	r3, r2
 800570e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800571e:	4b65      	ldr	r3, [pc, #404]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005724:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800572c:	4961      	ldr	r1, [pc, #388]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005740:	4b5c      	ldr	r3, [pc, #368]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005746:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800574e:	4959      	ldr	r1, [pc, #356]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005750:	4313      	orrs	r3, r2
 8005752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005762:	4b54      	ldr	r3, [pc, #336]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005768:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005770:	4950      	ldr	r1, [pc, #320]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00a      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005784:	4b4b      	ldr	r3, [pc, #300]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005792:	4948      	ldr	r1, [pc, #288]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057a6:	4b43      	ldr	r3, [pc, #268]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b4:	493f      	ldr	r1, [pc, #252]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d028      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057c8:	4b3a      	ldr	r3, [pc, #232]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057d6:	4937      	ldr	r1, [pc, #220]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057e6:	d106      	bne.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057e8:	4b32      	ldr	r3, [pc, #200]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	4a31      	ldr	r2, [pc, #196]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057f2:	60d3      	str	r3, [r2, #12]
 80057f4:	e011      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057fe:	d10c      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3304      	adds	r3, #4
 8005804:	2101      	movs	r1, #1
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f8c8 	bl	800599c <RCCEx_PLLSAI1_Config>
 800580c:	4603      	mov	r3, r0
 800580e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005810:	7cfb      	ldrb	r3, [r7, #19]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005816:	7cfb      	ldrb	r3, [r7, #19]
 8005818:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d028      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005826:	4b23      	ldr	r3, [pc, #140]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800582c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005834:	491f      	ldr	r1, [pc, #124]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005840:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005844:	d106      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005846:	4b1b      	ldr	r3, [pc, #108]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	4a1a      	ldr	r2, [pc, #104]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800584c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005850:	60d3      	str	r3, [r2, #12]
 8005852:	e011      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005858:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800585c:	d10c      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3304      	adds	r3, #4
 8005862:	2101      	movs	r1, #1
 8005864:	4618      	mov	r0, r3
 8005866:	f000 f899 	bl	800599c <RCCEx_PLLSAI1_Config>
 800586a:	4603      	mov	r3, r0
 800586c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800586e:	7cfb      	ldrb	r3, [r7, #19]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005874:	7cfb      	ldrb	r3, [r7, #19]
 8005876:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d02b      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005884:	4b0b      	ldr	r3, [pc, #44]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005892:	4908      	ldr	r1, [pc, #32]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005894:	4313      	orrs	r3, r2
 8005896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800589e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058a2:	d109      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058a4:	4b03      	ldr	r3, [pc, #12]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	4a02      	ldr	r2, [pc, #8]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058ae:	60d3      	str	r3, [r2, #12]
 80058b0:	e014      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80058b2:	bf00      	nop
 80058b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058c0:	d10c      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	3304      	adds	r3, #4
 80058c6:	2101      	movs	r1, #1
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 f867 	bl	800599c <RCCEx_PLLSAI1_Config>
 80058ce:	4603      	mov	r3, r0
 80058d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058d2:	7cfb      	ldrb	r3, [r7, #19]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80058d8:	7cfb      	ldrb	r3, [r7, #19]
 80058da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d02f      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058f6:	4928      	ldr	r1, [pc, #160]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005906:	d10d      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3304      	adds	r3, #4
 800590c:	2102      	movs	r1, #2
 800590e:	4618      	mov	r0, r3
 8005910:	f000 f844 	bl	800599c <RCCEx_PLLSAI1_Config>
 8005914:	4603      	mov	r3, r0
 8005916:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005918:	7cfb      	ldrb	r3, [r7, #19]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d014      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800591e:	7cfb      	ldrb	r3, [r7, #19]
 8005920:	74bb      	strb	r3, [r7, #18]
 8005922:	e011      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800592c:	d10c      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3320      	adds	r3, #32
 8005932:	2102      	movs	r1, #2
 8005934:	4618      	mov	r0, r3
 8005936:	f000 f925 	bl	8005b84 <RCCEx_PLLSAI2_Config>
 800593a:	4603      	mov	r3, r0
 800593c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800593e:	7cfb      	ldrb	r3, [r7, #19]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005944:	7cfb      	ldrb	r3, [r7, #19]
 8005946:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005954:	4b10      	ldr	r3, [pc, #64]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800595a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005962:	490d      	ldr	r1, [pc, #52]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005964:	4313      	orrs	r3, r2
 8005966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00b      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005976:	4b08      	ldr	r3, [pc, #32]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800597c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005986:	4904      	ldr	r1, [pc, #16]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800598e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40021000 	.word	0x40021000

0800599c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059aa:	4b75      	ldr	r3, [pc, #468]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d018      	beq.n	80059e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80059b6:	4b72      	ldr	r3, [pc, #456]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f003 0203 	and.w	r2, r3, #3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d10d      	bne.n	80059e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
       ||
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d009      	beq.n	80059e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80059ce:	4b6c      	ldr	r3, [pc, #432]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	091b      	lsrs	r3, r3, #4
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
       ||
 80059de:	429a      	cmp	r2, r3
 80059e0:	d047      	beq.n	8005a72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	73fb      	strb	r3, [r7, #15]
 80059e6:	e044      	b.n	8005a72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b03      	cmp	r3, #3
 80059ee:	d018      	beq.n	8005a22 <RCCEx_PLLSAI1_Config+0x86>
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d825      	bhi.n	8005a40 <RCCEx_PLLSAI1_Config+0xa4>
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d002      	beq.n	80059fe <RCCEx_PLLSAI1_Config+0x62>
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d009      	beq.n	8005a10 <RCCEx_PLLSAI1_Config+0x74>
 80059fc:	e020      	b.n	8005a40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059fe:	4b60      	ldr	r3, [pc, #384]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d11d      	bne.n	8005a46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a0e:	e01a      	b.n	8005a46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a10:	4b5b      	ldr	r3, [pc, #364]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d116      	bne.n	8005a4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a20:	e013      	b.n	8005a4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a22:	4b57      	ldr	r3, [pc, #348]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10f      	bne.n	8005a4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a2e:	4b54      	ldr	r3, [pc, #336]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a3e:	e006      	b.n	8005a4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	73fb      	strb	r3, [r7, #15]
      break;
 8005a44:	e004      	b.n	8005a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a46:	bf00      	nop
 8005a48:	e002      	b.n	8005a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a4a:	bf00      	nop
 8005a4c:	e000      	b.n	8005a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10d      	bne.n	8005a72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a56:	4b4a      	ldr	r3, [pc, #296]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6819      	ldr	r1, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	430b      	orrs	r3, r1
 8005a6c:	4944      	ldr	r1, [pc, #272]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d17d      	bne.n	8005b74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a78:	4b41      	ldr	r3, [pc, #260]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a40      	ldr	r2, [pc, #256]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a84:	f7fd fd50 	bl	8003528 <HAL_GetTick>
 8005a88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a8a:	e009      	b.n	8005aa0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a8c:	f7fd fd4c 	bl	8003528 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d902      	bls.n	8005aa0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a9e:	e005      	b.n	8005aac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005aa0:	4b37      	ldr	r3, [pc, #220]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1ef      	bne.n	8005a8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d160      	bne.n	8005b74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d111      	bne.n	8005adc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ab8:	4b31      	ldr	r3, [pc, #196]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6892      	ldr	r2, [r2, #8]
 8005ac8:	0211      	lsls	r1, r2, #8
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	68d2      	ldr	r2, [r2, #12]
 8005ace:	0912      	lsrs	r2, r2, #4
 8005ad0:	0452      	lsls	r2, r2, #17
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	492a      	ldr	r1, [pc, #168]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	610b      	str	r3, [r1, #16]
 8005ada:	e027      	b.n	8005b2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d112      	bne.n	8005b08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ae2:	4b27      	ldr	r3, [pc, #156]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005aea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6892      	ldr	r2, [r2, #8]
 8005af2:	0211      	lsls	r1, r2, #8
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6912      	ldr	r2, [r2, #16]
 8005af8:	0852      	lsrs	r2, r2, #1
 8005afa:	3a01      	subs	r2, #1
 8005afc:	0552      	lsls	r2, r2, #21
 8005afe:	430a      	orrs	r2, r1
 8005b00:	491f      	ldr	r1, [pc, #124]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	610b      	str	r3, [r1, #16]
 8005b06:	e011      	b.n	8005b2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b08:	4b1d      	ldr	r3, [pc, #116]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6892      	ldr	r2, [r2, #8]
 8005b18:	0211      	lsls	r1, r2, #8
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6952      	ldr	r2, [r2, #20]
 8005b1e:	0852      	lsrs	r2, r2, #1
 8005b20:	3a01      	subs	r2, #1
 8005b22:	0652      	lsls	r2, r2, #25
 8005b24:	430a      	orrs	r2, r1
 8005b26:	4916      	ldr	r1, [pc, #88]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b2c:	4b14      	ldr	r3, [pc, #80]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a13      	ldr	r2, [pc, #76]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b38:	f7fd fcf6 	bl	8003528 <HAL_GetTick>
 8005b3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b3e:	e009      	b.n	8005b54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b40:	f7fd fcf2 	bl	8003528 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d902      	bls.n	8005b54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	73fb      	strb	r3, [r7, #15]
          break;
 8005b52:	e005      	b.n	8005b60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b54:	4b0a      	ldr	r3, [pc, #40]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0ef      	beq.n	8005b40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b66:	4b06      	ldr	r3, [pc, #24]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b68:	691a      	ldr	r2, [r3, #16]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	4904      	ldr	r1, [pc, #16]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	40021000 	.word	0x40021000

08005b84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b92:	4b6a      	ldr	r3, [pc, #424]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d018      	beq.n	8005bd0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005b9e:	4b67      	ldr	r3, [pc, #412]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f003 0203 	and.w	r2, r3, #3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d10d      	bne.n	8005bca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
       ||
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d009      	beq.n	8005bca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005bb6:	4b61      	ldr	r3, [pc, #388]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	091b      	lsrs	r3, r3, #4
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
       ||
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d047      	beq.n	8005c5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	73fb      	strb	r3, [r7, #15]
 8005bce:	e044      	b.n	8005c5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d018      	beq.n	8005c0a <RCCEx_PLLSAI2_Config+0x86>
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d825      	bhi.n	8005c28 <RCCEx_PLLSAI2_Config+0xa4>
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d002      	beq.n	8005be6 <RCCEx_PLLSAI2_Config+0x62>
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d009      	beq.n	8005bf8 <RCCEx_PLLSAI2_Config+0x74>
 8005be4:	e020      	b.n	8005c28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005be6:	4b55      	ldr	r3, [pc, #340]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d11d      	bne.n	8005c2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bf6:	e01a      	b.n	8005c2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005bf8:	4b50      	ldr	r3, [pc, #320]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d116      	bne.n	8005c32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c08:	e013      	b.n	8005c32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c0a:	4b4c      	ldr	r3, [pc, #304]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10f      	bne.n	8005c36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c16:	4b49      	ldr	r3, [pc, #292]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d109      	bne.n	8005c36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c26:	e006      	b.n	8005c36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c2c:	e004      	b.n	8005c38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c2e:	bf00      	nop
 8005c30:	e002      	b.n	8005c38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c32:	bf00      	nop
 8005c34:	e000      	b.n	8005c38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c36:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10d      	bne.n	8005c5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c3e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6819      	ldr	r1, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	011b      	lsls	r3, r3, #4
 8005c52:	430b      	orrs	r3, r1
 8005c54:	4939      	ldr	r1, [pc, #228]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d167      	bne.n	8005d30 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c60:	4b36      	ldr	r3, [pc, #216]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a35      	ldr	r2, [pc, #212]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c6c:	f7fd fc5c 	bl	8003528 <HAL_GetTick>
 8005c70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c72:	e009      	b.n	8005c88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c74:	f7fd fc58 	bl	8003528 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d902      	bls.n	8005c88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	73fb      	strb	r3, [r7, #15]
        break;
 8005c86:	e005      	b.n	8005c94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c88:	4b2c      	ldr	r3, [pc, #176]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1ef      	bne.n	8005c74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d14a      	bne.n	8005d30 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d111      	bne.n	8005cc4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ca0:	4b26      	ldr	r3, [pc, #152]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005ca8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6892      	ldr	r2, [r2, #8]
 8005cb0:	0211      	lsls	r1, r2, #8
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	68d2      	ldr	r2, [r2, #12]
 8005cb6:	0912      	lsrs	r2, r2, #4
 8005cb8:	0452      	lsls	r2, r2, #17
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	491f      	ldr	r1, [pc, #124]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	614b      	str	r3, [r1, #20]
 8005cc2:	e011      	b.n	8005ce8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005ccc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6892      	ldr	r2, [r2, #8]
 8005cd4:	0211      	lsls	r1, r2, #8
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6912      	ldr	r2, [r2, #16]
 8005cda:	0852      	lsrs	r2, r2, #1
 8005cdc:	3a01      	subs	r2, #1
 8005cde:	0652      	lsls	r2, r2, #25
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	4916      	ldr	r1, [pc, #88]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ce8:	4b14      	ldr	r3, [pc, #80]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a13      	ldr	r2, [pc, #76]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cf2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf4:	f7fd fc18 	bl	8003528 <HAL_GetTick>
 8005cf8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005cfa:	e009      	b.n	8005d10 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cfc:	f7fd fc14 	bl	8003528 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d902      	bls.n	8005d10 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	73fb      	strb	r3, [r7, #15]
          break;
 8005d0e:	e005      	b.n	8005d1c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d10:	4b0a      	ldr	r3, [pc, #40]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0ef      	beq.n	8005cfc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d22:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d24:	695a      	ldr	r2, [r3, #20]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	4904      	ldr	r1, [pc, #16]	@ (8005d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	40021000 	.word	0x40021000

08005d40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d079      	beq.n	8005e46 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fd f934 	bl	8002fd4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f003 0310 	and.w	r3, r3, #16
 8005d7e:	2b10      	cmp	r3, #16
 8005d80:	d058      	beq.n	8005e34 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	22ca      	movs	r2, #202	@ 0xca
 8005d88:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2253      	movs	r2, #83	@ 0x53
 8005d90:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fad2 	bl	800633c <RTC_EnterInitMode>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d127      	bne.n	8005df2 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6812      	ldr	r2, [r2, #0]
 8005dac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005db4:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6899      	ldr	r1, [r3, #8]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	68d2      	ldr	r2, [r2, #12]
 8005ddc:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6919      	ldr	r1, [r3, #16]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	041a      	lsls	r2, r3, #16
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fad6 	bl	80063a4 <RTC_ExitInitMode>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d113      	bne.n	8005e2a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0203 	bic.w	r2, r2, #3
 8005e10:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69da      	ldr	r2, [r3, #28]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	431a      	orrs	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	22ff      	movs	r2, #255	@ 0xff
 8005e30:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e32:	e001      	b.n	8005e38 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d103      	bne.n	8005e46 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e50:	b590      	push	{r4, r7, lr}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <HAL_RTC_SetTime+0x1a>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e08b      	b.n	8005f82 <HAL_RTC_SetTime+0x132>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2202      	movs	r2, #2
 8005e76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	22ca      	movs	r2, #202	@ 0xca
 8005e80:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2253      	movs	r2, #83	@ 0x53
 8005e88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fa56 	bl	800633c <RTC_EnterInitMode>
 8005e90:	4603      	mov	r3, r0
 8005e92:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005e94:	7cfb      	ldrb	r3, [r7, #19]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d163      	bne.n	8005f62 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d126      	bne.n	8005eee <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d102      	bne.n	8005eb4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fab1 	bl	8006420 <RTC_ByteToBcd2>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 faaa 	bl	8006420 <RTC_ByteToBcd2>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ed0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	789b      	ldrb	r3, [r3, #2]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 faa2 	bl	8006420 <RTC_ByteToBcd2>
 8005edc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ede:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	78db      	ldrb	r3, [r3, #3]
 8005ee6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	e018      	b.n	8005f20 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d102      	bne.n	8005f02 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2200      	movs	r2, #0
 8005f00:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	785b      	ldrb	r3, [r3, #1]
 8005f0c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f0e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f14:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	78db      	ldrb	r3, [r3, #3]
 8005f1a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005f2a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005f2e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005f3e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6899      	ldr	r1, [r3, #8]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 fa23 	bl	80063a4 <RTC_ExitInitMode>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	22ff      	movs	r2, #255	@ 0xff
 8005f68:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005f6a:	7cfb      	ldrb	r3, [r7, #19]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d103      	bne.n	8005f78 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005f80:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd90      	pop	{r4, r7, pc}

08005f8a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f8a:	b590      	push	{r4, r7, lr}
 8005f8c:	b087      	sub	sp, #28
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_RTC_SetDate+0x1a>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e075      	b.n	8006090 <HAL_RTC_SetDate+0x106>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10e      	bne.n	8005fd8 <HAL_RTC_SetDate+0x4e>
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	785b      	ldrb	r3, [r3, #1]
 8005fbe:	f003 0310 	and.w	r3, r3, #16
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d008      	beq.n	8005fd8 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	f023 0310 	bic.w	r3, r3, #16
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	330a      	adds	r3, #10
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d11c      	bne.n	8006018 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	78db      	ldrb	r3, [r3, #3]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fa1c 	bl	8006420 <RTC_ByteToBcd2>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	785b      	ldrb	r3, [r3, #1]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 fa15 	bl	8006420 <RTC_ByteToBcd2>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005ffa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	789b      	ldrb	r3, [r3, #2]
 8006000:	4618      	mov	r0, r3
 8006002:	f000 fa0d 	bl	8006420 <RTC_ByteToBcd2>
 8006006:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006008:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	e00e      	b.n	8006036 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	78db      	ldrb	r3, [r3, #3]
 800601c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	785b      	ldrb	r3, [r3, #1]
 8006022:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006024:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800602a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	22ca      	movs	r2, #202	@ 0xca
 800603c:	625a      	str	r2, [r3, #36]	@ 0x24
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2253      	movs	r2, #83	@ 0x53
 8006044:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 f978 	bl	800633c <RTC_EnterInitMode>
 800604c:	4603      	mov	r3, r0
 800604e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006050:	7cfb      	ldrb	r3, [r7, #19]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10c      	bne.n	8006070 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006060:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006064:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 f99c 	bl	80063a4 <RTC_ExitInitMode>
 800606c:	4603      	mov	r3, r0
 800606e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	22ff      	movs	r2, #255	@ 0xff
 8006076:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8006078:	7cfb      	ldrb	r3, [r7, #19]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d103      	bne.n	8006086 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800608e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006090:	4618      	mov	r0, r3
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	bd90      	pop	{r4, r7, pc}

08006098 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b089      	sub	sp, #36	@ 0x24
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d101      	bne.n	80060b2 <HAL_RTC_SetAlarm+0x1a>
 80060ae:	2302      	movs	r3, #2
 80060b0:	e11b      	b.n	80062ea <HAL_RTC_SetAlarm+0x252>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2202      	movs	r2, #2
 80060be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d137      	bne.n	8006138 <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d102      	bne.n	80060dc <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2200      	movs	r2, #0
 80060da:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 f99d 	bl	8006420 <RTC_ByteToBcd2>
 80060e6:	4603      	mov	r3, r0
 80060e8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	785b      	ldrb	r3, [r3, #1]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 f996 	bl	8006420 <RTC_ByteToBcd2>
 80060f4:	4603      	mov	r3, r0
 80060f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80060f8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	789b      	ldrb	r3, [r3, #2]
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 f98e 	bl	8006420 <RTC_ByteToBcd2>
 8006104:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006106:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	78db      	ldrb	r3, [r3, #3]
 800610e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006110:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800611a:	4618      	mov	r0, r3
 800611c:	f000 f980 	bl	8006420 <RTC_ByteToBcd2>
 8006120:	4603      	mov	r3, r0
 8006122:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006124:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800612c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006132:	4313      	orrs	r3, r2
 8006134:	61fb      	str	r3, [r7, #28]
 8006136:	e023      	b.n	8006180 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006142:	2b00      	cmp	r3, #0
 8006144:	d102      	bne.n	800614c <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2200      	movs	r2, #0
 800614a:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006158:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800615e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	78db      	ldrb	r3, [r3, #3]
 8006164:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006166:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800616e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006170:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006176:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800617c:	4313      	orrs	r3, r2
 800617e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	4313      	orrs	r3, r2
 800618a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	22ca      	movs	r2, #202	@ 0xca
 8006192:	625a      	str	r2, [r3, #36]	@ 0x24
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2253      	movs	r2, #83	@ 0x53
 800619a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061a4:	d14a      	bne.n	800623c <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061b4:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80061c6:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689a      	ldr	r2, [r3, #8]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80061d6:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80061d8:	f7fd f9a6 	bl	8003528 <HAL_GetTick>
 80061dc:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80061de:	e015      	b.n	800620c <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061e0:	f7fd f9a2 	bl	8003528 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061ee:	d90d      	bls.n	800620c <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	22ff      	movs	r2, #255	@ 0xff
 80061f6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2203      	movs	r2, #3
 80061fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e06e      	b.n	80062ea <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0e2      	beq.n	80061e0 <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69fa      	ldr	r2, [r7, #28]
 8006220:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006238:	609a      	str	r2, [r3, #8]
 800623a:	e049      	b.n	80062d0 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689a      	ldr	r2, [r3, #8]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800624a:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	b2da      	uxtb	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800625c:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800626c:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800626e:	f7fd f95b 	bl	8003528 <HAL_GetTick>
 8006272:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006274:	e015      	b.n	80062a2 <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006276:	f7fd f957 	bl	8003528 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006284:	d90d      	bls.n	80062a2 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	22ff      	movs	r2, #255	@ 0xff
 800628c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2203      	movs	r2, #3
 8006292:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e023      	b.n	80062ea <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0e2      	beq.n	8006276 <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062ce:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	22ff      	movs	r2, #255	@ 0xff
 80062d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3724      	adds	r7, #36	@ 0x24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd90      	pop	{r4, r7, pc}
	...

080062f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a0d      	ldr	r2, [pc, #52]	@ (8006338 <HAL_RTC_WaitForSynchro+0x44>)
 8006302:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006304:	f7fd f910 	bl	8003528 <HAL_GetTick>
 8006308:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800630a:	e009      	b.n	8006320 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800630c:	f7fd f90c 	bl	8003528 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800631a:	d901      	bls.n	8006320 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e007      	b.n	8006330 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f003 0320 	and.w	r3, r3, #32
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0ee      	beq.n	800630c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	0003ff5f 	.word	0x0003ff5f

0800633c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	d120      	bne.n	8006398 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f04f 32ff 	mov.w	r2, #4294967295
 800635e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006360:	f7fd f8e2 	bl	8003528 <HAL_GetTick>
 8006364:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006366:	e00d      	b.n	8006384 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006368:	f7fd f8de 	bl	8003528 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006376:	d905      	bls.n	8006384 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2203      	movs	r2, #3
 8006380:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	d102      	bne.n	8006398 <RTC_EnterInitMode+0x5c>
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	2b03      	cmp	r3, #3
 8006396:	d1e7      	bne.n	8006368 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80063b0:	4b1a      	ldr	r3, [pc, #104]	@ (800641c <RTC_ExitInitMode+0x78>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	4a19      	ldr	r2, [pc, #100]	@ (800641c <RTC_ExitInitMode+0x78>)
 80063b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063ba:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80063bc:	4b17      	ldr	r3, [pc, #92]	@ (800641c <RTC_ExitInitMode+0x78>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10c      	bne.n	80063e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff ff93 	bl	80062f4 <HAL_RTC_WaitForSynchro>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d01e      	beq.n	8006412 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2203      	movs	r2, #3
 80063d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	73fb      	strb	r3, [r7, #15]
 80063e0:	e017      	b.n	8006412 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80063e2:	4b0e      	ldr	r3, [pc, #56]	@ (800641c <RTC_ExitInitMode+0x78>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	4a0d      	ldr	r2, [pc, #52]	@ (800641c <RTC_ExitInitMode+0x78>)
 80063e8:	f023 0320 	bic.w	r3, r3, #32
 80063ec:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff ff80 	bl	80062f4 <HAL_RTC_WaitForSynchro>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d005      	beq.n	8006406 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2203      	movs	r2, #3
 80063fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006406:	4b05      	ldr	r3, [pc, #20]	@ (800641c <RTC_ExitInitMode+0x78>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	4a04      	ldr	r2, [pc, #16]	@ (800641c <RTC_ExitInitMode+0x78>)
 800640c:	f043 0320 	orr.w	r3, r3, #32
 8006410:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006412:	7bfb      	ldrb	r3, [r7, #15]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40002800 	.word	0x40002800

08006420 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	4603      	mov	r3, r0
 8006428:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800642e:	79fb      	ldrb	r3, [r7, #7]
 8006430:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006432:	e005      	b.n	8006440 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3301      	adds	r3, #1
 8006438:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800643a:	7afb      	ldrb	r3, [r7, #11]
 800643c:	3b0a      	subs	r3, #10
 800643e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006440:	7afb      	ldrb	r3, [r7, #11]
 8006442:	2b09      	cmp	r3, #9
 8006444:	d8f6      	bhi.n	8006434 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	b2da      	uxtb	r2, r3
 800644e:	7afb      	ldrb	r3, [r7, #11]
 8006450:	4313      	orrs	r3, r2
 8006452:	b2db      	uxtb	r3, r3
}
 8006454:	4618      	mov	r0, r3
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d101      	bne.n	800647a <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8006476:	2302      	movs	r3, #2
 8006478:	e062      	b.n	8006540 <HAL_RTCEx_SetWakeUpTimer+0xe0>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2202      	movs	r2, #2
 8006486:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	22ca      	movs	r2, #202	@ 0xca
 8006490:	625a      	str	r2, [r3, #36]	@ 0x24
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2253      	movs	r2, #83	@ 0x53
 8006498:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064a8:	609a      	str	r2, [r3, #8]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d120      	bne.n	80064fa <HAL_RTCEx_SetWakeUpTimer+0x9a>
#endif
  {
    tickstart = HAL_GetTick();
 80064b8:	f7fd f836 	bl	8003528 <HAL_GetTick>
 80064bc:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80064be:	e015      	b.n	80064ec <HAL_RTCEx_SetWakeUpTimer+0x8c>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80064c0:	f7fd f832 	bl	8003528 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80064ce:	d90d      	bls.n	80064ec <HAL_RTCEx_SetWakeUpTimer+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	22ff      	movs	r2, #255	@ 0xff
 80064d6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2203      	movs	r2, #3
 80064dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e029      	b.n	8006540 <HAL_RTCEx_SetWakeUpTimer+0xe0>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f003 0304 	and.w	r3, r3, #4
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0e2      	beq.n	80064c0 <HAL_RTCEx_SetWakeUpTimer+0x60>
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f023 0107 	bic.w	r1, r3, #7
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	430a      	orrs	r2, r1
 800650c:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006524:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	22ff      	movs	r2, #255	@ 0xff
 800652c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3718      	adds	r7, #24
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e095      	b.n	8006686 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655e:	2b00      	cmp	r3, #0
 8006560:	d108      	bne.n	8006574 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800656a:	d009      	beq.n	8006580 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	61da      	str	r2, [r3, #28]
 8006572:	e005      	b.n	8006580 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7fc fd8a 	bl	80030b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065c0:	d902      	bls.n	80065c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	e002      	b.n	80065ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80065c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80065cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80065d6:	d007      	beq.n	80065e8 <HAL_SPI_Init+0xa0>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065e0:	d002      	beq.n	80065e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80065f8:	431a      	orrs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	431a      	orrs	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800662a:	ea42 0103 	orr.w	r1, r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006632:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	0c1b      	lsrs	r3, r3, #16
 8006644:	f003 0204 	and.w	r2, r3, #4
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664c:	f003 0310 	and.w	r3, r3, #16
 8006650:	431a      	orrs	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006656:	f003 0308 	and.w	r3, r3, #8
 800665a:	431a      	orrs	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006664:	ea42 0103 	orr.w	r1, r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b088      	sub	sp, #32
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	603b      	str	r3, [r7, #0]
 800669a:	4613      	mov	r3, r2
 800669c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800669e:	f7fc ff43 	bl	8003528 <HAL_GetTick>
 80066a2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80066a4:	88fb      	ldrh	r3, [r7, #6]
 80066a6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d001      	beq.n	80066b8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80066b4:	2302      	movs	r3, #2
 80066b6:	e15c      	b.n	8006972 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <HAL_SPI_Transmit+0x36>
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e154      	b.n	8006972 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d101      	bne.n	80066d6 <HAL_SPI_Transmit+0x48>
 80066d2:	2302      	movs	r3, #2
 80066d4:	e14d      	b.n	8006972 <HAL_SPI_Transmit+0x2e4>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2203      	movs	r2, #3
 80066e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	88fa      	ldrh	r2, [r7, #6]
 80066f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	88fa      	ldrh	r2, [r7, #6]
 80066fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006728:	d10f      	bne.n	800674a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006738:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006748:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006754:	2b40      	cmp	r3, #64	@ 0x40
 8006756:	d007      	beq.n	8006768 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006766:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006770:	d952      	bls.n	8006818 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <HAL_SPI_Transmit+0xf2>
 800677a:	8b7b      	ldrh	r3, [r7, #26]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d145      	bne.n	800680c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006784:	881a      	ldrh	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006790:	1c9a      	adds	r2, r3, #2
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80067a4:	e032      	b.n	800680c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d112      	bne.n	80067da <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b8:	881a      	ldrh	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c4:	1c9a      	adds	r2, r3, #2
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80067d8:	e018      	b.n	800680c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067da:	f7fc fea5 	bl	8003528 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d803      	bhi.n	80067f2 <HAL_SPI_Transmit+0x164>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f0:	d102      	bne.n	80067f8 <HAL_SPI_Transmit+0x16a>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d109      	bne.n	800680c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e0b2      	b.n	8006972 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1c7      	bne.n	80067a6 <HAL_SPI_Transmit+0x118>
 8006816:	e083      	b.n	8006920 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <HAL_SPI_Transmit+0x198>
 8006820:	8b7b      	ldrh	r3, [r7, #26]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d177      	bne.n	8006916 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800682a:	b29b      	uxth	r3, r3
 800682c:	2b01      	cmp	r3, #1
 800682e:	d912      	bls.n	8006856 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006834:	881a      	ldrh	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006840:	1c9a      	adds	r2, r3, #2
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800684a:	b29b      	uxth	r3, r3
 800684c:	3b02      	subs	r3, #2
 800684e:	b29a      	uxth	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006854:	e05f      	b.n	8006916 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	330c      	adds	r3, #12
 8006860:	7812      	ldrb	r2, [r2, #0]
 8006862:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800687c:	e04b      	b.n	8006916 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b02      	cmp	r3, #2
 800688a:	d12b      	bne.n	80068e4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b01      	cmp	r3, #1
 8006894:	d912      	bls.n	80068bc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689a:	881a      	ldrh	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a6:	1c9a      	adds	r2, r3, #2
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b02      	subs	r3, #2
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80068ba:	e02c      	b.n	8006916 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	330c      	adds	r3, #12
 80068c6:	7812      	ldrb	r2, [r2, #0]
 80068c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80068e2:	e018      	b.n	8006916 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068e4:	f7fc fe20 	bl	8003528 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d803      	bhi.n	80068fc <HAL_SPI_Transmit+0x26e>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fa:	d102      	bne.n	8006902 <HAL_SPI_Transmit+0x274>
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e02d      	b.n	8006972 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800691a:	b29b      	uxth	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1ae      	bne.n	800687e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 f947 	bl	8006bb8 <SPI_EndRxTxTransaction>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10a      	bne.n	8006954 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800693e:	2300      	movs	r3, #0
 8006940:	617b      	str	r3, [r7, #20]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006970:	2300      	movs	r3, #0
  }
}
 8006972:	4618      	mov	r0, r3
 8006974:	3720      	adds	r7, #32
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	603b      	str	r3, [r7, #0]
 8006988:	4613      	mov	r3, r2
 800698a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800698c:	f7fc fdcc 	bl	8003528 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	4413      	add	r3, r2
 800699a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800699c:	f7fc fdc4 	bl	8003528 <HAL_GetTick>
 80069a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069a2:	4b39      	ldr	r3, [pc, #228]	@ (8006a88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	015b      	lsls	r3, r3, #5
 80069a8:	0d1b      	lsrs	r3, r3, #20
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	fb02 f303 	mul.w	r3, r2, r3
 80069b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069b2:	e054      	b.n	8006a5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ba:	d050      	beq.n	8006a5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069bc:	f7fc fdb4 	bl	8003528 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	69fa      	ldr	r2, [r7, #28]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d902      	bls.n	80069d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d13d      	bne.n	8006a4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80069e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069ea:	d111      	bne.n	8006a10 <SPI_WaitFlagStateUntilTimeout+0x94>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069f4:	d004      	beq.n	8006a00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069fe:	d107      	bne.n	8006a10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a18:	d10f      	bne.n	8006a3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e017      	b.n	8006a7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	4013      	ands	r3, r2
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	bf0c      	ite	eq
 8006a6e:	2301      	moveq	r3, #1
 8006a70:	2300      	movne	r3, #0
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	79fb      	ldrb	r3, [r7, #7]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d19b      	bne.n	80069b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3720      	adds	r7, #32
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20000010 	.word	0x20000010

08006a8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08a      	sub	sp, #40	@ 0x28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006a9e:	f7fc fd43 	bl	8003528 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa6:	1a9b      	subs	r3, r3, r2
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	4413      	add	r3, r2
 8006aac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006aae:	f7fc fd3b 	bl	8003528 <HAL_GetTick>
 8006ab2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	330c      	adds	r3, #12
 8006aba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006abc:	4b3d      	ldr	r3, [pc, #244]	@ (8006bb4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	00da      	lsls	r2, r3, #3
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	0d1b      	lsrs	r3, r3, #20
 8006acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ace:	fb02 f303 	mul.w	r3, r2, r3
 8006ad2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006ad4:	e060      	b.n	8006b98 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006adc:	d107      	bne.n	8006aee <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d104      	bne.n	8006aee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006aec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af4:	d050      	beq.n	8006b98 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006af6:	f7fc fd17 	bl	8003528 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d902      	bls.n	8006b0c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d13d      	bne.n	8006b88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006b1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b24:	d111      	bne.n	8006b4a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b2e:	d004      	beq.n	8006b3a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b38:	d107      	bne.n	8006b4a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b52:	d10f      	bne.n	8006b74 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e010      	b.n	8006baa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689a      	ldr	r2, [r3, #8]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d196      	bne.n	8006ad6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3728      	adds	r7, #40	@ 0x28
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20000010 	.word	0x20000010

08006bb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af02      	add	r7, sp, #8
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f7ff ff5b 	bl	8006a8c <SPI_WaitFifoStateUntilTimeout>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d007      	beq.n	8006bec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006be0:	f043 0220 	orr.w	r2, r3, #32
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e027      	b.n	8006c3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	2180      	movs	r1, #128	@ 0x80
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f7ff fec0 	bl	800697c <SPI_WaitFlagStateUntilTimeout>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d007      	beq.n	8006c12 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c06:	f043 0220 	orr.w	r2, r3, #32
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e014      	b.n	8006c3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f7ff ff34 	bl	8006a8c <SPI_WaitFifoStateUntilTimeout>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d007      	beq.n	8006c3a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c2e:	f043 0220 	orr.w	r2, r3, #32
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e000      	b.n	8006c3c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08a      	sub	sp, #40	@ 0x28
 8006c48:	af02      	add	r7, sp, #8
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	4613      	mov	r3, r2
 8006c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c58:	2b20      	cmp	r3, #32
 8006c5a:	d177      	bne.n	8006d4c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <HAL_UART_Transmit+0x24>
 8006c62:	88fb      	ldrh	r3, [r7, #6]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e070      	b.n	8006d4e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2221      	movs	r2, #33	@ 0x21
 8006c78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c7a:	f7fc fc55 	bl	8003528 <HAL_GetTick>
 8006c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	88fa      	ldrh	r2, [r7, #6]
 8006c84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	88fa      	ldrh	r2, [r7, #6]
 8006c8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c98:	d108      	bne.n	8006cac <HAL_UART_Transmit+0x68>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d104      	bne.n	8006cac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	61bb      	str	r3, [r7, #24]
 8006caa:	e003      	b.n	8006cb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cb4:	e02f      	b.n	8006d16 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	2180      	movs	r1, #128	@ 0x80
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 f848 	bl	8006d56 <UART_WaitOnFlagUntilTimeout>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d004      	beq.n	8006cd6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e03b      	b.n	8006d4e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10b      	bne.n	8006cf4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	881a      	ldrh	r2, [r3, #0]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ce8:	b292      	uxth	r2, r2
 8006cea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	3302      	adds	r3, #2
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	e007      	b.n	8006d04 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	781a      	ldrb	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	3301      	adds	r3, #1
 8006d02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1c9      	bne.n	8006cb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2140      	movs	r1, #64	@ 0x40
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 f812 	bl	8006d56 <UART_WaitOnFlagUntilTimeout>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d004      	beq.n	8006d42 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e005      	b.n	8006d4e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2220      	movs	r2, #32
 8006d46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e000      	b.n	8006d4e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006d4c:	2302      	movs	r3, #2
  }
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3720      	adds	r7, #32
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	603b      	str	r3, [r7, #0]
 8006d62:	4613      	mov	r3, r2
 8006d64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d66:	e04f      	b.n	8006e08 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6e:	d04b      	beq.n	8006e08 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d70:	f7fc fbda 	bl	8003528 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d302      	bcc.n	8006d86 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e04e      	b.n	8006e28 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0304 	and.w	r3, r3, #4
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d037      	beq.n	8006e08 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b80      	cmp	r3, #128	@ 0x80
 8006d9c:	d034      	beq.n	8006e08 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b40      	cmp	r3, #64	@ 0x40
 8006da2:	d031      	beq.n	8006e08 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	f003 0308 	and.w	r3, r3, #8
 8006dae:	2b08      	cmp	r3, #8
 8006db0:	d110      	bne.n	8006dd4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2208      	movs	r2, #8
 8006db8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 f838 	bl	8006e30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2208      	movs	r2, #8
 8006dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e029      	b.n	8006e28 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006de2:	d111      	bne.n	8006e08 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006dec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 f81e 	bl	8006e30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e00f      	b.n	8006e28 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	69da      	ldr	r2, [r3, #28]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	4013      	ands	r3, r2
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	bf0c      	ite	eq
 8006e18:	2301      	moveq	r3, #1
 8006e1a:	2300      	movne	r3, #0
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	461a      	mov	r2, r3
 8006e20:	79fb      	ldrb	r3, [r7, #7]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d0a0      	beq.n	8006d68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b095      	sub	sp, #84	@ 0x54
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e40:	e853 3f00 	ldrex	r3, [r3]
 8006e44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e56:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e5e:	e841 2300 	strex	r3, r2, [r1]
 8006e62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1e6      	bne.n	8006e38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3308      	adds	r3, #8
 8006e70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	e853 3f00 	ldrex	r3, [r3]
 8006e78:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	f023 0301 	bic.w	r3, r3, #1
 8006e80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3308      	adds	r3, #8
 8006e88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e92:	e841 2300 	strex	r3, r2, [r1]
 8006e96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1e5      	bne.n	8006e6a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d118      	bne.n	8006ed8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	e853 3f00 	ldrex	r3, [r3]
 8006eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f023 0310 	bic.w	r3, r3, #16
 8006eba:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ec4:	61bb      	str	r3, [r7, #24]
 8006ec6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec8:	6979      	ldr	r1, [r7, #20]
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	e841 2300 	strex	r3, r2, [r1]
 8006ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1e6      	bne.n	8006ea6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006eec:	bf00      	nop
 8006eee:	3754      	adds	r7, #84	@ 0x54
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <malloc>:
 8006ef8:	4b02      	ldr	r3, [pc, #8]	@ (8006f04 <malloc+0xc>)
 8006efa:	4601      	mov	r1, r0
 8006efc:	6818      	ldr	r0, [r3, #0]
 8006efe:	f000 b825 	b.w	8006f4c <_malloc_r>
 8006f02:	bf00      	nop
 8006f04:	20000028 	.word	0x20000028

08006f08 <sbrk_aligned>:
 8006f08:	b570      	push	{r4, r5, r6, lr}
 8006f0a:	4e0f      	ldr	r6, [pc, #60]	@ (8006f48 <sbrk_aligned+0x40>)
 8006f0c:	460c      	mov	r4, r1
 8006f0e:	6831      	ldr	r1, [r6, #0]
 8006f10:	4605      	mov	r5, r0
 8006f12:	b911      	cbnz	r1, 8006f1a <sbrk_aligned+0x12>
 8006f14:	f000 ff56 	bl	8007dc4 <_sbrk_r>
 8006f18:	6030      	str	r0, [r6, #0]
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	f000 ff51 	bl	8007dc4 <_sbrk_r>
 8006f22:	1c43      	adds	r3, r0, #1
 8006f24:	d103      	bne.n	8006f2e <sbrk_aligned+0x26>
 8006f26:	f04f 34ff 	mov.w	r4, #4294967295
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	bd70      	pop	{r4, r5, r6, pc}
 8006f2e:	1cc4      	adds	r4, r0, #3
 8006f30:	f024 0403 	bic.w	r4, r4, #3
 8006f34:	42a0      	cmp	r0, r4
 8006f36:	d0f8      	beq.n	8006f2a <sbrk_aligned+0x22>
 8006f38:	1a21      	subs	r1, r4, r0
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	f000 ff42 	bl	8007dc4 <_sbrk_r>
 8006f40:	3001      	adds	r0, #1
 8006f42:	d1f2      	bne.n	8006f2a <sbrk_aligned+0x22>
 8006f44:	e7ef      	b.n	8006f26 <sbrk_aligned+0x1e>
 8006f46:	bf00      	nop
 8006f48:	200003b8 	.word	0x200003b8

08006f4c <_malloc_r>:
 8006f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f50:	1ccd      	adds	r5, r1, #3
 8006f52:	f025 0503 	bic.w	r5, r5, #3
 8006f56:	3508      	adds	r5, #8
 8006f58:	2d0c      	cmp	r5, #12
 8006f5a:	bf38      	it	cc
 8006f5c:	250c      	movcc	r5, #12
 8006f5e:	2d00      	cmp	r5, #0
 8006f60:	4606      	mov	r6, r0
 8006f62:	db01      	blt.n	8006f68 <_malloc_r+0x1c>
 8006f64:	42a9      	cmp	r1, r5
 8006f66:	d904      	bls.n	8006f72 <_malloc_r+0x26>
 8006f68:	230c      	movs	r3, #12
 8006f6a:	6033      	str	r3, [r6, #0]
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007048 <_malloc_r+0xfc>
 8006f76:	f000 f869 	bl	800704c <__malloc_lock>
 8006f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8006f7e:	461c      	mov	r4, r3
 8006f80:	bb44      	cbnz	r4, 8006fd4 <_malloc_r+0x88>
 8006f82:	4629      	mov	r1, r5
 8006f84:	4630      	mov	r0, r6
 8006f86:	f7ff ffbf 	bl	8006f08 <sbrk_aligned>
 8006f8a:	1c43      	adds	r3, r0, #1
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	d158      	bne.n	8007042 <_malloc_r+0xf6>
 8006f90:	f8d8 4000 	ldr.w	r4, [r8]
 8006f94:	4627      	mov	r7, r4
 8006f96:	2f00      	cmp	r7, #0
 8006f98:	d143      	bne.n	8007022 <_malloc_r+0xd6>
 8006f9a:	2c00      	cmp	r4, #0
 8006f9c:	d04b      	beq.n	8007036 <_malloc_r+0xea>
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	eb04 0903 	add.w	r9, r4, r3
 8006fa8:	f000 ff0c 	bl	8007dc4 <_sbrk_r>
 8006fac:	4581      	cmp	r9, r0
 8006fae:	d142      	bne.n	8007036 <_malloc_r+0xea>
 8006fb0:	6821      	ldr	r1, [r4, #0]
 8006fb2:	1a6d      	subs	r5, r5, r1
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f7ff ffa6 	bl	8006f08 <sbrk_aligned>
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d03a      	beq.n	8007036 <_malloc_r+0xea>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	442b      	add	r3, r5
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	bb62      	cbnz	r2, 8007028 <_malloc_r+0xdc>
 8006fce:	f8c8 7000 	str.w	r7, [r8]
 8006fd2:	e00f      	b.n	8006ff4 <_malloc_r+0xa8>
 8006fd4:	6822      	ldr	r2, [r4, #0]
 8006fd6:	1b52      	subs	r2, r2, r5
 8006fd8:	d420      	bmi.n	800701c <_malloc_r+0xd0>
 8006fda:	2a0b      	cmp	r2, #11
 8006fdc:	d917      	bls.n	800700e <_malloc_r+0xc2>
 8006fde:	1961      	adds	r1, r4, r5
 8006fe0:	42a3      	cmp	r3, r4
 8006fe2:	6025      	str	r5, [r4, #0]
 8006fe4:	bf18      	it	ne
 8006fe6:	6059      	strne	r1, [r3, #4]
 8006fe8:	6863      	ldr	r3, [r4, #4]
 8006fea:	bf08      	it	eq
 8006fec:	f8c8 1000 	streq.w	r1, [r8]
 8006ff0:	5162      	str	r2, [r4, r5]
 8006ff2:	604b      	str	r3, [r1, #4]
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	f000 f82f 	bl	8007058 <__malloc_unlock>
 8006ffa:	f104 000b 	add.w	r0, r4, #11
 8006ffe:	1d23      	adds	r3, r4, #4
 8007000:	f020 0007 	bic.w	r0, r0, #7
 8007004:	1ac2      	subs	r2, r0, r3
 8007006:	bf1c      	itt	ne
 8007008:	1a1b      	subne	r3, r3, r0
 800700a:	50a3      	strne	r3, [r4, r2]
 800700c:	e7af      	b.n	8006f6e <_malloc_r+0x22>
 800700e:	6862      	ldr	r2, [r4, #4]
 8007010:	42a3      	cmp	r3, r4
 8007012:	bf0c      	ite	eq
 8007014:	f8c8 2000 	streq.w	r2, [r8]
 8007018:	605a      	strne	r2, [r3, #4]
 800701a:	e7eb      	b.n	8006ff4 <_malloc_r+0xa8>
 800701c:	4623      	mov	r3, r4
 800701e:	6864      	ldr	r4, [r4, #4]
 8007020:	e7ae      	b.n	8006f80 <_malloc_r+0x34>
 8007022:	463c      	mov	r4, r7
 8007024:	687f      	ldr	r7, [r7, #4]
 8007026:	e7b6      	b.n	8006f96 <_malloc_r+0x4a>
 8007028:	461a      	mov	r2, r3
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	42a3      	cmp	r3, r4
 800702e:	d1fb      	bne.n	8007028 <_malloc_r+0xdc>
 8007030:	2300      	movs	r3, #0
 8007032:	6053      	str	r3, [r2, #4]
 8007034:	e7de      	b.n	8006ff4 <_malloc_r+0xa8>
 8007036:	230c      	movs	r3, #12
 8007038:	6033      	str	r3, [r6, #0]
 800703a:	4630      	mov	r0, r6
 800703c:	f000 f80c 	bl	8007058 <__malloc_unlock>
 8007040:	e794      	b.n	8006f6c <_malloc_r+0x20>
 8007042:	6005      	str	r5, [r0, #0]
 8007044:	e7d6      	b.n	8006ff4 <_malloc_r+0xa8>
 8007046:	bf00      	nop
 8007048:	200003bc 	.word	0x200003bc

0800704c <__malloc_lock>:
 800704c:	4801      	ldr	r0, [pc, #4]	@ (8007054 <__malloc_lock+0x8>)
 800704e:	f000 bf06 	b.w	8007e5e <__retarget_lock_acquire_recursive>
 8007052:	bf00      	nop
 8007054:	20000500 	.word	0x20000500

08007058 <__malloc_unlock>:
 8007058:	4801      	ldr	r0, [pc, #4]	@ (8007060 <__malloc_unlock+0x8>)
 800705a:	f000 bf01 	b.w	8007e60 <__retarget_lock_release_recursive>
 800705e:	bf00      	nop
 8007060:	20000500 	.word	0x20000500

08007064 <__cvt>:
 8007064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007068:	ec57 6b10 	vmov	r6, r7, d0
 800706c:	2f00      	cmp	r7, #0
 800706e:	460c      	mov	r4, r1
 8007070:	4619      	mov	r1, r3
 8007072:	463b      	mov	r3, r7
 8007074:	bfbb      	ittet	lt
 8007076:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800707a:	461f      	movlt	r7, r3
 800707c:	2300      	movge	r3, #0
 800707e:	232d      	movlt	r3, #45	@ 0x2d
 8007080:	700b      	strb	r3, [r1, #0]
 8007082:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007084:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007088:	4691      	mov	r9, r2
 800708a:	f023 0820 	bic.w	r8, r3, #32
 800708e:	bfbc      	itt	lt
 8007090:	4632      	movlt	r2, r6
 8007092:	4616      	movlt	r6, r2
 8007094:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007098:	d005      	beq.n	80070a6 <__cvt+0x42>
 800709a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800709e:	d100      	bne.n	80070a2 <__cvt+0x3e>
 80070a0:	3401      	adds	r4, #1
 80070a2:	2102      	movs	r1, #2
 80070a4:	e000      	b.n	80070a8 <__cvt+0x44>
 80070a6:	2103      	movs	r1, #3
 80070a8:	ab03      	add	r3, sp, #12
 80070aa:	9301      	str	r3, [sp, #4]
 80070ac:	ab02      	add	r3, sp, #8
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	ec47 6b10 	vmov	d0, r6, r7
 80070b4:	4653      	mov	r3, sl
 80070b6:	4622      	mov	r2, r4
 80070b8:	f000 ff5e 	bl	8007f78 <_dtoa_r>
 80070bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80070c0:	4605      	mov	r5, r0
 80070c2:	d119      	bne.n	80070f8 <__cvt+0x94>
 80070c4:	f019 0f01 	tst.w	r9, #1
 80070c8:	d00e      	beq.n	80070e8 <__cvt+0x84>
 80070ca:	eb00 0904 	add.w	r9, r0, r4
 80070ce:	2200      	movs	r2, #0
 80070d0:	2300      	movs	r3, #0
 80070d2:	4630      	mov	r0, r6
 80070d4:	4639      	mov	r1, r7
 80070d6:	f7f9 fcf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80070da:	b108      	cbz	r0, 80070e0 <__cvt+0x7c>
 80070dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80070e0:	2230      	movs	r2, #48	@ 0x30
 80070e2:	9b03      	ldr	r3, [sp, #12]
 80070e4:	454b      	cmp	r3, r9
 80070e6:	d31e      	bcc.n	8007126 <__cvt+0xc2>
 80070e8:	9b03      	ldr	r3, [sp, #12]
 80070ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80070ec:	1b5b      	subs	r3, r3, r5
 80070ee:	4628      	mov	r0, r5
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	b004      	add	sp, #16
 80070f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80070fc:	eb00 0904 	add.w	r9, r0, r4
 8007100:	d1e5      	bne.n	80070ce <__cvt+0x6a>
 8007102:	7803      	ldrb	r3, [r0, #0]
 8007104:	2b30      	cmp	r3, #48	@ 0x30
 8007106:	d10a      	bne.n	800711e <__cvt+0xba>
 8007108:	2200      	movs	r2, #0
 800710a:	2300      	movs	r3, #0
 800710c:	4630      	mov	r0, r6
 800710e:	4639      	mov	r1, r7
 8007110:	f7f9 fcda 	bl	8000ac8 <__aeabi_dcmpeq>
 8007114:	b918      	cbnz	r0, 800711e <__cvt+0xba>
 8007116:	f1c4 0401 	rsb	r4, r4, #1
 800711a:	f8ca 4000 	str.w	r4, [sl]
 800711e:	f8da 3000 	ldr.w	r3, [sl]
 8007122:	4499      	add	r9, r3
 8007124:	e7d3      	b.n	80070ce <__cvt+0x6a>
 8007126:	1c59      	adds	r1, r3, #1
 8007128:	9103      	str	r1, [sp, #12]
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	e7d9      	b.n	80070e2 <__cvt+0x7e>

0800712e <__exponent>:
 800712e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007130:	2900      	cmp	r1, #0
 8007132:	bfba      	itte	lt
 8007134:	4249      	neglt	r1, r1
 8007136:	232d      	movlt	r3, #45	@ 0x2d
 8007138:	232b      	movge	r3, #43	@ 0x2b
 800713a:	2909      	cmp	r1, #9
 800713c:	7002      	strb	r2, [r0, #0]
 800713e:	7043      	strb	r3, [r0, #1]
 8007140:	dd29      	ble.n	8007196 <__exponent+0x68>
 8007142:	f10d 0307 	add.w	r3, sp, #7
 8007146:	461d      	mov	r5, r3
 8007148:	270a      	movs	r7, #10
 800714a:	461a      	mov	r2, r3
 800714c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007150:	fb07 1416 	mls	r4, r7, r6, r1
 8007154:	3430      	adds	r4, #48	@ 0x30
 8007156:	f802 4c01 	strb.w	r4, [r2, #-1]
 800715a:	460c      	mov	r4, r1
 800715c:	2c63      	cmp	r4, #99	@ 0x63
 800715e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007162:	4631      	mov	r1, r6
 8007164:	dcf1      	bgt.n	800714a <__exponent+0x1c>
 8007166:	3130      	adds	r1, #48	@ 0x30
 8007168:	1e94      	subs	r4, r2, #2
 800716a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800716e:	1c41      	adds	r1, r0, #1
 8007170:	4623      	mov	r3, r4
 8007172:	42ab      	cmp	r3, r5
 8007174:	d30a      	bcc.n	800718c <__exponent+0x5e>
 8007176:	f10d 0309 	add.w	r3, sp, #9
 800717a:	1a9b      	subs	r3, r3, r2
 800717c:	42ac      	cmp	r4, r5
 800717e:	bf88      	it	hi
 8007180:	2300      	movhi	r3, #0
 8007182:	3302      	adds	r3, #2
 8007184:	4403      	add	r3, r0
 8007186:	1a18      	subs	r0, r3, r0
 8007188:	b003      	add	sp, #12
 800718a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800718c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007190:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007194:	e7ed      	b.n	8007172 <__exponent+0x44>
 8007196:	2330      	movs	r3, #48	@ 0x30
 8007198:	3130      	adds	r1, #48	@ 0x30
 800719a:	7083      	strb	r3, [r0, #2]
 800719c:	70c1      	strb	r1, [r0, #3]
 800719e:	1d03      	adds	r3, r0, #4
 80071a0:	e7f1      	b.n	8007186 <__exponent+0x58>
	...

080071a4 <_printf_float>:
 80071a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a8:	b08d      	sub	sp, #52	@ 0x34
 80071aa:	460c      	mov	r4, r1
 80071ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80071b0:	4616      	mov	r6, r2
 80071b2:	461f      	mov	r7, r3
 80071b4:	4605      	mov	r5, r0
 80071b6:	f000 fdcd 	bl	8007d54 <_localeconv_r>
 80071ba:	6803      	ldr	r3, [r0, #0]
 80071bc:	9304      	str	r3, [sp, #16]
 80071be:	4618      	mov	r0, r3
 80071c0:	f7f9 f856 	bl	8000270 <strlen>
 80071c4:	2300      	movs	r3, #0
 80071c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80071c8:	f8d8 3000 	ldr.w	r3, [r8]
 80071cc:	9005      	str	r0, [sp, #20]
 80071ce:	3307      	adds	r3, #7
 80071d0:	f023 0307 	bic.w	r3, r3, #7
 80071d4:	f103 0208 	add.w	r2, r3, #8
 80071d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80071dc:	f8d4 b000 	ldr.w	fp, [r4]
 80071e0:	f8c8 2000 	str.w	r2, [r8]
 80071e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80071ec:	9307      	str	r3, [sp, #28]
 80071ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80071f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80071f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071fa:	4b9c      	ldr	r3, [pc, #624]	@ (800746c <_printf_float+0x2c8>)
 80071fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007200:	f7f9 fc94 	bl	8000b2c <__aeabi_dcmpun>
 8007204:	bb70      	cbnz	r0, 8007264 <_printf_float+0xc0>
 8007206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800720a:	4b98      	ldr	r3, [pc, #608]	@ (800746c <_printf_float+0x2c8>)
 800720c:	f04f 32ff 	mov.w	r2, #4294967295
 8007210:	f7f9 fc6e 	bl	8000af0 <__aeabi_dcmple>
 8007214:	bb30      	cbnz	r0, 8007264 <_printf_float+0xc0>
 8007216:	2200      	movs	r2, #0
 8007218:	2300      	movs	r3, #0
 800721a:	4640      	mov	r0, r8
 800721c:	4649      	mov	r1, r9
 800721e:	f7f9 fc5d 	bl	8000adc <__aeabi_dcmplt>
 8007222:	b110      	cbz	r0, 800722a <_printf_float+0x86>
 8007224:	232d      	movs	r3, #45	@ 0x2d
 8007226:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800722a:	4a91      	ldr	r2, [pc, #580]	@ (8007470 <_printf_float+0x2cc>)
 800722c:	4b91      	ldr	r3, [pc, #580]	@ (8007474 <_printf_float+0x2d0>)
 800722e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007232:	bf8c      	ite	hi
 8007234:	4690      	movhi	r8, r2
 8007236:	4698      	movls	r8, r3
 8007238:	2303      	movs	r3, #3
 800723a:	6123      	str	r3, [r4, #16]
 800723c:	f02b 0304 	bic.w	r3, fp, #4
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	f04f 0900 	mov.w	r9, #0
 8007246:	9700      	str	r7, [sp, #0]
 8007248:	4633      	mov	r3, r6
 800724a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800724c:	4621      	mov	r1, r4
 800724e:	4628      	mov	r0, r5
 8007250:	f000 f9d2 	bl	80075f8 <_printf_common>
 8007254:	3001      	adds	r0, #1
 8007256:	f040 808d 	bne.w	8007374 <_printf_float+0x1d0>
 800725a:	f04f 30ff 	mov.w	r0, #4294967295
 800725e:	b00d      	add	sp, #52	@ 0x34
 8007260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007264:	4642      	mov	r2, r8
 8007266:	464b      	mov	r3, r9
 8007268:	4640      	mov	r0, r8
 800726a:	4649      	mov	r1, r9
 800726c:	f7f9 fc5e 	bl	8000b2c <__aeabi_dcmpun>
 8007270:	b140      	cbz	r0, 8007284 <_printf_float+0xe0>
 8007272:	464b      	mov	r3, r9
 8007274:	2b00      	cmp	r3, #0
 8007276:	bfbc      	itt	lt
 8007278:	232d      	movlt	r3, #45	@ 0x2d
 800727a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800727e:	4a7e      	ldr	r2, [pc, #504]	@ (8007478 <_printf_float+0x2d4>)
 8007280:	4b7e      	ldr	r3, [pc, #504]	@ (800747c <_printf_float+0x2d8>)
 8007282:	e7d4      	b.n	800722e <_printf_float+0x8a>
 8007284:	6863      	ldr	r3, [r4, #4]
 8007286:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800728a:	9206      	str	r2, [sp, #24]
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	d13b      	bne.n	8007308 <_printf_float+0x164>
 8007290:	2306      	movs	r3, #6
 8007292:	6063      	str	r3, [r4, #4]
 8007294:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007298:	2300      	movs	r3, #0
 800729a:	6022      	str	r2, [r4, #0]
 800729c:	9303      	str	r3, [sp, #12]
 800729e:	ab0a      	add	r3, sp, #40	@ 0x28
 80072a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80072a4:	ab09      	add	r3, sp, #36	@ 0x24
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	6861      	ldr	r1, [r4, #4]
 80072aa:	ec49 8b10 	vmov	d0, r8, r9
 80072ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80072b2:	4628      	mov	r0, r5
 80072b4:	f7ff fed6 	bl	8007064 <__cvt>
 80072b8:	9b06      	ldr	r3, [sp, #24]
 80072ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80072bc:	2b47      	cmp	r3, #71	@ 0x47
 80072be:	4680      	mov	r8, r0
 80072c0:	d129      	bne.n	8007316 <_printf_float+0x172>
 80072c2:	1cc8      	adds	r0, r1, #3
 80072c4:	db02      	blt.n	80072cc <_printf_float+0x128>
 80072c6:	6863      	ldr	r3, [r4, #4]
 80072c8:	4299      	cmp	r1, r3
 80072ca:	dd41      	ble.n	8007350 <_printf_float+0x1ac>
 80072cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80072d0:	fa5f fa8a 	uxtb.w	sl, sl
 80072d4:	3901      	subs	r1, #1
 80072d6:	4652      	mov	r2, sl
 80072d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80072dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80072de:	f7ff ff26 	bl	800712e <__exponent>
 80072e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072e4:	1813      	adds	r3, r2, r0
 80072e6:	2a01      	cmp	r2, #1
 80072e8:	4681      	mov	r9, r0
 80072ea:	6123      	str	r3, [r4, #16]
 80072ec:	dc02      	bgt.n	80072f4 <_printf_float+0x150>
 80072ee:	6822      	ldr	r2, [r4, #0]
 80072f0:	07d2      	lsls	r2, r2, #31
 80072f2:	d501      	bpl.n	80072f8 <_printf_float+0x154>
 80072f4:	3301      	adds	r3, #1
 80072f6:	6123      	str	r3, [r4, #16]
 80072f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d0a2      	beq.n	8007246 <_printf_float+0xa2>
 8007300:	232d      	movs	r3, #45	@ 0x2d
 8007302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007306:	e79e      	b.n	8007246 <_printf_float+0xa2>
 8007308:	9a06      	ldr	r2, [sp, #24]
 800730a:	2a47      	cmp	r2, #71	@ 0x47
 800730c:	d1c2      	bne.n	8007294 <_printf_float+0xf0>
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1c0      	bne.n	8007294 <_printf_float+0xf0>
 8007312:	2301      	movs	r3, #1
 8007314:	e7bd      	b.n	8007292 <_printf_float+0xee>
 8007316:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800731a:	d9db      	bls.n	80072d4 <_printf_float+0x130>
 800731c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007320:	d118      	bne.n	8007354 <_printf_float+0x1b0>
 8007322:	2900      	cmp	r1, #0
 8007324:	6863      	ldr	r3, [r4, #4]
 8007326:	dd0b      	ble.n	8007340 <_printf_float+0x19c>
 8007328:	6121      	str	r1, [r4, #16]
 800732a:	b913      	cbnz	r3, 8007332 <_printf_float+0x18e>
 800732c:	6822      	ldr	r2, [r4, #0]
 800732e:	07d0      	lsls	r0, r2, #31
 8007330:	d502      	bpl.n	8007338 <_printf_float+0x194>
 8007332:	3301      	adds	r3, #1
 8007334:	440b      	add	r3, r1
 8007336:	6123      	str	r3, [r4, #16]
 8007338:	65a1      	str	r1, [r4, #88]	@ 0x58
 800733a:	f04f 0900 	mov.w	r9, #0
 800733e:	e7db      	b.n	80072f8 <_printf_float+0x154>
 8007340:	b913      	cbnz	r3, 8007348 <_printf_float+0x1a4>
 8007342:	6822      	ldr	r2, [r4, #0]
 8007344:	07d2      	lsls	r2, r2, #31
 8007346:	d501      	bpl.n	800734c <_printf_float+0x1a8>
 8007348:	3302      	adds	r3, #2
 800734a:	e7f4      	b.n	8007336 <_printf_float+0x192>
 800734c:	2301      	movs	r3, #1
 800734e:	e7f2      	b.n	8007336 <_printf_float+0x192>
 8007350:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007356:	4299      	cmp	r1, r3
 8007358:	db05      	blt.n	8007366 <_printf_float+0x1c2>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	6121      	str	r1, [r4, #16]
 800735e:	07d8      	lsls	r0, r3, #31
 8007360:	d5ea      	bpl.n	8007338 <_printf_float+0x194>
 8007362:	1c4b      	adds	r3, r1, #1
 8007364:	e7e7      	b.n	8007336 <_printf_float+0x192>
 8007366:	2900      	cmp	r1, #0
 8007368:	bfd4      	ite	le
 800736a:	f1c1 0202 	rsble	r2, r1, #2
 800736e:	2201      	movgt	r2, #1
 8007370:	4413      	add	r3, r2
 8007372:	e7e0      	b.n	8007336 <_printf_float+0x192>
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	055a      	lsls	r2, r3, #21
 8007378:	d407      	bmi.n	800738a <_printf_float+0x1e6>
 800737a:	6923      	ldr	r3, [r4, #16]
 800737c:	4642      	mov	r2, r8
 800737e:	4631      	mov	r1, r6
 8007380:	4628      	mov	r0, r5
 8007382:	47b8      	blx	r7
 8007384:	3001      	adds	r0, #1
 8007386:	d12b      	bne.n	80073e0 <_printf_float+0x23c>
 8007388:	e767      	b.n	800725a <_printf_float+0xb6>
 800738a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800738e:	f240 80dd 	bls.w	800754c <_printf_float+0x3a8>
 8007392:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007396:	2200      	movs	r2, #0
 8007398:	2300      	movs	r3, #0
 800739a:	f7f9 fb95 	bl	8000ac8 <__aeabi_dcmpeq>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d033      	beq.n	800740a <_printf_float+0x266>
 80073a2:	4a37      	ldr	r2, [pc, #220]	@ (8007480 <_printf_float+0x2dc>)
 80073a4:	2301      	movs	r3, #1
 80073a6:	4631      	mov	r1, r6
 80073a8:	4628      	mov	r0, r5
 80073aa:	47b8      	blx	r7
 80073ac:	3001      	adds	r0, #1
 80073ae:	f43f af54 	beq.w	800725a <_printf_float+0xb6>
 80073b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80073b6:	4543      	cmp	r3, r8
 80073b8:	db02      	blt.n	80073c0 <_printf_float+0x21c>
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	07d8      	lsls	r0, r3, #31
 80073be:	d50f      	bpl.n	80073e0 <_printf_float+0x23c>
 80073c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073c4:	4631      	mov	r1, r6
 80073c6:	4628      	mov	r0, r5
 80073c8:	47b8      	blx	r7
 80073ca:	3001      	adds	r0, #1
 80073cc:	f43f af45 	beq.w	800725a <_printf_float+0xb6>
 80073d0:	f04f 0900 	mov.w	r9, #0
 80073d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80073d8:	f104 0a1a 	add.w	sl, r4, #26
 80073dc:	45c8      	cmp	r8, r9
 80073de:	dc09      	bgt.n	80073f4 <_printf_float+0x250>
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	079b      	lsls	r3, r3, #30
 80073e4:	f100 8103 	bmi.w	80075ee <_printf_float+0x44a>
 80073e8:	68e0      	ldr	r0, [r4, #12]
 80073ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073ec:	4298      	cmp	r0, r3
 80073ee:	bfb8      	it	lt
 80073f0:	4618      	movlt	r0, r3
 80073f2:	e734      	b.n	800725e <_printf_float+0xba>
 80073f4:	2301      	movs	r3, #1
 80073f6:	4652      	mov	r2, sl
 80073f8:	4631      	mov	r1, r6
 80073fa:	4628      	mov	r0, r5
 80073fc:	47b8      	blx	r7
 80073fe:	3001      	adds	r0, #1
 8007400:	f43f af2b 	beq.w	800725a <_printf_float+0xb6>
 8007404:	f109 0901 	add.w	r9, r9, #1
 8007408:	e7e8      	b.n	80073dc <_printf_float+0x238>
 800740a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800740c:	2b00      	cmp	r3, #0
 800740e:	dc39      	bgt.n	8007484 <_printf_float+0x2e0>
 8007410:	4a1b      	ldr	r2, [pc, #108]	@ (8007480 <_printf_float+0x2dc>)
 8007412:	2301      	movs	r3, #1
 8007414:	4631      	mov	r1, r6
 8007416:	4628      	mov	r0, r5
 8007418:	47b8      	blx	r7
 800741a:	3001      	adds	r0, #1
 800741c:	f43f af1d 	beq.w	800725a <_printf_float+0xb6>
 8007420:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007424:	ea59 0303 	orrs.w	r3, r9, r3
 8007428:	d102      	bne.n	8007430 <_printf_float+0x28c>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	07d9      	lsls	r1, r3, #31
 800742e:	d5d7      	bpl.n	80073e0 <_printf_float+0x23c>
 8007430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007434:	4631      	mov	r1, r6
 8007436:	4628      	mov	r0, r5
 8007438:	47b8      	blx	r7
 800743a:	3001      	adds	r0, #1
 800743c:	f43f af0d 	beq.w	800725a <_printf_float+0xb6>
 8007440:	f04f 0a00 	mov.w	sl, #0
 8007444:	f104 0b1a 	add.w	fp, r4, #26
 8007448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800744a:	425b      	negs	r3, r3
 800744c:	4553      	cmp	r3, sl
 800744e:	dc01      	bgt.n	8007454 <_printf_float+0x2b0>
 8007450:	464b      	mov	r3, r9
 8007452:	e793      	b.n	800737c <_printf_float+0x1d8>
 8007454:	2301      	movs	r3, #1
 8007456:	465a      	mov	r2, fp
 8007458:	4631      	mov	r1, r6
 800745a:	4628      	mov	r0, r5
 800745c:	47b8      	blx	r7
 800745e:	3001      	adds	r0, #1
 8007460:	f43f aefb 	beq.w	800725a <_printf_float+0xb6>
 8007464:	f10a 0a01 	add.w	sl, sl, #1
 8007468:	e7ee      	b.n	8007448 <_printf_float+0x2a4>
 800746a:	bf00      	nop
 800746c:	7fefffff 	.word	0x7fefffff
 8007470:	0800c9fc 	.word	0x0800c9fc
 8007474:	0800c9f8 	.word	0x0800c9f8
 8007478:	0800ca04 	.word	0x0800ca04
 800747c:	0800ca00 	.word	0x0800ca00
 8007480:	0800ca08 	.word	0x0800ca08
 8007484:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007486:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800748a:	4553      	cmp	r3, sl
 800748c:	bfa8      	it	ge
 800748e:	4653      	movge	r3, sl
 8007490:	2b00      	cmp	r3, #0
 8007492:	4699      	mov	r9, r3
 8007494:	dc36      	bgt.n	8007504 <_printf_float+0x360>
 8007496:	f04f 0b00 	mov.w	fp, #0
 800749a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800749e:	f104 021a 	add.w	r2, r4, #26
 80074a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074a4:	9306      	str	r3, [sp, #24]
 80074a6:	eba3 0309 	sub.w	r3, r3, r9
 80074aa:	455b      	cmp	r3, fp
 80074ac:	dc31      	bgt.n	8007512 <_printf_float+0x36e>
 80074ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b0:	459a      	cmp	sl, r3
 80074b2:	dc3a      	bgt.n	800752a <_printf_float+0x386>
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	07da      	lsls	r2, r3, #31
 80074b8:	d437      	bmi.n	800752a <_printf_float+0x386>
 80074ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074bc:	ebaa 0903 	sub.w	r9, sl, r3
 80074c0:	9b06      	ldr	r3, [sp, #24]
 80074c2:	ebaa 0303 	sub.w	r3, sl, r3
 80074c6:	4599      	cmp	r9, r3
 80074c8:	bfa8      	it	ge
 80074ca:	4699      	movge	r9, r3
 80074cc:	f1b9 0f00 	cmp.w	r9, #0
 80074d0:	dc33      	bgt.n	800753a <_printf_float+0x396>
 80074d2:	f04f 0800 	mov.w	r8, #0
 80074d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074da:	f104 0b1a 	add.w	fp, r4, #26
 80074de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074e0:	ebaa 0303 	sub.w	r3, sl, r3
 80074e4:	eba3 0309 	sub.w	r3, r3, r9
 80074e8:	4543      	cmp	r3, r8
 80074ea:	f77f af79 	ble.w	80073e0 <_printf_float+0x23c>
 80074ee:	2301      	movs	r3, #1
 80074f0:	465a      	mov	r2, fp
 80074f2:	4631      	mov	r1, r6
 80074f4:	4628      	mov	r0, r5
 80074f6:	47b8      	blx	r7
 80074f8:	3001      	adds	r0, #1
 80074fa:	f43f aeae 	beq.w	800725a <_printf_float+0xb6>
 80074fe:	f108 0801 	add.w	r8, r8, #1
 8007502:	e7ec      	b.n	80074de <_printf_float+0x33a>
 8007504:	4642      	mov	r2, r8
 8007506:	4631      	mov	r1, r6
 8007508:	4628      	mov	r0, r5
 800750a:	47b8      	blx	r7
 800750c:	3001      	adds	r0, #1
 800750e:	d1c2      	bne.n	8007496 <_printf_float+0x2f2>
 8007510:	e6a3      	b.n	800725a <_printf_float+0xb6>
 8007512:	2301      	movs	r3, #1
 8007514:	4631      	mov	r1, r6
 8007516:	4628      	mov	r0, r5
 8007518:	9206      	str	r2, [sp, #24]
 800751a:	47b8      	blx	r7
 800751c:	3001      	adds	r0, #1
 800751e:	f43f ae9c 	beq.w	800725a <_printf_float+0xb6>
 8007522:	9a06      	ldr	r2, [sp, #24]
 8007524:	f10b 0b01 	add.w	fp, fp, #1
 8007528:	e7bb      	b.n	80074a2 <_printf_float+0x2fe>
 800752a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800752e:	4631      	mov	r1, r6
 8007530:	4628      	mov	r0, r5
 8007532:	47b8      	blx	r7
 8007534:	3001      	adds	r0, #1
 8007536:	d1c0      	bne.n	80074ba <_printf_float+0x316>
 8007538:	e68f      	b.n	800725a <_printf_float+0xb6>
 800753a:	9a06      	ldr	r2, [sp, #24]
 800753c:	464b      	mov	r3, r9
 800753e:	4442      	add	r2, r8
 8007540:	4631      	mov	r1, r6
 8007542:	4628      	mov	r0, r5
 8007544:	47b8      	blx	r7
 8007546:	3001      	adds	r0, #1
 8007548:	d1c3      	bne.n	80074d2 <_printf_float+0x32e>
 800754a:	e686      	b.n	800725a <_printf_float+0xb6>
 800754c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007550:	f1ba 0f01 	cmp.w	sl, #1
 8007554:	dc01      	bgt.n	800755a <_printf_float+0x3b6>
 8007556:	07db      	lsls	r3, r3, #31
 8007558:	d536      	bpl.n	80075c8 <_printf_float+0x424>
 800755a:	2301      	movs	r3, #1
 800755c:	4642      	mov	r2, r8
 800755e:	4631      	mov	r1, r6
 8007560:	4628      	mov	r0, r5
 8007562:	47b8      	blx	r7
 8007564:	3001      	adds	r0, #1
 8007566:	f43f ae78 	beq.w	800725a <_printf_float+0xb6>
 800756a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800756e:	4631      	mov	r1, r6
 8007570:	4628      	mov	r0, r5
 8007572:	47b8      	blx	r7
 8007574:	3001      	adds	r0, #1
 8007576:	f43f ae70 	beq.w	800725a <_printf_float+0xb6>
 800757a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800757e:	2200      	movs	r2, #0
 8007580:	2300      	movs	r3, #0
 8007582:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007586:	f7f9 fa9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800758a:	b9c0      	cbnz	r0, 80075be <_printf_float+0x41a>
 800758c:	4653      	mov	r3, sl
 800758e:	f108 0201 	add.w	r2, r8, #1
 8007592:	4631      	mov	r1, r6
 8007594:	4628      	mov	r0, r5
 8007596:	47b8      	blx	r7
 8007598:	3001      	adds	r0, #1
 800759a:	d10c      	bne.n	80075b6 <_printf_float+0x412>
 800759c:	e65d      	b.n	800725a <_printf_float+0xb6>
 800759e:	2301      	movs	r3, #1
 80075a0:	465a      	mov	r2, fp
 80075a2:	4631      	mov	r1, r6
 80075a4:	4628      	mov	r0, r5
 80075a6:	47b8      	blx	r7
 80075a8:	3001      	adds	r0, #1
 80075aa:	f43f ae56 	beq.w	800725a <_printf_float+0xb6>
 80075ae:	f108 0801 	add.w	r8, r8, #1
 80075b2:	45d0      	cmp	r8, sl
 80075b4:	dbf3      	blt.n	800759e <_printf_float+0x3fa>
 80075b6:	464b      	mov	r3, r9
 80075b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80075bc:	e6df      	b.n	800737e <_printf_float+0x1da>
 80075be:	f04f 0800 	mov.w	r8, #0
 80075c2:	f104 0b1a 	add.w	fp, r4, #26
 80075c6:	e7f4      	b.n	80075b2 <_printf_float+0x40e>
 80075c8:	2301      	movs	r3, #1
 80075ca:	4642      	mov	r2, r8
 80075cc:	e7e1      	b.n	8007592 <_printf_float+0x3ee>
 80075ce:	2301      	movs	r3, #1
 80075d0:	464a      	mov	r2, r9
 80075d2:	4631      	mov	r1, r6
 80075d4:	4628      	mov	r0, r5
 80075d6:	47b8      	blx	r7
 80075d8:	3001      	adds	r0, #1
 80075da:	f43f ae3e 	beq.w	800725a <_printf_float+0xb6>
 80075de:	f108 0801 	add.w	r8, r8, #1
 80075e2:	68e3      	ldr	r3, [r4, #12]
 80075e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075e6:	1a5b      	subs	r3, r3, r1
 80075e8:	4543      	cmp	r3, r8
 80075ea:	dcf0      	bgt.n	80075ce <_printf_float+0x42a>
 80075ec:	e6fc      	b.n	80073e8 <_printf_float+0x244>
 80075ee:	f04f 0800 	mov.w	r8, #0
 80075f2:	f104 0919 	add.w	r9, r4, #25
 80075f6:	e7f4      	b.n	80075e2 <_printf_float+0x43e>

080075f8 <_printf_common>:
 80075f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075fc:	4616      	mov	r6, r2
 80075fe:	4698      	mov	r8, r3
 8007600:	688a      	ldr	r2, [r1, #8]
 8007602:	690b      	ldr	r3, [r1, #16]
 8007604:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007608:	4293      	cmp	r3, r2
 800760a:	bfb8      	it	lt
 800760c:	4613      	movlt	r3, r2
 800760e:	6033      	str	r3, [r6, #0]
 8007610:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007614:	4607      	mov	r7, r0
 8007616:	460c      	mov	r4, r1
 8007618:	b10a      	cbz	r2, 800761e <_printf_common+0x26>
 800761a:	3301      	adds	r3, #1
 800761c:	6033      	str	r3, [r6, #0]
 800761e:	6823      	ldr	r3, [r4, #0]
 8007620:	0699      	lsls	r1, r3, #26
 8007622:	bf42      	ittt	mi
 8007624:	6833      	ldrmi	r3, [r6, #0]
 8007626:	3302      	addmi	r3, #2
 8007628:	6033      	strmi	r3, [r6, #0]
 800762a:	6825      	ldr	r5, [r4, #0]
 800762c:	f015 0506 	ands.w	r5, r5, #6
 8007630:	d106      	bne.n	8007640 <_printf_common+0x48>
 8007632:	f104 0a19 	add.w	sl, r4, #25
 8007636:	68e3      	ldr	r3, [r4, #12]
 8007638:	6832      	ldr	r2, [r6, #0]
 800763a:	1a9b      	subs	r3, r3, r2
 800763c:	42ab      	cmp	r3, r5
 800763e:	dc26      	bgt.n	800768e <_printf_common+0x96>
 8007640:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007644:	6822      	ldr	r2, [r4, #0]
 8007646:	3b00      	subs	r3, #0
 8007648:	bf18      	it	ne
 800764a:	2301      	movne	r3, #1
 800764c:	0692      	lsls	r2, r2, #26
 800764e:	d42b      	bmi.n	80076a8 <_printf_common+0xb0>
 8007650:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007654:	4641      	mov	r1, r8
 8007656:	4638      	mov	r0, r7
 8007658:	47c8      	blx	r9
 800765a:	3001      	adds	r0, #1
 800765c:	d01e      	beq.n	800769c <_printf_common+0xa4>
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	6922      	ldr	r2, [r4, #16]
 8007662:	f003 0306 	and.w	r3, r3, #6
 8007666:	2b04      	cmp	r3, #4
 8007668:	bf02      	ittt	eq
 800766a:	68e5      	ldreq	r5, [r4, #12]
 800766c:	6833      	ldreq	r3, [r6, #0]
 800766e:	1aed      	subeq	r5, r5, r3
 8007670:	68a3      	ldr	r3, [r4, #8]
 8007672:	bf0c      	ite	eq
 8007674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007678:	2500      	movne	r5, #0
 800767a:	4293      	cmp	r3, r2
 800767c:	bfc4      	itt	gt
 800767e:	1a9b      	subgt	r3, r3, r2
 8007680:	18ed      	addgt	r5, r5, r3
 8007682:	2600      	movs	r6, #0
 8007684:	341a      	adds	r4, #26
 8007686:	42b5      	cmp	r5, r6
 8007688:	d11a      	bne.n	80076c0 <_printf_common+0xc8>
 800768a:	2000      	movs	r0, #0
 800768c:	e008      	b.n	80076a0 <_printf_common+0xa8>
 800768e:	2301      	movs	r3, #1
 8007690:	4652      	mov	r2, sl
 8007692:	4641      	mov	r1, r8
 8007694:	4638      	mov	r0, r7
 8007696:	47c8      	blx	r9
 8007698:	3001      	adds	r0, #1
 800769a:	d103      	bne.n	80076a4 <_printf_common+0xac>
 800769c:	f04f 30ff 	mov.w	r0, #4294967295
 80076a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a4:	3501      	adds	r5, #1
 80076a6:	e7c6      	b.n	8007636 <_printf_common+0x3e>
 80076a8:	18e1      	adds	r1, r4, r3
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	2030      	movs	r0, #48	@ 0x30
 80076ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076b2:	4422      	add	r2, r4
 80076b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076bc:	3302      	adds	r3, #2
 80076be:	e7c7      	b.n	8007650 <_printf_common+0x58>
 80076c0:	2301      	movs	r3, #1
 80076c2:	4622      	mov	r2, r4
 80076c4:	4641      	mov	r1, r8
 80076c6:	4638      	mov	r0, r7
 80076c8:	47c8      	blx	r9
 80076ca:	3001      	adds	r0, #1
 80076cc:	d0e6      	beq.n	800769c <_printf_common+0xa4>
 80076ce:	3601      	adds	r6, #1
 80076d0:	e7d9      	b.n	8007686 <_printf_common+0x8e>
	...

080076d4 <_printf_i>:
 80076d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076d8:	7e0f      	ldrb	r7, [r1, #24]
 80076da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076dc:	2f78      	cmp	r7, #120	@ 0x78
 80076de:	4691      	mov	r9, r2
 80076e0:	4680      	mov	r8, r0
 80076e2:	460c      	mov	r4, r1
 80076e4:	469a      	mov	sl, r3
 80076e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076ea:	d807      	bhi.n	80076fc <_printf_i+0x28>
 80076ec:	2f62      	cmp	r7, #98	@ 0x62
 80076ee:	d80a      	bhi.n	8007706 <_printf_i+0x32>
 80076f0:	2f00      	cmp	r7, #0
 80076f2:	f000 80d1 	beq.w	8007898 <_printf_i+0x1c4>
 80076f6:	2f58      	cmp	r7, #88	@ 0x58
 80076f8:	f000 80b8 	beq.w	800786c <_printf_i+0x198>
 80076fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007700:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007704:	e03a      	b.n	800777c <_printf_i+0xa8>
 8007706:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800770a:	2b15      	cmp	r3, #21
 800770c:	d8f6      	bhi.n	80076fc <_printf_i+0x28>
 800770e:	a101      	add	r1, pc, #4	@ (adr r1, 8007714 <_printf_i+0x40>)
 8007710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007714:	0800776d 	.word	0x0800776d
 8007718:	08007781 	.word	0x08007781
 800771c:	080076fd 	.word	0x080076fd
 8007720:	080076fd 	.word	0x080076fd
 8007724:	080076fd 	.word	0x080076fd
 8007728:	080076fd 	.word	0x080076fd
 800772c:	08007781 	.word	0x08007781
 8007730:	080076fd 	.word	0x080076fd
 8007734:	080076fd 	.word	0x080076fd
 8007738:	080076fd 	.word	0x080076fd
 800773c:	080076fd 	.word	0x080076fd
 8007740:	0800787f 	.word	0x0800787f
 8007744:	080077ab 	.word	0x080077ab
 8007748:	08007839 	.word	0x08007839
 800774c:	080076fd 	.word	0x080076fd
 8007750:	080076fd 	.word	0x080076fd
 8007754:	080078a1 	.word	0x080078a1
 8007758:	080076fd 	.word	0x080076fd
 800775c:	080077ab 	.word	0x080077ab
 8007760:	080076fd 	.word	0x080076fd
 8007764:	080076fd 	.word	0x080076fd
 8007768:	08007841 	.word	0x08007841
 800776c:	6833      	ldr	r3, [r6, #0]
 800776e:	1d1a      	adds	r2, r3, #4
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6032      	str	r2, [r6, #0]
 8007774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007778:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800777c:	2301      	movs	r3, #1
 800777e:	e09c      	b.n	80078ba <_printf_i+0x1e6>
 8007780:	6833      	ldr	r3, [r6, #0]
 8007782:	6820      	ldr	r0, [r4, #0]
 8007784:	1d19      	adds	r1, r3, #4
 8007786:	6031      	str	r1, [r6, #0]
 8007788:	0606      	lsls	r6, r0, #24
 800778a:	d501      	bpl.n	8007790 <_printf_i+0xbc>
 800778c:	681d      	ldr	r5, [r3, #0]
 800778e:	e003      	b.n	8007798 <_printf_i+0xc4>
 8007790:	0645      	lsls	r5, r0, #25
 8007792:	d5fb      	bpl.n	800778c <_printf_i+0xb8>
 8007794:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007798:	2d00      	cmp	r5, #0
 800779a:	da03      	bge.n	80077a4 <_printf_i+0xd0>
 800779c:	232d      	movs	r3, #45	@ 0x2d
 800779e:	426d      	negs	r5, r5
 80077a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077a4:	4858      	ldr	r0, [pc, #352]	@ (8007908 <_printf_i+0x234>)
 80077a6:	230a      	movs	r3, #10
 80077a8:	e011      	b.n	80077ce <_printf_i+0xfa>
 80077aa:	6821      	ldr	r1, [r4, #0]
 80077ac:	6833      	ldr	r3, [r6, #0]
 80077ae:	0608      	lsls	r0, r1, #24
 80077b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80077b4:	d402      	bmi.n	80077bc <_printf_i+0xe8>
 80077b6:	0649      	lsls	r1, r1, #25
 80077b8:	bf48      	it	mi
 80077ba:	b2ad      	uxthmi	r5, r5
 80077bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80077be:	4852      	ldr	r0, [pc, #328]	@ (8007908 <_printf_i+0x234>)
 80077c0:	6033      	str	r3, [r6, #0]
 80077c2:	bf14      	ite	ne
 80077c4:	230a      	movne	r3, #10
 80077c6:	2308      	moveq	r3, #8
 80077c8:	2100      	movs	r1, #0
 80077ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077ce:	6866      	ldr	r6, [r4, #4]
 80077d0:	60a6      	str	r6, [r4, #8]
 80077d2:	2e00      	cmp	r6, #0
 80077d4:	db05      	blt.n	80077e2 <_printf_i+0x10e>
 80077d6:	6821      	ldr	r1, [r4, #0]
 80077d8:	432e      	orrs	r6, r5
 80077da:	f021 0104 	bic.w	r1, r1, #4
 80077de:	6021      	str	r1, [r4, #0]
 80077e0:	d04b      	beq.n	800787a <_printf_i+0x1a6>
 80077e2:	4616      	mov	r6, r2
 80077e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80077e8:	fb03 5711 	mls	r7, r3, r1, r5
 80077ec:	5dc7      	ldrb	r7, [r0, r7]
 80077ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077f2:	462f      	mov	r7, r5
 80077f4:	42bb      	cmp	r3, r7
 80077f6:	460d      	mov	r5, r1
 80077f8:	d9f4      	bls.n	80077e4 <_printf_i+0x110>
 80077fa:	2b08      	cmp	r3, #8
 80077fc:	d10b      	bne.n	8007816 <_printf_i+0x142>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	07df      	lsls	r7, r3, #31
 8007802:	d508      	bpl.n	8007816 <_printf_i+0x142>
 8007804:	6923      	ldr	r3, [r4, #16]
 8007806:	6861      	ldr	r1, [r4, #4]
 8007808:	4299      	cmp	r1, r3
 800780a:	bfde      	ittt	le
 800780c:	2330      	movle	r3, #48	@ 0x30
 800780e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007812:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007816:	1b92      	subs	r2, r2, r6
 8007818:	6122      	str	r2, [r4, #16]
 800781a:	f8cd a000 	str.w	sl, [sp]
 800781e:	464b      	mov	r3, r9
 8007820:	aa03      	add	r2, sp, #12
 8007822:	4621      	mov	r1, r4
 8007824:	4640      	mov	r0, r8
 8007826:	f7ff fee7 	bl	80075f8 <_printf_common>
 800782a:	3001      	adds	r0, #1
 800782c:	d14a      	bne.n	80078c4 <_printf_i+0x1f0>
 800782e:	f04f 30ff 	mov.w	r0, #4294967295
 8007832:	b004      	add	sp, #16
 8007834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	f043 0320 	orr.w	r3, r3, #32
 800783e:	6023      	str	r3, [r4, #0]
 8007840:	4832      	ldr	r0, [pc, #200]	@ (800790c <_printf_i+0x238>)
 8007842:	2778      	movs	r7, #120	@ 0x78
 8007844:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007848:	6823      	ldr	r3, [r4, #0]
 800784a:	6831      	ldr	r1, [r6, #0]
 800784c:	061f      	lsls	r7, r3, #24
 800784e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007852:	d402      	bmi.n	800785a <_printf_i+0x186>
 8007854:	065f      	lsls	r7, r3, #25
 8007856:	bf48      	it	mi
 8007858:	b2ad      	uxthmi	r5, r5
 800785a:	6031      	str	r1, [r6, #0]
 800785c:	07d9      	lsls	r1, r3, #31
 800785e:	bf44      	itt	mi
 8007860:	f043 0320 	orrmi.w	r3, r3, #32
 8007864:	6023      	strmi	r3, [r4, #0]
 8007866:	b11d      	cbz	r5, 8007870 <_printf_i+0x19c>
 8007868:	2310      	movs	r3, #16
 800786a:	e7ad      	b.n	80077c8 <_printf_i+0xf4>
 800786c:	4826      	ldr	r0, [pc, #152]	@ (8007908 <_printf_i+0x234>)
 800786e:	e7e9      	b.n	8007844 <_printf_i+0x170>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	f023 0320 	bic.w	r3, r3, #32
 8007876:	6023      	str	r3, [r4, #0]
 8007878:	e7f6      	b.n	8007868 <_printf_i+0x194>
 800787a:	4616      	mov	r6, r2
 800787c:	e7bd      	b.n	80077fa <_printf_i+0x126>
 800787e:	6833      	ldr	r3, [r6, #0]
 8007880:	6825      	ldr	r5, [r4, #0]
 8007882:	6961      	ldr	r1, [r4, #20]
 8007884:	1d18      	adds	r0, r3, #4
 8007886:	6030      	str	r0, [r6, #0]
 8007888:	062e      	lsls	r6, r5, #24
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	d501      	bpl.n	8007892 <_printf_i+0x1be>
 800788e:	6019      	str	r1, [r3, #0]
 8007890:	e002      	b.n	8007898 <_printf_i+0x1c4>
 8007892:	0668      	lsls	r0, r5, #25
 8007894:	d5fb      	bpl.n	800788e <_printf_i+0x1ba>
 8007896:	8019      	strh	r1, [r3, #0]
 8007898:	2300      	movs	r3, #0
 800789a:	6123      	str	r3, [r4, #16]
 800789c:	4616      	mov	r6, r2
 800789e:	e7bc      	b.n	800781a <_printf_i+0x146>
 80078a0:	6833      	ldr	r3, [r6, #0]
 80078a2:	1d1a      	adds	r2, r3, #4
 80078a4:	6032      	str	r2, [r6, #0]
 80078a6:	681e      	ldr	r6, [r3, #0]
 80078a8:	6862      	ldr	r2, [r4, #4]
 80078aa:	2100      	movs	r1, #0
 80078ac:	4630      	mov	r0, r6
 80078ae:	f7f8 fc8f 	bl	80001d0 <memchr>
 80078b2:	b108      	cbz	r0, 80078b8 <_printf_i+0x1e4>
 80078b4:	1b80      	subs	r0, r0, r6
 80078b6:	6060      	str	r0, [r4, #4]
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	6123      	str	r3, [r4, #16]
 80078bc:	2300      	movs	r3, #0
 80078be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078c2:	e7aa      	b.n	800781a <_printf_i+0x146>
 80078c4:	6923      	ldr	r3, [r4, #16]
 80078c6:	4632      	mov	r2, r6
 80078c8:	4649      	mov	r1, r9
 80078ca:	4640      	mov	r0, r8
 80078cc:	47d0      	blx	sl
 80078ce:	3001      	adds	r0, #1
 80078d0:	d0ad      	beq.n	800782e <_printf_i+0x15a>
 80078d2:	6823      	ldr	r3, [r4, #0]
 80078d4:	079b      	lsls	r3, r3, #30
 80078d6:	d413      	bmi.n	8007900 <_printf_i+0x22c>
 80078d8:	68e0      	ldr	r0, [r4, #12]
 80078da:	9b03      	ldr	r3, [sp, #12]
 80078dc:	4298      	cmp	r0, r3
 80078de:	bfb8      	it	lt
 80078e0:	4618      	movlt	r0, r3
 80078e2:	e7a6      	b.n	8007832 <_printf_i+0x15e>
 80078e4:	2301      	movs	r3, #1
 80078e6:	4632      	mov	r2, r6
 80078e8:	4649      	mov	r1, r9
 80078ea:	4640      	mov	r0, r8
 80078ec:	47d0      	blx	sl
 80078ee:	3001      	adds	r0, #1
 80078f0:	d09d      	beq.n	800782e <_printf_i+0x15a>
 80078f2:	3501      	adds	r5, #1
 80078f4:	68e3      	ldr	r3, [r4, #12]
 80078f6:	9903      	ldr	r1, [sp, #12]
 80078f8:	1a5b      	subs	r3, r3, r1
 80078fa:	42ab      	cmp	r3, r5
 80078fc:	dcf2      	bgt.n	80078e4 <_printf_i+0x210>
 80078fe:	e7eb      	b.n	80078d8 <_printf_i+0x204>
 8007900:	2500      	movs	r5, #0
 8007902:	f104 0619 	add.w	r6, r4, #25
 8007906:	e7f5      	b.n	80078f4 <_printf_i+0x220>
 8007908:	0800ca0a 	.word	0x0800ca0a
 800790c:	0800ca1b 	.word	0x0800ca1b

08007910 <std>:
 8007910:	2300      	movs	r3, #0
 8007912:	b510      	push	{r4, lr}
 8007914:	4604      	mov	r4, r0
 8007916:	e9c0 3300 	strd	r3, r3, [r0]
 800791a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800791e:	6083      	str	r3, [r0, #8]
 8007920:	8181      	strh	r1, [r0, #12]
 8007922:	6643      	str	r3, [r0, #100]	@ 0x64
 8007924:	81c2      	strh	r2, [r0, #14]
 8007926:	6183      	str	r3, [r0, #24]
 8007928:	4619      	mov	r1, r3
 800792a:	2208      	movs	r2, #8
 800792c:	305c      	adds	r0, #92	@ 0x5c
 800792e:	f000 fa09 	bl	8007d44 <memset>
 8007932:	4b0d      	ldr	r3, [pc, #52]	@ (8007968 <std+0x58>)
 8007934:	6263      	str	r3, [r4, #36]	@ 0x24
 8007936:	4b0d      	ldr	r3, [pc, #52]	@ (800796c <std+0x5c>)
 8007938:	62a3      	str	r3, [r4, #40]	@ 0x28
 800793a:	4b0d      	ldr	r3, [pc, #52]	@ (8007970 <std+0x60>)
 800793c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800793e:	4b0d      	ldr	r3, [pc, #52]	@ (8007974 <std+0x64>)
 8007940:	6323      	str	r3, [r4, #48]	@ 0x30
 8007942:	4b0d      	ldr	r3, [pc, #52]	@ (8007978 <std+0x68>)
 8007944:	6224      	str	r4, [r4, #32]
 8007946:	429c      	cmp	r4, r3
 8007948:	d006      	beq.n	8007958 <std+0x48>
 800794a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800794e:	4294      	cmp	r4, r2
 8007950:	d002      	beq.n	8007958 <std+0x48>
 8007952:	33d0      	adds	r3, #208	@ 0xd0
 8007954:	429c      	cmp	r4, r3
 8007956:	d105      	bne.n	8007964 <std+0x54>
 8007958:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800795c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007960:	f000 ba7c 	b.w	8007e5c <__retarget_lock_init_recursive>
 8007964:	bd10      	pop	{r4, pc}
 8007966:	bf00      	nop
 8007968:	08007b95 	.word	0x08007b95
 800796c:	08007bb7 	.word	0x08007bb7
 8007970:	08007bef 	.word	0x08007bef
 8007974:	08007c13 	.word	0x08007c13
 8007978:	200003c0 	.word	0x200003c0

0800797c <stdio_exit_handler>:
 800797c:	4a02      	ldr	r2, [pc, #8]	@ (8007988 <stdio_exit_handler+0xc>)
 800797e:	4903      	ldr	r1, [pc, #12]	@ (800798c <stdio_exit_handler+0x10>)
 8007980:	4803      	ldr	r0, [pc, #12]	@ (8007990 <stdio_exit_handler+0x14>)
 8007982:	f000 b869 	b.w	8007a58 <_fwalk_sglue>
 8007986:	bf00      	nop
 8007988:	2000001c 	.word	0x2000001c
 800798c:	080098dd 	.word	0x080098dd
 8007990:	2000002c 	.word	0x2000002c

08007994 <cleanup_stdio>:
 8007994:	6841      	ldr	r1, [r0, #4]
 8007996:	4b0c      	ldr	r3, [pc, #48]	@ (80079c8 <cleanup_stdio+0x34>)
 8007998:	4299      	cmp	r1, r3
 800799a:	b510      	push	{r4, lr}
 800799c:	4604      	mov	r4, r0
 800799e:	d001      	beq.n	80079a4 <cleanup_stdio+0x10>
 80079a0:	f001 ff9c 	bl	80098dc <_fflush_r>
 80079a4:	68a1      	ldr	r1, [r4, #8]
 80079a6:	4b09      	ldr	r3, [pc, #36]	@ (80079cc <cleanup_stdio+0x38>)
 80079a8:	4299      	cmp	r1, r3
 80079aa:	d002      	beq.n	80079b2 <cleanup_stdio+0x1e>
 80079ac:	4620      	mov	r0, r4
 80079ae:	f001 ff95 	bl	80098dc <_fflush_r>
 80079b2:	68e1      	ldr	r1, [r4, #12]
 80079b4:	4b06      	ldr	r3, [pc, #24]	@ (80079d0 <cleanup_stdio+0x3c>)
 80079b6:	4299      	cmp	r1, r3
 80079b8:	d004      	beq.n	80079c4 <cleanup_stdio+0x30>
 80079ba:	4620      	mov	r0, r4
 80079bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c0:	f001 bf8c 	b.w	80098dc <_fflush_r>
 80079c4:	bd10      	pop	{r4, pc}
 80079c6:	bf00      	nop
 80079c8:	200003c0 	.word	0x200003c0
 80079cc:	20000428 	.word	0x20000428
 80079d0:	20000490 	.word	0x20000490

080079d4 <global_stdio_init.part.0>:
 80079d4:	b510      	push	{r4, lr}
 80079d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007a04 <global_stdio_init.part.0+0x30>)
 80079d8:	4c0b      	ldr	r4, [pc, #44]	@ (8007a08 <global_stdio_init.part.0+0x34>)
 80079da:	4a0c      	ldr	r2, [pc, #48]	@ (8007a0c <global_stdio_init.part.0+0x38>)
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	4620      	mov	r0, r4
 80079e0:	2200      	movs	r2, #0
 80079e2:	2104      	movs	r1, #4
 80079e4:	f7ff ff94 	bl	8007910 <std>
 80079e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079ec:	2201      	movs	r2, #1
 80079ee:	2109      	movs	r1, #9
 80079f0:	f7ff ff8e 	bl	8007910 <std>
 80079f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079f8:	2202      	movs	r2, #2
 80079fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079fe:	2112      	movs	r1, #18
 8007a00:	f7ff bf86 	b.w	8007910 <std>
 8007a04:	200004f8 	.word	0x200004f8
 8007a08:	200003c0 	.word	0x200003c0
 8007a0c:	0800797d 	.word	0x0800797d

08007a10 <__sfp_lock_acquire>:
 8007a10:	4801      	ldr	r0, [pc, #4]	@ (8007a18 <__sfp_lock_acquire+0x8>)
 8007a12:	f000 ba24 	b.w	8007e5e <__retarget_lock_acquire_recursive>
 8007a16:	bf00      	nop
 8007a18:	20000501 	.word	0x20000501

08007a1c <__sfp_lock_release>:
 8007a1c:	4801      	ldr	r0, [pc, #4]	@ (8007a24 <__sfp_lock_release+0x8>)
 8007a1e:	f000 ba1f 	b.w	8007e60 <__retarget_lock_release_recursive>
 8007a22:	bf00      	nop
 8007a24:	20000501 	.word	0x20000501

08007a28 <__sinit>:
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	f7ff fff0 	bl	8007a10 <__sfp_lock_acquire>
 8007a30:	6a23      	ldr	r3, [r4, #32]
 8007a32:	b11b      	cbz	r3, 8007a3c <__sinit+0x14>
 8007a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a38:	f7ff bff0 	b.w	8007a1c <__sfp_lock_release>
 8007a3c:	4b04      	ldr	r3, [pc, #16]	@ (8007a50 <__sinit+0x28>)
 8007a3e:	6223      	str	r3, [r4, #32]
 8007a40:	4b04      	ldr	r3, [pc, #16]	@ (8007a54 <__sinit+0x2c>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1f5      	bne.n	8007a34 <__sinit+0xc>
 8007a48:	f7ff ffc4 	bl	80079d4 <global_stdio_init.part.0>
 8007a4c:	e7f2      	b.n	8007a34 <__sinit+0xc>
 8007a4e:	bf00      	nop
 8007a50:	08007995 	.word	0x08007995
 8007a54:	200004f8 	.word	0x200004f8

08007a58 <_fwalk_sglue>:
 8007a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	4688      	mov	r8, r1
 8007a60:	4614      	mov	r4, r2
 8007a62:	2600      	movs	r6, #0
 8007a64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a68:	f1b9 0901 	subs.w	r9, r9, #1
 8007a6c:	d505      	bpl.n	8007a7a <_fwalk_sglue+0x22>
 8007a6e:	6824      	ldr	r4, [r4, #0]
 8007a70:	2c00      	cmp	r4, #0
 8007a72:	d1f7      	bne.n	8007a64 <_fwalk_sglue+0xc>
 8007a74:	4630      	mov	r0, r6
 8007a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a7a:	89ab      	ldrh	r3, [r5, #12]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d907      	bls.n	8007a90 <_fwalk_sglue+0x38>
 8007a80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a84:	3301      	adds	r3, #1
 8007a86:	d003      	beq.n	8007a90 <_fwalk_sglue+0x38>
 8007a88:	4629      	mov	r1, r5
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	47c0      	blx	r8
 8007a8e:	4306      	orrs	r6, r0
 8007a90:	3568      	adds	r5, #104	@ 0x68
 8007a92:	e7e9      	b.n	8007a68 <_fwalk_sglue+0x10>

08007a94 <_puts_r>:
 8007a94:	6a03      	ldr	r3, [r0, #32]
 8007a96:	b570      	push	{r4, r5, r6, lr}
 8007a98:	6884      	ldr	r4, [r0, #8]
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	460e      	mov	r6, r1
 8007a9e:	b90b      	cbnz	r3, 8007aa4 <_puts_r+0x10>
 8007aa0:	f7ff ffc2 	bl	8007a28 <__sinit>
 8007aa4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007aa6:	07db      	lsls	r3, r3, #31
 8007aa8:	d405      	bmi.n	8007ab6 <_puts_r+0x22>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	0598      	lsls	r0, r3, #22
 8007aae:	d402      	bmi.n	8007ab6 <_puts_r+0x22>
 8007ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ab2:	f000 f9d4 	bl	8007e5e <__retarget_lock_acquire_recursive>
 8007ab6:	89a3      	ldrh	r3, [r4, #12]
 8007ab8:	0719      	lsls	r1, r3, #28
 8007aba:	d502      	bpl.n	8007ac2 <_puts_r+0x2e>
 8007abc:	6923      	ldr	r3, [r4, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d135      	bne.n	8007b2e <_puts_r+0x9a>
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f000 f8e7 	bl	8007c98 <__swsetup_r>
 8007aca:	b380      	cbz	r0, 8007b2e <_puts_r+0x9a>
 8007acc:	f04f 35ff 	mov.w	r5, #4294967295
 8007ad0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ad2:	07da      	lsls	r2, r3, #31
 8007ad4:	d405      	bmi.n	8007ae2 <_puts_r+0x4e>
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	059b      	lsls	r3, r3, #22
 8007ada:	d402      	bmi.n	8007ae2 <_puts_r+0x4e>
 8007adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ade:	f000 f9bf 	bl	8007e60 <__retarget_lock_release_recursive>
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	bd70      	pop	{r4, r5, r6, pc}
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	da04      	bge.n	8007af4 <_puts_r+0x60>
 8007aea:	69a2      	ldr	r2, [r4, #24]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	dc17      	bgt.n	8007b20 <_puts_r+0x8c>
 8007af0:	290a      	cmp	r1, #10
 8007af2:	d015      	beq.n	8007b20 <_puts_r+0x8c>
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	6022      	str	r2, [r4, #0]
 8007afa:	7019      	strb	r1, [r3, #0]
 8007afc:	68a3      	ldr	r3, [r4, #8]
 8007afe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b02:	3b01      	subs	r3, #1
 8007b04:	60a3      	str	r3, [r4, #8]
 8007b06:	2900      	cmp	r1, #0
 8007b08:	d1ed      	bne.n	8007ae6 <_puts_r+0x52>
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	da11      	bge.n	8007b32 <_puts_r+0x9e>
 8007b0e:	4622      	mov	r2, r4
 8007b10:	210a      	movs	r1, #10
 8007b12:	4628      	mov	r0, r5
 8007b14:	f000 f881 	bl	8007c1a <__swbuf_r>
 8007b18:	3001      	adds	r0, #1
 8007b1a:	d0d7      	beq.n	8007acc <_puts_r+0x38>
 8007b1c:	250a      	movs	r5, #10
 8007b1e:	e7d7      	b.n	8007ad0 <_puts_r+0x3c>
 8007b20:	4622      	mov	r2, r4
 8007b22:	4628      	mov	r0, r5
 8007b24:	f000 f879 	bl	8007c1a <__swbuf_r>
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d1e7      	bne.n	8007afc <_puts_r+0x68>
 8007b2c:	e7ce      	b.n	8007acc <_puts_r+0x38>
 8007b2e:	3e01      	subs	r6, #1
 8007b30:	e7e4      	b.n	8007afc <_puts_r+0x68>
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	1c5a      	adds	r2, r3, #1
 8007b36:	6022      	str	r2, [r4, #0]
 8007b38:	220a      	movs	r2, #10
 8007b3a:	701a      	strb	r2, [r3, #0]
 8007b3c:	e7ee      	b.n	8007b1c <_puts_r+0x88>
	...

08007b40 <puts>:
 8007b40:	4b02      	ldr	r3, [pc, #8]	@ (8007b4c <puts+0xc>)
 8007b42:	4601      	mov	r1, r0
 8007b44:	6818      	ldr	r0, [r3, #0]
 8007b46:	f7ff bfa5 	b.w	8007a94 <_puts_r>
 8007b4a:	bf00      	nop
 8007b4c:	20000028 	.word	0x20000028

08007b50 <siprintf>:
 8007b50:	b40e      	push	{r1, r2, r3}
 8007b52:	b510      	push	{r4, lr}
 8007b54:	b09d      	sub	sp, #116	@ 0x74
 8007b56:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007b58:	9002      	str	r0, [sp, #8]
 8007b5a:	9006      	str	r0, [sp, #24]
 8007b5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007b60:	480a      	ldr	r0, [pc, #40]	@ (8007b8c <siprintf+0x3c>)
 8007b62:	9107      	str	r1, [sp, #28]
 8007b64:	9104      	str	r1, [sp, #16]
 8007b66:	490a      	ldr	r1, [pc, #40]	@ (8007b90 <siprintf+0x40>)
 8007b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b6c:	9105      	str	r1, [sp, #20]
 8007b6e:	2400      	movs	r4, #0
 8007b70:	a902      	add	r1, sp, #8
 8007b72:	6800      	ldr	r0, [r0, #0]
 8007b74:	9301      	str	r3, [sp, #4]
 8007b76:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007b78:	f001 fbee 	bl	8009358 <_svfiprintf_r>
 8007b7c:	9b02      	ldr	r3, [sp, #8]
 8007b7e:	701c      	strb	r4, [r3, #0]
 8007b80:	b01d      	add	sp, #116	@ 0x74
 8007b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b86:	b003      	add	sp, #12
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	20000028 	.word	0x20000028
 8007b90:	ffff0208 	.word	0xffff0208

08007b94 <__sread>:
 8007b94:	b510      	push	{r4, lr}
 8007b96:	460c      	mov	r4, r1
 8007b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9c:	f000 f900 	bl	8007da0 <_read_r>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	bfab      	itete	ge
 8007ba4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ba8:	181b      	addge	r3, r3, r0
 8007baa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bae:	bfac      	ite	ge
 8007bb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bb2:	81a3      	strhlt	r3, [r4, #12]
 8007bb4:	bd10      	pop	{r4, pc}

08007bb6 <__swrite>:
 8007bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bba:	461f      	mov	r7, r3
 8007bbc:	898b      	ldrh	r3, [r1, #12]
 8007bbe:	05db      	lsls	r3, r3, #23
 8007bc0:	4605      	mov	r5, r0
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	4616      	mov	r6, r2
 8007bc6:	d505      	bpl.n	8007bd4 <__swrite+0x1e>
 8007bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bcc:	2302      	movs	r3, #2
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f000 f8d4 	bl	8007d7c <_lseek_r>
 8007bd4:	89a3      	ldrh	r3, [r4, #12]
 8007bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bde:	81a3      	strh	r3, [r4, #12]
 8007be0:	4632      	mov	r2, r6
 8007be2:	463b      	mov	r3, r7
 8007be4:	4628      	mov	r0, r5
 8007be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bea:	f000 b8fb 	b.w	8007de4 <_write_r>

08007bee <__sseek>:
 8007bee:	b510      	push	{r4, lr}
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf6:	f000 f8c1 	bl	8007d7c <_lseek_r>
 8007bfa:	1c43      	adds	r3, r0, #1
 8007bfc:	89a3      	ldrh	r3, [r4, #12]
 8007bfe:	bf15      	itete	ne
 8007c00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c0a:	81a3      	strheq	r3, [r4, #12]
 8007c0c:	bf18      	it	ne
 8007c0e:	81a3      	strhne	r3, [r4, #12]
 8007c10:	bd10      	pop	{r4, pc}

08007c12 <__sclose>:
 8007c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c16:	f000 b8a1 	b.w	8007d5c <_close_r>

08007c1a <__swbuf_r>:
 8007c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1c:	460e      	mov	r6, r1
 8007c1e:	4614      	mov	r4, r2
 8007c20:	4605      	mov	r5, r0
 8007c22:	b118      	cbz	r0, 8007c2c <__swbuf_r+0x12>
 8007c24:	6a03      	ldr	r3, [r0, #32]
 8007c26:	b90b      	cbnz	r3, 8007c2c <__swbuf_r+0x12>
 8007c28:	f7ff fefe 	bl	8007a28 <__sinit>
 8007c2c:	69a3      	ldr	r3, [r4, #24]
 8007c2e:	60a3      	str	r3, [r4, #8]
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	071a      	lsls	r2, r3, #28
 8007c34:	d501      	bpl.n	8007c3a <__swbuf_r+0x20>
 8007c36:	6923      	ldr	r3, [r4, #16]
 8007c38:	b943      	cbnz	r3, 8007c4c <__swbuf_r+0x32>
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f000 f82b 	bl	8007c98 <__swsetup_r>
 8007c42:	b118      	cbz	r0, 8007c4c <__swbuf_r+0x32>
 8007c44:	f04f 37ff 	mov.w	r7, #4294967295
 8007c48:	4638      	mov	r0, r7
 8007c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	6922      	ldr	r2, [r4, #16]
 8007c50:	1a98      	subs	r0, r3, r2
 8007c52:	6963      	ldr	r3, [r4, #20]
 8007c54:	b2f6      	uxtb	r6, r6
 8007c56:	4283      	cmp	r3, r0
 8007c58:	4637      	mov	r7, r6
 8007c5a:	dc05      	bgt.n	8007c68 <__swbuf_r+0x4e>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f001 fe3c 	bl	80098dc <_fflush_r>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d1ed      	bne.n	8007c44 <__swbuf_r+0x2a>
 8007c68:	68a3      	ldr	r3, [r4, #8]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	60a3      	str	r3, [r4, #8]
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	1c5a      	adds	r2, r3, #1
 8007c72:	6022      	str	r2, [r4, #0]
 8007c74:	701e      	strb	r6, [r3, #0]
 8007c76:	6962      	ldr	r2, [r4, #20]
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d004      	beq.n	8007c88 <__swbuf_r+0x6e>
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	07db      	lsls	r3, r3, #31
 8007c82:	d5e1      	bpl.n	8007c48 <__swbuf_r+0x2e>
 8007c84:	2e0a      	cmp	r6, #10
 8007c86:	d1df      	bne.n	8007c48 <__swbuf_r+0x2e>
 8007c88:	4621      	mov	r1, r4
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	f001 fe26 	bl	80098dc <_fflush_r>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d0d9      	beq.n	8007c48 <__swbuf_r+0x2e>
 8007c94:	e7d6      	b.n	8007c44 <__swbuf_r+0x2a>
	...

08007c98 <__swsetup_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	4b29      	ldr	r3, [pc, #164]	@ (8007d40 <__swsetup_r+0xa8>)
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	6818      	ldr	r0, [r3, #0]
 8007ca0:	460c      	mov	r4, r1
 8007ca2:	b118      	cbz	r0, 8007cac <__swsetup_r+0x14>
 8007ca4:	6a03      	ldr	r3, [r0, #32]
 8007ca6:	b90b      	cbnz	r3, 8007cac <__swsetup_r+0x14>
 8007ca8:	f7ff febe 	bl	8007a28 <__sinit>
 8007cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cb0:	0719      	lsls	r1, r3, #28
 8007cb2:	d422      	bmi.n	8007cfa <__swsetup_r+0x62>
 8007cb4:	06da      	lsls	r2, r3, #27
 8007cb6:	d407      	bmi.n	8007cc8 <__swsetup_r+0x30>
 8007cb8:	2209      	movs	r2, #9
 8007cba:	602a      	str	r2, [r5, #0]
 8007cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cc0:	81a3      	strh	r3, [r4, #12]
 8007cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc6:	e033      	b.n	8007d30 <__swsetup_r+0x98>
 8007cc8:	0758      	lsls	r0, r3, #29
 8007cca:	d512      	bpl.n	8007cf2 <__swsetup_r+0x5a>
 8007ccc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cce:	b141      	cbz	r1, 8007ce2 <__swsetup_r+0x4a>
 8007cd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cd4:	4299      	cmp	r1, r3
 8007cd6:	d002      	beq.n	8007cde <__swsetup_r+0x46>
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f000 ff1d 	bl	8008b18 <_free_r>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	2300      	movs	r3, #0
 8007cec:	6063      	str	r3, [r4, #4]
 8007cee:	6923      	ldr	r3, [r4, #16]
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	f043 0308 	orr.w	r3, r3, #8
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	6923      	ldr	r3, [r4, #16]
 8007cfc:	b94b      	cbnz	r3, 8007d12 <__swsetup_r+0x7a>
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d08:	d003      	beq.n	8007d12 <__swsetup_r+0x7a>
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	f001 fe33 	bl	8009978 <__smakebuf_r>
 8007d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d16:	f013 0201 	ands.w	r2, r3, #1
 8007d1a:	d00a      	beq.n	8007d32 <__swsetup_r+0x9a>
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	60a2      	str	r2, [r4, #8]
 8007d20:	6962      	ldr	r2, [r4, #20]
 8007d22:	4252      	negs	r2, r2
 8007d24:	61a2      	str	r2, [r4, #24]
 8007d26:	6922      	ldr	r2, [r4, #16]
 8007d28:	b942      	cbnz	r2, 8007d3c <__swsetup_r+0xa4>
 8007d2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d2e:	d1c5      	bne.n	8007cbc <__swsetup_r+0x24>
 8007d30:	bd38      	pop	{r3, r4, r5, pc}
 8007d32:	0799      	lsls	r1, r3, #30
 8007d34:	bf58      	it	pl
 8007d36:	6962      	ldrpl	r2, [r4, #20]
 8007d38:	60a2      	str	r2, [r4, #8]
 8007d3a:	e7f4      	b.n	8007d26 <__swsetup_r+0x8e>
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	e7f7      	b.n	8007d30 <__swsetup_r+0x98>
 8007d40:	20000028 	.word	0x20000028

08007d44 <memset>:
 8007d44:	4402      	add	r2, r0
 8007d46:	4603      	mov	r3, r0
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d100      	bne.n	8007d4e <memset+0xa>
 8007d4c:	4770      	bx	lr
 8007d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d52:	e7f9      	b.n	8007d48 <memset+0x4>

08007d54 <_localeconv_r>:
 8007d54:	4800      	ldr	r0, [pc, #0]	@ (8007d58 <_localeconv_r+0x4>)
 8007d56:	4770      	bx	lr
 8007d58:	20000168 	.word	0x20000168

08007d5c <_close_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d06      	ldr	r5, [pc, #24]	@ (8007d78 <_close_r+0x1c>)
 8007d60:	2300      	movs	r3, #0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4608      	mov	r0, r1
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	f7fb fab5 	bl	80032d6 <_close>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_close_r+0x1a>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_close_r+0x1a>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	200004fc 	.word	0x200004fc

08007d7c <_lseek_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4d07      	ldr	r5, [pc, #28]	@ (8007d9c <_lseek_r+0x20>)
 8007d80:	4604      	mov	r4, r0
 8007d82:	4608      	mov	r0, r1
 8007d84:	4611      	mov	r1, r2
 8007d86:	2200      	movs	r2, #0
 8007d88:	602a      	str	r2, [r5, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f7fb faca 	bl	8003324 <_lseek>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_lseek_r+0x1e>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_lseek_r+0x1e>
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	200004fc 	.word	0x200004fc

08007da0 <_read_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4d07      	ldr	r5, [pc, #28]	@ (8007dc0 <_read_r+0x20>)
 8007da4:	4604      	mov	r4, r0
 8007da6:	4608      	mov	r0, r1
 8007da8:	4611      	mov	r1, r2
 8007daa:	2200      	movs	r2, #0
 8007dac:	602a      	str	r2, [r5, #0]
 8007dae:	461a      	mov	r2, r3
 8007db0:	f7fb fa58 	bl	8003264 <_read>
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	d102      	bne.n	8007dbe <_read_r+0x1e>
 8007db8:	682b      	ldr	r3, [r5, #0]
 8007dba:	b103      	cbz	r3, 8007dbe <_read_r+0x1e>
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	200004fc 	.word	0x200004fc

08007dc4 <_sbrk_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4d06      	ldr	r5, [pc, #24]	@ (8007de0 <_sbrk_r+0x1c>)
 8007dc8:	2300      	movs	r3, #0
 8007dca:	4604      	mov	r4, r0
 8007dcc:	4608      	mov	r0, r1
 8007dce:	602b      	str	r3, [r5, #0]
 8007dd0:	f7fb fab6 	bl	8003340 <_sbrk>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d102      	bne.n	8007dde <_sbrk_r+0x1a>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	b103      	cbz	r3, 8007dde <_sbrk_r+0x1a>
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
 8007de0:	200004fc 	.word	0x200004fc

08007de4 <_write_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4d07      	ldr	r5, [pc, #28]	@ (8007e04 <_write_r+0x20>)
 8007de8:	4604      	mov	r4, r0
 8007dea:	4608      	mov	r0, r1
 8007dec:	4611      	mov	r1, r2
 8007dee:	2200      	movs	r2, #0
 8007df0:	602a      	str	r2, [r5, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	f7fb fa53 	bl	800329e <_write>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_write_r+0x1e>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_write_r+0x1e>
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	200004fc 	.word	0x200004fc

08007e08 <__errno>:
 8007e08:	4b01      	ldr	r3, [pc, #4]	@ (8007e10 <__errno+0x8>)
 8007e0a:	6818      	ldr	r0, [r3, #0]
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	20000028 	.word	0x20000028

08007e14 <__libc_init_array>:
 8007e14:	b570      	push	{r4, r5, r6, lr}
 8007e16:	4d0d      	ldr	r5, [pc, #52]	@ (8007e4c <__libc_init_array+0x38>)
 8007e18:	4c0d      	ldr	r4, [pc, #52]	@ (8007e50 <__libc_init_array+0x3c>)
 8007e1a:	1b64      	subs	r4, r4, r5
 8007e1c:	10a4      	asrs	r4, r4, #2
 8007e1e:	2600      	movs	r6, #0
 8007e20:	42a6      	cmp	r6, r4
 8007e22:	d109      	bne.n	8007e38 <__libc_init_array+0x24>
 8007e24:	4d0b      	ldr	r5, [pc, #44]	@ (8007e54 <__libc_init_array+0x40>)
 8007e26:	4c0c      	ldr	r4, [pc, #48]	@ (8007e58 <__libc_init_array+0x44>)
 8007e28:	f002 fe70 	bl	800ab0c <_init>
 8007e2c:	1b64      	subs	r4, r4, r5
 8007e2e:	10a4      	asrs	r4, r4, #2
 8007e30:	2600      	movs	r6, #0
 8007e32:	42a6      	cmp	r6, r4
 8007e34:	d105      	bne.n	8007e42 <__libc_init_array+0x2e>
 8007e36:	bd70      	pop	{r4, r5, r6, pc}
 8007e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e3c:	4798      	blx	r3
 8007e3e:	3601      	adds	r6, #1
 8007e40:	e7ee      	b.n	8007e20 <__libc_init_array+0xc>
 8007e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e46:	4798      	blx	r3
 8007e48:	3601      	adds	r6, #1
 8007e4a:	e7f2      	b.n	8007e32 <__libc_init_array+0x1e>
 8007e4c:	0800cdb8 	.word	0x0800cdb8
 8007e50:	0800cdb8 	.word	0x0800cdb8
 8007e54:	0800cdb8 	.word	0x0800cdb8
 8007e58:	0800cdbc 	.word	0x0800cdbc

08007e5c <__retarget_lock_init_recursive>:
 8007e5c:	4770      	bx	lr

08007e5e <__retarget_lock_acquire_recursive>:
 8007e5e:	4770      	bx	lr

08007e60 <__retarget_lock_release_recursive>:
 8007e60:	4770      	bx	lr

08007e62 <quorem>:
 8007e62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e66:	6903      	ldr	r3, [r0, #16]
 8007e68:	690c      	ldr	r4, [r1, #16]
 8007e6a:	42a3      	cmp	r3, r4
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	db7e      	blt.n	8007f6e <quorem+0x10c>
 8007e70:	3c01      	subs	r4, #1
 8007e72:	f101 0814 	add.w	r8, r1, #20
 8007e76:	00a3      	lsls	r3, r4, #2
 8007e78:	f100 0514 	add.w	r5, r0, #20
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e82:	9301      	str	r3, [sp, #4]
 8007e84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e94:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e98:	d32e      	bcc.n	8007ef8 <quorem+0x96>
 8007e9a:	f04f 0a00 	mov.w	sl, #0
 8007e9e:	46c4      	mov	ip, r8
 8007ea0:	46ae      	mov	lr, r5
 8007ea2:	46d3      	mov	fp, sl
 8007ea4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ea8:	b298      	uxth	r0, r3
 8007eaa:	fb06 a000 	mla	r0, r6, r0, sl
 8007eae:	0c02      	lsrs	r2, r0, #16
 8007eb0:	0c1b      	lsrs	r3, r3, #16
 8007eb2:	fb06 2303 	mla	r3, r6, r3, r2
 8007eb6:	f8de 2000 	ldr.w	r2, [lr]
 8007eba:	b280      	uxth	r0, r0
 8007ebc:	b292      	uxth	r2, r2
 8007ebe:	1a12      	subs	r2, r2, r0
 8007ec0:	445a      	add	r2, fp
 8007ec2:	f8de 0000 	ldr.w	r0, [lr]
 8007ec6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007ed0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007ed4:	b292      	uxth	r2, r2
 8007ed6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007eda:	45e1      	cmp	r9, ip
 8007edc:	f84e 2b04 	str.w	r2, [lr], #4
 8007ee0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007ee4:	d2de      	bcs.n	8007ea4 <quorem+0x42>
 8007ee6:	9b00      	ldr	r3, [sp, #0]
 8007ee8:	58eb      	ldr	r3, [r5, r3]
 8007eea:	b92b      	cbnz	r3, 8007ef8 <quorem+0x96>
 8007eec:	9b01      	ldr	r3, [sp, #4]
 8007eee:	3b04      	subs	r3, #4
 8007ef0:	429d      	cmp	r5, r3
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	d32f      	bcc.n	8007f56 <quorem+0xf4>
 8007ef6:	613c      	str	r4, [r7, #16]
 8007ef8:	4638      	mov	r0, r7
 8007efa:	f001 f8c9 	bl	8009090 <__mcmp>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	db25      	blt.n	8007f4e <quorem+0xec>
 8007f02:	4629      	mov	r1, r5
 8007f04:	2000      	movs	r0, #0
 8007f06:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f0a:	f8d1 c000 	ldr.w	ip, [r1]
 8007f0e:	fa1f fe82 	uxth.w	lr, r2
 8007f12:	fa1f f38c 	uxth.w	r3, ip
 8007f16:	eba3 030e 	sub.w	r3, r3, lr
 8007f1a:	4403      	add	r3, r0
 8007f1c:	0c12      	lsrs	r2, r2, #16
 8007f1e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007f22:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f2c:	45c1      	cmp	r9, r8
 8007f2e:	f841 3b04 	str.w	r3, [r1], #4
 8007f32:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007f36:	d2e6      	bcs.n	8007f06 <quorem+0xa4>
 8007f38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f40:	b922      	cbnz	r2, 8007f4c <quorem+0xea>
 8007f42:	3b04      	subs	r3, #4
 8007f44:	429d      	cmp	r5, r3
 8007f46:	461a      	mov	r2, r3
 8007f48:	d30b      	bcc.n	8007f62 <quorem+0x100>
 8007f4a:	613c      	str	r4, [r7, #16]
 8007f4c:	3601      	adds	r6, #1
 8007f4e:	4630      	mov	r0, r6
 8007f50:	b003      	add	sp, #12
 8007f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f56:	6812      	ldr	r2, [r2, #0]
 8007f58:	3b04      	subs	r3, #4
 8007f5a:	2a00      	cmp	r2, #0
 8007f5c:	d1cb      	bne.n	8007ef6 <quorem+0x94>
 8007f5e:	3c01      	subs	r4, #1
 8007f60:	e7c6      	b.n	8007ef0 <quorem+0x8e>
 8007f62:	6812      	ldr	r2, [r2, #0]
 8007f64:	3b04      	subs	r3, #4
 8007f66:	2a00      	cmp	r2, #0
 8007f68:	d1ef      	bne.n	8007f4a <quorem+0xe8>
 8007f6a:	3c01      	subs	r4, #1
 8007f6c:	e7ea      	b.n	8007f44 <quorem+0xe2>
 8007f6e:	2000      	movs	r0, #0
 8007f70:	e7ee      	b.n	8007f50 <quorem+0xee>
 8007f72:	0000      	movs	r0, r0
 8007f74:	0000      	movs	r0, r0
	...

08007f78 <_dtoa_r>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	69c7      	ldr	r7, [r0, #28]
 8007f7e:	b097      	sub	sp, #92	@ 0x5c
 8007f80:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007f84:	ec55 4b10 	vmov	r4, r5, d0
 8007f88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007f8a:	9107      	str	r1, [sp, #28]
 8007f8c:	4681      	mov	r9, r0
 8007f8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007f90:	9311      	str	r3, [sp, #68]	@ 0x44
 8007f92:	b97f      	cbnz	r7, 8007fb4 <_dtoa_r+0x3c>
 8007f94:	2010      	movs	r0, #16
 8007f96:	f7fe ffaf 	bl	8006ef8 <malloc>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007fa0:	b920      	cbnz	r0, 8007fac <_dtoa_r+0x34>
 8007fa2:	4ba9      	ldr	r3, [pc, #676]	@ (8008248 <_dtoa_r+0x2d0>)
 8007fa4:	21ef      	movs	r1, #239	@ 0xef
 8007fa6:	48a9      	ldr	r0, [pc, #676]	@ (800824c <_dtoa_r+0x2d4>)
 8007fa8:	f001 fd6c 	bl	8009a84 <__assert_func>
 8007fac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007fb0:	6007      	str	r7, [r0, #0]
 8007fb2:	60c7      	str	r7, [r0, #12]
 8007fb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007fb8:	6819      	ldr	r1, [r3, #0]
 8007fba:	b159      	cbz	r1, 8007fd4 <_dtoa_r+0x5c>
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	604a      	str	r2, [r1, #4]
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	4093      	lsls	r3, r2
 8007fc4:	608b      	str	r3, [r1, #8]
 8007fc6:	4648      	mov	r0, r9
 8007fc8:	f000 fe30 	bl	8008c2c <_Bfree>
 8007fcc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	1e2b      	subs	r3, r5, #0
 8007fd6:	bfb9      	ittee	lt
 8007fd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007fdc:	9305      	strlt	r3, [sp, #20]
 8007fde:	2300      	movge	r3, #0
 8007fe0:	6033      	strge	r3, [r6, #0]
 8007fe2:	9f05      	ldr	r7, [sp, #20]
 8007fe4:	4b9a      	ldr	r3, [pc, #616]	@ (8008250 <_dtoa_r+0x2d8>)
 8007fe6:	bfbc      	itt	lt
 8007fe8:	2201      	movlt	r2, #1
 8007fea:	6032      	strlt	r2, [r6, #0]
 8007fec:	43bb      	bics	r3, r7
 8007fee:	d112      	bne.n	8008016 <_dtoa_r+0x9e>
 8007ff0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007ff2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ffc:	4323      	orrs	r3, r4
 8007ffe:	f000 855a 	beq.w	8008ab6 <_dtoa_r+0xb3e>
 8008002:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008004:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008264 <_dtoa_r+0x2ec>
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 855c 	beq.w	8008ac6 <_dtoa_r+0xb4e>
 800800e:	f10a 0303 	add.w	r3, sl, #3
 8008012:	f000 bd56 	b.w	8008ac2 <_dtoa_r+0xb4a>
 8008016:	ed9d 7b04 	vldr	d7, [sp, #16]
 800801a:	2200      	movs	r2, #0
 800801c:	ec51 0b17 	vmov	r0, r1, d7
 8008020:	2300      	movs	r3, #0
 8008022:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008026:	f7f8 fd4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800802a:	4680      	mov	r8, r0
 800802c:	b158      	cbz	r0, 8008046 <_dtoa_r+0xce>
 800802e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008030:	2301      	movs	r3, #1
 8008032:	6013      	str	r3, [r2, #0]
 8008034:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008036:	b113      	cbz	r3, 800803e <_dtoa_r+0xc6>
 8008038:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800803a:	4b86      	ldr	r3, [pc, #536]	@ (8008254 <_dtoa_r+0x2dc>)
 800803c:	6013      	str	r3, [r2, #0]
 800803e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008268 <_dtoa_r+0x2f0>
 8008042:	f000 bd40 	b.w	8008ac6 <_dtoa_r+0xb4e>
 8008046:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800804a:	aa14      	add	r2, sp, #80	@ 0x50
 800804c:	a915      	add	r1, sp, #84	@ 0x54
 800804e:	4648      	mov	r0, r9
 8008050:	f001 f8ce 	bl	80091f0 <__d2b>
 8008054:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008058:	9002      	str	r0, [sp, #8]
 800805a:	2e00      	cmp	r6, #0
 800805c:	d078      	beq.n	8008150 <_dtoa_r+0x1d8>
 800805e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008060:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008068:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800806c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008070:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008074:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008078:	4619      	mov	r1, r3
 800807a:	2200      	movs	r2, #0
 800807c:	4b76      	ldr	r3, [pc, #472]	@ (8008258 <_dtoa_r+0x2e0>)
 800807e:	f7f8 f903 	bl	8000288 <__aeabi_dsub>
 8008082:	a36b      	add	r3, pc, #428	@ (adr r3, 8008230 <_dtoa_r+0x2b8>)
 8008084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008088:	f7f8 fab6 	bl	80005f8 <__aeabi_dmul>
 800808c:	a36a      	add	r3, pc, #424	@ (adr r3, 8008238 <_dtoa_r+0x2c0>)
 800808e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008092:	f7f8 f8fb 	bl	800028c <__adddf3>
 8008096:	4604      	mov	r4, r0
 8008098:	4630      	mov	r0, r6
 800809a:	460d      	mov	r5, r1
 800809c:	f7f8 fa42 	bl	8000524 <__aeabi_i2d>
 80080a0:	a367      	add	r3, pc, #412	@ (adr r3, 8008240 <_dtoa_r+0x2c8>)
 80080a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a6:	f7f8 faa7 	bl	80005f8 <__aeabi_dmul>
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	4620      	mov	r0, r4
 80080b0:	4629      	mov	r1, r5
 80080b2:	f7f8 f8eb 	bl	800028c <__adddf3>
 80080b6:	4604      	mov	r4, r0
 80080b8:	460d      	mov	r5, r1
 80080ba:	f7f8 fd4d 	bl	8000b58 <__aeabi_d2iz>
 80080be:	2200      	movs	r2, #0
 80080c0:	4607      	mov	r7, r0
 80080c2:	2300      	movs	r3, #0
 80080c4:	4620      	mov	r0, r4
 80080c6:	4629      	mov	r1, r5
 80080c8:	f7f8 fd08 	bl	8000adc <__aeabi_dcmplt>
 80080cc:	b140      	cbz	r0, 80080e0 <_dtoa_r+0x168>
 80080ce:	4638      	mov	r0, r7
 80080d0:	f7f8 fa28 	bl	8000524 <__aeabi_i2d>
 80080d4:	4622      	mov	r2, r4
 80080d6:	462b      	mov	r3, r5
 80080d8:	f7f8 fcf6 	bl	8000ac8 <__aeabi_dcmpeq>
 80080dc:	b900      	cbnz	r0, 80080e0 <_dtoa_r+0x168>
 80080de:	3f01      	subs	r7, #1
 80080e0:	2f16      	cmp	r7, #22
 80080e2:	d852      	bhi.n	800818a <_dtoa_r+0x212>
 80080e4:	4b5d      	ldr	r3, [pc, #372]	@ (800825c <_dtoa_r+0x2e4>)
 80080e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80080f2:	f7f8 fcf3 	bl	8000adc <__aeabi_dcmplt>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d049      	beq.n	800818e <_dtoa_r+0x216>
 80080fa:	3f01      	subs	r7, #1
 80080fc:	2300      	movs	r3, #0
 80080fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8008100:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008102:	1b9b      	subs	r3, r3, r6
 8008104:	1e5a      	subs	r2, r3, #1
 8008106:	bf45      	ittet	mi
 8008108:	f1c3 0301 	rsbmi	r3, r3, #1
 800810c:	9300      	strmi	r3, [sp, #0]
 800810e:	2300      	movpl	r3, #0
 8008110:	2300      	movmi	r3, #0
 8008112:	9206      	str	r2, [sp, #24]
 8008114:	bf54      	ite	pl
 8008116:	9300      	strpl	r3, [sp, #0]
 8008118:	9306      	strmi	r3, [sp, #24]
 800811a:	2f00      	cmp	r7, #0
 800811c:	db39      	blt.n	8008192 <_dtoa_r+0x21a>
 800811e:	9b06      	ldr	r3, [sp, #24]
 8008120:	970d      	str	r7, [sp, #52]	@ 0x34
 8008122:	443b      	add	r3, r7
 8008124:	9306      	str	r3, [sp, #24]
 8008126:	2300      	movs	r3, #0
 8008128:	9308      	str	r3, [sp, #32]
 800812a:	9b07      	ldr	r3, [sp, #28]
 800812c:	2b09      	cmp	r3, #9
 800812e:	d863      	bhi.n	80081f8 <_dtoa_r+0x280>
 8008130:	2b05      	cmp	r3, #5
 8008132:	bfc4      	itt	gt
 8008134:	3b04      	subgt	r3, #4
 8008136:	9307      	strgt	r3, [sp, #28]
 8008138:	9b07      	ldr	r3, [sp, #28]
 800813a:	f1a3 0302 	sub.w	r3, r3, #2
 800813e:	bfcc      	ite	gt
 8008140:	2400      	movgt	r4, #0
 8008142:	2401      	movle	r4, #1
 8008144:	2b03      	cmp	r3, #3
 8008146:	d863      	bhi.n	8008210 <_dtoa_r+0x298>
 8008148:	e8df f003 	tbb	[pc, r3]
 800814c:	2b375452 	.word	0x2b375452
 8008150:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008154:	441e      	add	r6, r3
 8008156:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800815a:	2b20      	cmp	r3, #32
 800815c:	bfc1      	itttt	gt
 800815e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008162:	409f      	lslgt	r7, r3
 8008164:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008168:	fa24 f303 	lsrgt.w	r3, r4, r3
 800816c:	bfd6      	itet	le
 800816e:	f1c3 0320 	rsble	r3, r3, #32
 8008172:	ea47 0003 	orrgt.w	r0, r7, r3
 8008176:	fa04 f003 	lslle.w	r0, r4, r3
 800817a:	f7f8 f9c3 	bl	8000504 <__aeabi_ui2d>
 800817e:	2201      	movs	r2, #1
 8008180:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008184:	3e01      	subs	r6, #1
 8008186:	9212      	str	r2, [sp, #72]	@ 0x48
 8008188:	e776      	b.n	8008078 <_dtoa_r+0x100>
 800818a:	2301      	movs	r3, #1
 800818c:	e7b7      	b.n	80080fe <_dtoa_r+0x186>
 800818e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008190:	e7b6      	b.n	8008100 <_dtoa_r+0x188>
 8008192:	9b00      	ldr	r3, [sp, #0]
 8008194:	1bdb      	subs	r3, r3, r7
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	427b      	negs	r3, r7
 800819a:	9308      	str	r3, [sp, #32]
 800819c:	2300      	movs	r3, #0
 800819e:	930d      	str	r3, [sp, #52]	@ 0x34
 80081a0:	e7c3      	b.n	800812a <_dtoa_r+0x1b2>
 80081a2:	2301      	movs	r3, #1
 80081a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081a8:	eb07 0b03 	add.w	fp, r7, r3
 80081ac:	f10b 0301 	add.w	r3, fp, #1
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	9303      	str	r3, [sp, #12]
 80081b4:	bfb8      	it	lt
 80081b6:	2301      	movlt	r3, #1
 80081b8:	e006      	b.n	80081c8 <_dtoa_r+0x250>
 80081ba:	2301      	movs	r3, #1
 80081bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80081be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	dd28      	ble.n	8008216 <_dtoa_r+0x29e>
 80081c4:	469b      	mov	fp, r3
 80081c6:	9303      	str	r3, [sp, #12]
 80081c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80081cc:	2100      	movs	r1, #0
 80081ce:	2204      	movs	r2, #4
 80081d0:	f102 0514 	add.w	r5, r2, #20
 80081d4:	429d      	cmp	r5, r3
 80081d6:	d926      	bls.n	8008226 <_dtoa_r+0x2ae>
 80081d8:	6041      	str	r1, [r0, #4]
 80081da:	4648      	mov	r0, r9
 80081dc:	f000 fce6 	bl	8008bac <_Balloc>
 80081e0:	4682      	mov	sl, r0
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d142      	bne.n	800826c <_dtoa_r+0x2f4>
 80081e6:	4b1e      	ldr	r3, [pc, #120]	@ (8008260 <_dtoa_r+0x2e8>)
 80081e8:	4602      	mov	r2, r0
 80081ea:	f240 11af 	movw	r1, #431	@ 0x1af
 80081ee:	e6da      	b.n	8007fa6 <_dtoa_r+0x2e>
 80081f0:	2300      	movs	r3, #0
 80081f2:	e7e3      	b.n	80081bc <_dtoa_r+0x244>
 80081f4:	2300      	movs	r3, #0
 80081f6:	e7d5      	b.n	80081a4 <_dtoa_r+0x22c>
 80081f8:	2401      	movs	r4, #1
 80081fa:	2300      	movs	r3, #0
 80081fc:	9307      	str	r3, [sp, #28]
 80081fe:	9409      	str	r4, [sp, #36]	@ 0x24
 8008200:	f04f 3bff 	mov.w	fp, #4294967295
 8008204:	2200      	movs	r2, #0
 8008206:	f8cd b00c 	str.w	fp, [sp, #12]
 800820a:	2312      	movs	r3, #18
 800820c:	920c      	str	r2, [sp, #48]	@ 0x30
 800820e:	e7db      	b.n	80081c8 <_dtoa_r+0x250>
 8008210:	2301      	movs	r3, #1
 8008212:	9309      	str	r3, [sp, #36]	@ 0x24
 8008214:	e7f4      	b.n	8008200 <_dtoa_r+0x288>
 8008216:	f04f 0b01 	mov.w	fp, #1
 800821a:	f8cd b00c 	str.w	fp, [sp, #12]
 800821e:	465b      	mov	r3, fp
 8008220:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008224:	e7d0      	b.n	80081c8 <_dtoa_r+0x250>
 8008226:	3101      	adds	r1, #1
 8008228:	0052      	lsls	r2, r2, #1
 800822a:	e7d1      	b.n	80081d0 <_dtoa_r+0x258>
 800822c:	f3af 8000 	nop.w
 8008230:	636f4361 	.word	0x636f4361
 8008234:	3fd287a7 	.word	0x3fd287a7
 8008238:	8b60c8b3 	.word	0x8b60c8b3
 800823c:	3fc68a28 	.word	0x3fc68a28
 8008240:	509f79fb 	.word	0x509f79fb
 8008244:	3fd34413 	.word	0x3fd34413
 8008248:	0800ca39 	.word	0x0800ca39
 800824c:	0800ca50 	.word	0x0800ca50
 8008250:	7ff00000 	.word	0x7ff00000
 8008254:	0800ca09 	.word	0x0800ca09
 8008258:	3ff80000 	.word	0x3ff80000
 800825c:	0800cba0 	.word	0x0800cba0
 8008260:	0800caa8 	.word	0x0800caa8
 8008264:	0800ca35 	.word	0x0800ca35
 8008268:	0800ca08 	.word	0x0800ca08
 800826c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008270:	6018      	str	r0, [r3, #0]
 8008272:	9b03      	ldr	r3, [sp, #12]
 8008274:	2b0e      	cmp	r3, #14
 8008276:	f200 80a1 	bhi.w	80083bc <_dtoa_r+0x444>
 800827a:	2c00      	cmp	r4, #0
 800827c:	f000 809e 	beq.w	80083bc <_dtoa_r+0x444>
 8008280:	2f00      	cmp	r7, #0
 8008282:	dd33      	ble.n	80082ec <_dtoa_r+0x374>
 8008284:	4b9c      	ldr	r3, [pc, #624]	@ (80084f8 <_dtoa_r+0x580>)
 8008286:	f007 020f 	and.w	r2, r7, #15
 800828a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800828e:	ed93 7b00 	vldr	d7, [r3]
 8008292:	05f8      	lsls	r0, r7, #23
 8008294:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008298:	ea4f 1427 	mov.w	r4, r7, asr #4
 800829c:	d516      	bpl.n	80082cc <_dtoa_r+0x354>
 800829e:	4b97      	ldr	r3, [pc, #604]	@ (80084fc <_dtoa_r+0x584>)
 80082a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082a8:	f7f8 fad0 	bl	800084c <__aeabi_ddiv>
 80082ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082b0:	f004 040f 	and.w	r4, r4, #15
 80082b4:	2603      	movs	r6, #3
 80082b6:	4d91      	ldr	r5, [pc, #580]	@ (80084fc <_dtoa_r+0x584>)
 80082b8:	b954      	cbnz	r4, 80082d0 <_dtoa_r+0x358>
 80082ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80082be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082c2:	f7f8 fac3 	bl	800084c <__aeabi_ddiv>
 80082c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082ca:	e028      	b.n	800831e <_dtoa_r+0x3a6>
 80082cc:	2602      	movs	r6, #2
 80082ce:	e7f2      	b.n	80082b6 <_dtoa_r+0x33e>
 80082d0:	07e1      	lsls	r1, r4, #31
 80082d2:	d508      	bpl.n	80082e6 <_dtoa_r+0x36e>
 80082d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80082d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082dc:	f7f8 f98c 	bl	80005f8 <__aeabi_dmul>
 80082e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80082e4:	3601      	adds	r6, #1
 80082e6:	1064      	asrs	r4, r4, #1
 80082e8:	3508      	adds	r5, #8
 80082ea:	e7e5      	b.n	80082b8 <_dtoa_r+0x340>
 80082ec:	f000 80af 	beq.w	800844e <_dtoa_r+0x4d6>
 80082f0:	427c      	negs	r4, r7
 80082f2:	4b81      	ldr	r3, [pc, #516]	@ (80084f8 <_dtoa_r+0x580>)
 80082f4:	4d81      	ldr	r5, [pc, #516]	@ (80084fc <_dtoa_r+0x584>)
 80082f6:	f004 020f 	and.w	r2, r4, #15
 80082fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008306:	f7f8 f977 	bl	80005f8 <__aeabi_dmul>
 800830a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800830e:	1124      	asrs	r4, r4, #4
 8008310:	2300      	movs	r3, #0
 8008312:	2602      	movs	r6, #2
 8008314:	2c00      	cmp	r4, #0
 8008316:	f040 808f 	bne.w	8008438 <_dtoa_r+0x4c0>
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1d3      	bne.n	80082c6 <_dtoa_r+0x34e>
 800831e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008320:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 8094 	beq.w	8008452 <_dtoa_r+0x4da>
 800832a:	4b75      	ldr	r3, [pc, #468]	@ (8008500 <_dtoa_r+0x588>)
 800832c:	2200      	movs	r2, #0
 800832e:	4620      	mov	r0, r4
 8008330:	4629      	mov	r1, r5
 8008332:	f7f8 fbd3 	bl	8000adc <__aeabi_dcmplt>
 8008336:	2800      	cmp	r0, #0
 8008338:	f000 808b 	beq.w	8008452 <_dtoa_r+0x4da>
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 8087 	beq.w	8008452 <_dtoa_r+0x4da>
 8008344:	f1bb 0f00 	cmp.w	fp, #0
 8008348:	dd34      	ble.n	80083b4 <_dtoa_r+0x43c>
 800834a:	4620      	mov	r0, r4
 800834c:	4b6d      	ldr	r3, [pc, #436]	@ (8008504 <_dtoa_r+0x58c>)
 800834e:	2200      	movs	r2, #0
 8008350:	4629      	mov	r1, r5
 8008352:	f7f8 f951 	bl	80005f8 <__aeabi_dmul>
 8008356:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800835a:	f107 38ff 	add.w	r8, r7, #4294967295
 800835e:	3601      	adds	r6, #1
 8008360:	465c      	mov	r4, fp
 8008362:	4630      	mov	r0, r6
 8008364:	f7f8 f8de 	bl	8000524 <__aeabi_i2d>
 8008368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800836c:	f7f8 f944 	bl	80005f8 <__aeabi_dmul>
 8008370:	4b65      	ldr	r3, [pc, #404]	@ (8008508 <_dtoa_r+0x590>)
 8008372:	2200      	movs	r2, #0
 8008374:	f7f7 ff8a 	bl	800028c <__adddf3>
 8008378:	4605      	mov	r5, r0
 800837a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800837e:	2c00      	cmp	r4, #0
 8008380:	d16a      	bne.n	8008458 <_dtoa_r+0x4e0>
 8008382:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008386:	4b61      	ldr	r3, [pc, #388]	@ (800850c <_dtoa_r+0x594>)
 8008388:	2200      	movs	r2, #0
 800838a:	f7f7 ff7d 	bl	8000288 <__aeabi_dsub>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008396:	462a      	mov	r2, r5
 8008398:	4633      	mov	r3, r6
 800839a:	f7f8 fbbd 	bl	8000b18 <__aeabi_dcmpgt>
 800839e:	2800      	cmp	r0, #0
 80083a0:	f040 8298 	bne.w	80088d4 <_dtoa_r+0x95c>
 80083a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083a8:	462a      	mov	r2, r5
 80083aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80083ae:	f7f8 fb95 	bl	8000adc <__aeabi_dcmplt>
 80083b2:	bb38      	cbnz	r0, 8008404 <_dtoa_r+0x48c>
 80083b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80083b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80083bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f2c0 8157 	blt.w	8008672 <_dtoa_r+0x6fa>
 80083c4:	2f0e      	cmp	r7, #14
 80083c6:	f300 8154 	bgt.w	8008672 <_dtoa_r+0x6fa>
 80083ca:	4b4b      	ldr	r3, [pc, #300]	@ (80084f8 <_dtoa_r+0x580>)
 80083cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083d0:	ed93 7b00 	vldr	d7, [r3]
 80083d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	ed8d 7b00 	vstr	d7, [sp]
 80083dc:	f280 80e5 	bge.w	80085aa <_dtoa_r+0x632>
 80083e0:	9b03      	ldr	r3, [sp, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f300 80e1 	bgt.w	80085aa <_dtoa_r+0x632>
 80083e8:	d10c      	bne.n	8008404 <_dtoa_r+0x48c>
 80083ea:	4b48      	ldr	r3, [pc, #288]	@ (800850c <_dtoa_r+0x594>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	ec51 0b17 	vmov	r0, r1, d7
 80083f2:	f7f8 f901 	bl	80005f8 <__aeabi_dmul>
 80083f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083fa:	f7f8 fb83 	bl	8000b04 <__aeabi_dcmpge>
 80083fe:	2800      	cmp	r0, #0
 8008400:	f000 8266 	beq.w	80088d0 <_dtoa_r+0x958>
 8008404:	2400      	movs	r4, #0
 8008406:	4625      	mov	r5, r4
 8008408:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800840a:	4656      	mov	r6, sl
 800840c:	ea6f 0803 	mvn.w	r8, r3
 8008410:	2700      	movs	r7, #0
 8008412:	4621      	mov	r1, r4
 8008414:	4648      	mov	r0, r9
 8008416:	f000 fc09 	bl	8008c2c <_Bfree>
 800841a:	2d00      	cmp	r5, #0
 800841c:	f000 80bd 	beq.w	800859a <_dtoa_r+0x622>
 8008420:	b12f      	cbz	r7, 800842e <_dtoa_r+0x4b6>
 8008422:	42af      	cmp	r7, r5
 8008424:	d003      	beq.n	800842e <_dtoa_r+0x4b6>
 8008426:	4639      	mov	r1, r7
 8008428:	4648      	mov	r0, r9
 800842a:	f000 fbff 	bl	8008c2c <_Bfree>
 800842e:	4629      	mov	r1, r5
 8008430:	4648      	mov	r0, r9
 8008432:	f000 fbfb 	bl	8008c2c <_Bfree>
 8008436:	e0b0      	b.n	800859a <_dtoa_r+0x622>
 8008438:	07e2      	lsls	r2, r4, #31
 800843a:	d505      	bpl.n	8008448 <_dtoa_r+0x4d0>
 800843c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008440:	f7f8 f8da 	bl	80005f8 <__aeabi_dmul>
 8008444:	3601      	adds	r6, #1
 8008446:	2301      	movs	r3, #1
 8008448:	1064      	asrs	r4, r4, #1
 800844a:	3508      	adds	r5, #8
 800844c:	e762      	b.n	8008314 <_dtoa_r+0x39c>
 800844e:	2602      	movs	r6, #2
 8008450:	e765      	b.n	800831e <_dtoa_r+0x3a6>
 8008452:	9c03      	ldr	r4, [sp, #12]
 8008454:	46b8      	mov	r8, r7
 8008456:	e784      	b.n	8008362 <_dtoa_r+0x3ea>
 8008458:	4b27      	ldr	r3, [pc, #156]	@ (80084f8 <_dtoa_r+0x580>)
 800845a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800845c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008460:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008464:	4454      	add	r4, sl
 8008466:	2900      	cmp	r1, #0
 8008468:	d054      	beq.n	8008514 <_dtoa_r+0x59c>
 800846a:	4929      	ldr	r1, [pc, #164]	@ (8008510 <_dtoa_r+0x598>)
 800846c:	2000      	movs	r0, #0
 800846e:	f7f8 f9ed 	bl	800084c <__aeabi_ddiv>
 8008472:	4633      	mov	r3, r6
 8008474:	462a      	mov	r2, r5
 8008476:	f7f7 ff07 	bl	8000288 <__aeabi_dsub>
 800847a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800847e:	4656      	mov	r6, sl
 8008480:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008484:	f7f8 fb68 	bl	8000b58 <__aeabi_d2iz>
 8008488:	4605      	mov	r5, r0
 800848a:	f7f8 f84b 	bl	8000524 <__aeabi_i2d>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008496:	f7f7 fef7 	bl	8000288 <__aeabi_dsub>
 800849a:	3530      	adds	r5, #48	@ 0x30
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80084a4:	f806 5b01 	strb.w	r5, [r6], #1
 80084a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80084ac:	f7f8 fb16 	bl	8000adc <__aeabi_dcmplt>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d172      	bne.n	800859a <_dtoa_r+0x622>
 80084b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084b8:	4911      	ldr	r1, [pc, #68]	@ (8008500 <_dtoa_r+0x588>)
 80084ba:	2000      	movs	r0, #0
 80084bc:	f7f7 fee4 	bl	8000288 <__aeabi_dsub>
 80084c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80084c4:	f7f8 fb0a 	bl	8000adc <__aeabi_dcmplt>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	f040 80b4 	bne.w	8008636 <_dtoa_r+0x6be>
 80084ce:	42a6      	cmp	r6, r4
 80084d0:	f43f af70 	beq.w	80083b4 <_dtoa_r+0x43c>
 80084d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80084d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008504 <_dtoa_r+0x58c>)
 80084da:	2200      	movs	r2, #0
 80084dc:	f7f8 f88c 	bl	80005f8 <__aeabi_dmul>
 80084e0:	4b08      	ldr	r3, [pc, #32]	@ (8008504 <_dtoa_r+0x58c>)
 80084e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80084e6:	2200      	movs	r2, #0
 80084e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084ec:	f7f8 f884 	bl	80005f8 <__aeabi_dmul>
 80084f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084f4:	e7c4      	b.n	8008480 <_dtoa_r+0x508>
 80084f6:	bf00      	nop
 80084f8:	0800cba0 	.word	0x0800cba0
 80084fc:	0800cb78 	.word	0x0800cb78
 8008500:	3ff00000 	.word	0x3ff00000
 8008504:	40240000 	.word	0x40240000
 8008508:	401c0000 	.word	0x401c0000
 800850c:	40140000 	.word	0x40140000
 8008510:	3fe00000 	.word	0x3fe00000
 8008514:	4631      	mov	r1, r6
 8008516:	4628      	mov	r0, r5
 8008518:	f7f8 f86e 	bl	80005f8 <__aeabi_dmul>
 800851c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008520:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008522:	4656      	mov	r6, sl
 8008524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008528:	f7f8 fb16 	bl	8000b58 <__aeabi_d2iz>
 800852c:	4605      	mov	r5, r0
 800852e:	f7f7 fff9 	bl	8000524 <__aeabi_i2d>
 8008532:	4602      	mov	r2, r0
 8008534:	460b      	mov	r3, r1
 8008536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800853a:	f7f7 fea5 	bl	8000288 <__aeabi_dsub>
 800853e:	3530      	adds	r5, #48	@ 0x30
 8008540:	f806 5b01 	strb.w	r5, [r6], #1
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	42a6      	cmp	r6, r4
 800854a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800854e:	f04f 0200 	mov.w	r2, #0
 8008552:	d124      	bne.n	800859e <_dtoa_r+0x626>
 8008554:	4baf      	ldr	r3, [pc, #700]	@ (8008814 <_dtoa_r+0x89c>)
 8008556:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800855a:	f7f7 fe97 	bl	800028c <__adddf3>
 800855e:	4602      	mov	r2, r0
 8008560:	460b      	mov	r3, r1
 8008562:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008566:	f7f8 fad7 	bl	8000b18 <__aeabi_dcmpgt>
 800856a:	2800      	cmp	r0, #0
 800856c:	d163      	bne.n	8008636 <_dtoa_r+0x6be>
 800856e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008572:	49a8      	ldr	r1, [pc, #672]	@ (8008814 <_dtoa_r+0x89c>)
 8008574:	2000      	movs	r0, #0
 8008576:	f7f7 fe87 	bl	8000288 <__aeabi_dsub>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008582:	f7f8 faab 	bl	8000adc <__aeabi_dcmplt>
 8008586:	2800      	cmp	r0, #0
 8008588:	f43f af14 	beq.w	80083b4 <_dtoa_r+0x43c>
 800858c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800858e:	1e73      	subs	r3, r6, #1
 8008590:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008592:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008596:	2b30      	cmp	r3, #48	@ 0x30
 8008598:	d0f8      	beq.n	800858c <_dtoa_r+0x614>
 800859a:	4647      	mov	r7, r8
 800859c:	e03b      	b.n	8008616 <_dtoa_r+0x69e>
 800859e:	4b9e      	ldr	r3, [pc, #632]	@ (8008818 <_dtoa_r+0x8a0>)
 80085a0:	f7f8 f82a 	bl	80005f8 <__aeabi_dmul>
 80085a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085a8:	e7bc      	b.n	8008524 <_dtoa_r+0x5ac>
 80085aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80085ae:	4656      	mov	r6, sl
 80085b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085b4:	4620      	mov	r0, r4
 80085b6:	4629      	mov	r1, r5
 80085b8:	f7f8 f948 	bl	800084c <__aeabi_ddiv>
 80085bc:	f7f8 facc 	bl	8000b58 <__aeabi_d2iz>
 80085c0:	4680      	mov	r8, r0
 80085c2:	f7f7 ffaf 	bl	8000524 <__aeabi_i2d>
 80085c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085ca:	f7f8 f815 	bl	80005f8 <__aeabi_dmul>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	4620      	mov	r0, r4
 80085d4:	4629      	mov	r1, r5
 80085d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80085da:	f7f7 fe55 	bl	8000288 <__aeabi_dsub>
 80085de:	f806 4b01 	strb.w	r4, [r6], #1
 80085e2:	9d03      	ldr	r5, [sp, #12]
 80085e4:	eba6 040a 	sub.w	r4, r6, sl
 80085e8:	42a5      	cmp	r5, r4
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	d133      	bne.n	8008658 <_dtoa_r+0x6e0>
 80085f0:	f7f7 fe4c 	bl	800028c <__adddf3>
 80085f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085f8:	4604      	mov	r4, r0
 80085fa:	460d      	mov	r5, r1
 80085fc:	f7f8 fa8c 	bl	8000b18 <__aeabi_dcmpgt>
 8008600:	b9c0      	cbnz	r0, 8008634 <_dtoa_r+0x6bc>
 8008602:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008606:	4620      	mov	r0, r4
 8008608:	4629      	mov	r1, r5
 800860a:	f7f8 fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800860e:	b110      	cbz	r0, 8008616 <_dtoa_r+0x69e>
 8008610:	f018 0f01 	tst.w	r8, #1
 8008614:	d10e      	bne.n	8008634 <_dtoa_r+0x6bc>
 8008616:	9902      	ldr	r1, [sp, #8]
 8008618:	4648      	mov	r0, r9
 800861a:	f000 fb07 	bl	8008c2c <_Bfree>
 800861e:	2300      	movs	r3, #0
 8008620:	7033      	strb	r3, [r6, #0]
 8008622:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008624:	3701      	adds	r7, #1
 8008626:	601f      	str	r7, [r3, #0]
 8008628:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 824b 	beq.w	8008ac6 <_dtoa_r+0xb4e>
 8008630:	601e      	str	r6, [r3, #0]
 8008632:	e248      	b.n	8008ac6 <_dtoa_r+0xb4e>
 8008634:	46b8      	mov	r8, r7
 8008636:	4633      	mov	r3, r6
 8008638:	461e      	mov	r6, r3
 800863a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800863e:	2a39      	cmp	r2, #57	@ 0x39
 8008640:	d106      	bne.n	8008650 <_dtoa_r+0x6d8>
 8008642:	459a      	cmp	sl, r3
 8008644:	d1f8      	bne.n	8008638 <_dtoa_r+0x6c0>
 8008646:	2230      	movs	r2, #48	@ 0x30
 8008648:	f108 0801 	add.w	r8, r8, #1
 800864c:	f88a 2000 	strb.w	r2, [sl]
 8008650:	781a      	ldrb	r2, [r3, #0]
 8008652:	3201      	adds	r2, #1
 8008654:	701a      	strb	r2, [r3, #0]
 8008656:	e7a0      	b.n	800859a <_dtoa_r+0x622>
 8008658:	4b6f      	ldr	r3, [pc, #444]	@ (8008818 <_dtoa_r+0x8a0>)
 800865a:	2200      	movs	r2, #0
 800865c:	f7f7 ffcc 	bl	80005f8 <__aeabi_dmul>
 8008660:	2200      	movs	r2, #0
 8008662:	2300      	movs	r3, #0
 8008664:	4604      	mov	r4, r0
 8008666:	460d      	mov	r5, r1
 8008668:	f7f8 fa2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800866c:	2800      	cmp	r0, #0
 800866e:	d09f      	beq.n	80085b0 <_dtoa_r+0x638>
 8008670:	e7d1      	b.n	8008616 <_dtoa_r+0x69e>
 8008672:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008674:	2a00      	cmp	r2, #0
 8008676:	f000 80ea 	beq.w	800884e <_dtoa_r+0x8d6>
 800867a:	9a07      	ldr	r2, [sp, #28]
 800867c:	2a01      	cmp	r2, #1
 800867e:	f300 80cd 	bgt.w	800881c <_dtoa_r+0x8a4>
 8008682:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008684:	2a00      	cmp	r2, #0
 8008686:	f000 80c1 	beq.w	800880c <_dtoa_r+0x894>
 800868a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800868e:	9c08      	ldr	r4, [sp, #32]
 8008690:	9e00      	ldr	r6, [sp, #0]
 8008692:	9a00      	ldr	r2, [sp, #0]
 8008694:	441a      	add	r2, r3
 8008696:	9200      	str	r2, [sp, #0]
 8008698:	9a06      	ldr	r2, [sp, #24]
 800869a:	2101      	movs	r1, #1
 800869c:	441a      	add	r2, r3
 800869e:	4648      	mov	r0, r9
 80086a0:	9206      	str	r2, [sp, #24]
 80086a2:	f000 fb77 	bl	8008d94 <__i2b>
 80086a6:	4605      	mov	r5, r0
 80086a8:	b166      	cbz	r6, 80086c4 <_dtoa_r+0x74c>
 80086aa:	9b06      	ldr	r3, [sp, #24]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	dd09      	ble.n	80086c4 <_dtoa_r+0x74c>
 80086b0:	42b3      	cmp	r3, r6
 80086b2:	9a00      	ldr	r2, [sp, #0]
 80086b4:	bfa8      	it	ge
 80086b6:	4633      	movge	r3, r6
 80086b8:	1ad2      	subs	r2, r2, r3
 80086ba:	9200      	str	r2, [sp, #0]
 80086bc:	9a06      	ldr	r2, [sp, #24]
 80086be:	1af6      	subs	r6, r6, r3
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	9306      	str	r3, [sp, #24]
 80086c4:	9b08      	ldr	r3, [sp, #32]
 80086c6:	b30b      	cbz	r3, 800870c <_dtoa_r+0x794>
 80086c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f000 80c6 	beq.w	800885c <_dtoa_r+0x8e4>
 80086d0:	2c00      	cmp	r4, #0
 80086d2:	f000 80c0 	beq.w	8008856 <_dtoa_r+0x8de>
 80086d6:	4629      	mov	r1, r5
 80086d8:	4622      	mov	r2, r4
 80086da:	4648      	mov	r0, r9
 80086dc:	f000 fc12 	bl	8008f04 <__pow5mult>
 80086e0:	9a02      	ldr	r2, [sp, #8]
 80086e2:	4601      	mov	r1, r0
 80086e4:	4605      	mov	r5, r0
 80086e6:	4648      	mov	r0, r9
 80086e8:	f000 fb6a 	bl	8008dc0 <__multiply>
 80086ec:	9902      	ldr	r1, [sp, #8]
 80086ee:	4680      	mov	r8, r0
 80086f0:	4648      	mov	r0, r9
 80086f2:	f000 fa9b 	bl	8008c2c <_Bfree>
 80086f6:	9b08      	ldr	r3, [sp, #32]
 80086f8:	1b1b      	subs	r3, r3, r4
 80086fa:	9308      	str	r3, [sp, #32]
 80086fc:	f000 80b1 	beq.w	8008862 <_dtoa_r+0x8ea>
 8008700:	9a08      	ldr	r2, [sp, #32]
 8008702:	4641      	mov	r1, r8
 8008704:	4648      	mov	r0, r9
 8008706:	f000 fbfd 	bl	8008f04 <__pow5mult>
 800870a:	9002      	str	r0, [sp, #8]
 800870c:	2101      	movs	r1, #1
 800870e:	4648      	mov	r0, r9
 8008710:	f000 fb40 	bl	8008d94 <__i2b>
 8008714:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008716:	4604      	mov	r4, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 81d8 	beq.w	8008ace <_dtoa_r+0xb56>
 800871e:	461a      	mov	r2, r3
 8008720:	4601      	mov	r1, r0
 8008722:	4648      	mov	r0, r9
 8008724:	f000 fbee 	bl	8008f04 <__pow5mult>
 8008728:	9b07      	ldr	r3, [sp, #28]
 800872a:	2b01      	cmp	r3, #1
 800872c:	4604      	mov	r4, r0
 800872e:	f300 809f 	bgt.w	8008870 <_dtoa_r+0x8f8>
 8008732:	9b04      	ldr	r3, [sp, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	f040 8097 	bne.w	8008868 <_dtoa_r+0x8f0>
 800873a:	9b05      	ldr	r3, [sp, #20]
 800873c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008740:	2b00      	cmp	r3, #0
 8008742:	f040 8093 	bne.w	800886c <_dtoa_r+0x8f4>
 8008746:	9b05      	ldr	r3, [sp, #20]
 8008748:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800874c:	0d1b      	lsrs	r3, r3, #20
 800874e:	051b      	lsls	r3, r3, #20
 8008750:	b133      	cbz	r3, 8008760 <_dtoa_r+0x7e8>
 8008752:	9b00      	ldr	r3, [sp, #0]
 8008754:	3301      	adds	r3, #1
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	9b06      	ldr	r3, [sp, #24]
 800875a:	3301      	adds	r3, #1
 800875c:	9306      	str	r3, [sp, #24]
 800875e:	2301      	movs	r3, #1
 8008760:	9308      	str	r3, [sp, #32]
 8008762:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 81b8 	beq.w	8008ada <_dtoa_r+0xb62>
 800876a:	6923      	ldr	r3, [r4, #16]
 800876c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008770:	6918      	ldr	r0, [r3, #16]
 8008772:	f000 fac3 	bl	8008cfc <__hi0bits>
 8008776:	f1c0 0020 	rsb	r0, r0, #32
 800877a:	9b06      	ldr	r3, [sp, #24]
 800877c:	4418      	add	r0, r3
 800877e:	f010 001f 	ands.w	r0, r0, #31
 8008782:	f000 8082 	beq.w	800888a <_dtoa_r+0x912>
 8008786:	f1c0 0320 	rsb	r3, r0, #32
 800878a:	2b04      	cmp	r3, #4
 800878c:	dd73      	ble.n	8008876 <_dtoa_r+0x8fe>
 800878e:	9b00      	ldr	r3, [sp, #0]
 8008790:	f1c0 001c 	rsb	r0, r0, #28
 8008794:	4403      	add	r3, r0
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	9b06      	ldr	r3, [sp, #24]
 800879a:	4403      	add	r3, r0
 800879c:	4406      	add	r6, r0
 800879e:	9306      	str	r3, [sp, #24]
 80087a0:	9b00      	ldr	r3, [sp, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	dd05      	ble.n	80087b2 <_dtoa_r+0x83a>
 80087a6:	9902      	ldr	r1, [sp, #8]
 80087a8:	461a      	mov	r2, r3
 80087aa:	4648      	mov	r0, r9
 80087ac:	f000 fc04 	bl	8008fb8 <__lshift>
 80087b0:	9002      	str	r0, [sp, #8]
 80087b2:	9b06      	ldr	r3, [sp, #24]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	dd05      	ble.n	80087c4 <_dtoa_r+0x84c>
 80087b8:	4621      	mov	r1, r4
 80087ba:	461a      	mov	r2, r3
 80087bc:	4648      	mov	r0, r9
 80087be:	f000 fbfb 	bl	8008fb8 <__lshift>
 80087c2:	4604      	mov	r4, r0
 80087c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d061      	beq.n	800888e <_dtoa_r+0x916>
 80087ca:	9802      	ldr	r0, [sp, #8]
 80087cc:	4621      	mov	r1, r4
 80087ce:	f000 fc5f 	bl	8009090 <__mcmp>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	da5b      	bge.n	800888e <_dtoa_r+0x916>
 80087d6:	2300      	movs	r3, #0
 80087d8:	9902      	ldr	r1, [sp, #8]
 80087da:	220a      	movs	r2, #10
 80087dc:	4648      	mov	r0, r9
 80087de:	f000 fa47 	bl	8008c70 <__multadd>
 80087e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087e4:	9002      	str	r0, [sp, #8]
 80087e6:	f107 38ff 	add.w	r8, r7, #4294967295
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f000 8177 	beq.w	8008ade <_dtoa_r+0xb66>
 80087f0:	4629      	mov	r1, r5
 80087f2:	2300      	movs	r3, #0
 80087f4:	220a      	movs	r2, #10
 80087f6:	4648      	mov	r0, r9
 80087f8:	f000 fa3a 	bl	8008c70 <__multadd>
 80087fc:	f1bb 0f00 	cmp.w	fp, #0
 8008800:	4605      	mov	r5, r0
 8008802:	dc6f      	bgt.n	80088e4 <_dtoa_r+0x96c>
 8008804:	9b07      	ldr	r3, [sp, #28]
 8008806:	2b02      	cmp	r3, #2
 8008808:	dc49      	bgt.n	800889e <_dtoa_r+0x926>
 800880a:	e06b      	b.n	80088e4 <_dtoa_r+0x96c>
 800880c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800880e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008812:	e73c      	b.n	800868e <_dtoa_r+0x716>
 8008814:	3fe00000 	.word	0x3fe00000
 8008818:	40240000 	.word	0x40240000
 800881c:	9b03      	ldr	r3, [sp, #12]
 800881e:	1e5c      	subs	r4, r3, #1
 8008820:	9b08      	ldr	r3, [sp, #32]
 8008822:	42a3      	cmp	r3, r4
 8008824:	db09      	blt.n	800883a <_dtoa_r+0x8c2>
 8008826:	1b1c      	subs	r4, r3, r4
 8008828:	9b03      	ldr	r3, [sp, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	f6bf af30 	bge.w	8008690 <_dtoa_r+0x718>
 8008830:	9b00      	ldr	r3, [sp, #0]
 8008832:	9a03      	ldr	r2, [sp, #12]
 8008834:	1a9e      	subs	r6, r3, r2
 8008836:	2300      	movs	r3, #0
 8008838:	e72b      	b.n	8008692 <_dtoa_r+0x71a>
 800883a:	9b08      	ldr	r3, [sp, #32]
 800883c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800883e:	9408      	str	r4, [sp, #32]
 8008840:	1ae3      	subs	r3, r4, r3
 8008842:	441a      	add	r2, r3
 8008844:	9e00      	ldr	r6, [sp, #0]
 8008846:	9b03      	ldr	r3, [sp, #12]
 8008848:	920d      	str	r2, [sp, #52]	@ 0x34
 800884a:	2400      	movs	r4, #0
 800884c:	e721      	b.n	8008692 <_dtoa_r+0x71a>
 800884e:	9c08      	ldr	r4, [sp, #32]
 8008850:	9e00      	ldr	r6, [sp, #0]
 8008852:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008854:	e728      	b.n	80086a8 <_dtoa_r+0x730>
 8008856:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800885a:	e751      	b.n	8008700 <_dtoa_r+0x788>
 800885c:	9a08      	ldr	r2, [sp, #32]
 800885e:	9902      	ldr	r1, [sp, #8]
 8008860:	e750      	b.n	8008704 <_dtoa_r+0x78c>
 8008862:	f8cd 8008 	str.w	r8, [sp, #8]
 8008866:	e751      	b.n	800870c <_dtoa_r+0x794>
 8008868:	2300      	movs	r3, #0
 800886a:	e779      	b.n	8008760 <_dtoa_r+0x7e8>
 800886c:	9b04      	ldr	r3, [sp, #16]
 800886e:	e777      	b.n	8008760 <_dtoa_r+0x7e8>
 8008870:	2300      	movs	r3, #0
 8008872:	9308      	str	r3, [sp, #32]
 8008874:	e779      	b.n	800876a <_dtoa_r+0x7f2>
 8008876:	d093      	beq.n	80087a0 <_dtoa_r+0x828>
 8008878:	9a00      	ldr	r2, [sp, #0]
 800887a:	331c      	adds	r3, #28
 800887c:	441a      	add	r2, r3
 800887e:	9200      	str	r2, [sp, #0]
 8008880:	9a06      	ldr	r2, [sp, #24]
 8008882:	441a      	add	r2, r3
 8008884:	441e      	add	r6, r3
 8008886:	9206      	str	r2, [sp, #24]
 8008888:	e78a      	b.n	80087a0 <_dtoa_r+0x828>
 800888a:	4603      	mov	r3, r0
 800888c:	e7f4      	b.n	8008878 <_dtoa_r+0x900>
 800888e:	9b03      	ldr	r3, [sp, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	46b8      	mov	r8, r7
 8008894:	dc20      	bgt.n	80088d8 <_dtoa_r+0x960>
 8008896:	469b      	mov	fp, r3
 8008898:	9b07      	ldr	r3, [sp, #28]
 800889a:	2b02      	cmp	r3, #2
 800889c:	dd1e      	ble.n	80088dc <_dtoa_r+0x964>
 800889e:	f1bb 0f00 	cmp.w	fp, #0
 80088a2:	f47f adb1 	bne.w	8008408 <_dtoa_r+0x490>
 80088a6:	4621      	mov	r1, r4
 80088a8:	465b      	mov	r3, fp
 80088aa:	2205      	movs	r2, #5
 80088ac:	4648      	mov	r0, r9
 80088ae:	f000 f9df 	bl	8008c70 <__multadd>
 80088b2:	4601      	mov	r1, r0
 80088b4:	4604      	mov	r4, r0
 80088b6:	9802      	ldr	r0, [sp, #8]
 80088b8:	f000 fbea 	bl	8009090 <__mcmp>
 80088bc:	2800      	cmp	r0, #0
 80088be:	f77f ada3 	ble.w	8008408 <_dtoa_r+0x490>
 80088c2:	4656      	mov	r6, sl
 80088c4:	2331      	movs	r3, #49	@ 0x31
 80088c6:	f806 3b01 	strb.w	r3, [r6], #1
 80088ca:	f108 0801 	add.w	r8, r8, #1
 80088ce:	e59f      	b.n	8008410 <_dtoa_r+0x498>
 80088d0:	9c03      	ldr	r4, [sp, #12]
 80088d2:	46b8      	mov	r8, r7
 80088d4:	4625      	mov	r5, r4
 80088d6:	e7f4      	b.n	80088c2 <_dtoa_r+0x94a>
 80088d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80088dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f000 8101 	beq.w	8008ae6 <_dtoa_r+0xb6e>
 80088e4:	2e00      	cmp	r6, #0
 80088e6:	dd05      	ble.n	80088f4 <_dtoa_r+0x97c>
 80088e8:	4629      	mov	r1, r5
 80088ea:	4632      	mov	r2, r6
 80088ec:	4648      	mov	r0, r9
 80088ee:	f000 fb63 	bl	8008fb8 <__lshift>
 80088f2:	4605      	mov	r5, r0
 80088f4:	9b08      	ldr	r3, [sp, #32]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d05c      	beq.n	80089b4 <_dtoa_r+0xa3c>
 80088fa:	6869      	ldr	r1, [r5, #4]
 80088fc:	4648      	mov	r0, r9
 80088fe:	f000 f955 	bl	8008bac <_Balloc>
 8008902:	4606      	mov	r6, r0
 8008904:	b928      	cbnz	r0, 8008912 <_dtoa_r+0x99a>
 8008906:	4b82      	ldr	r3, [pc, #520]	@ (8008b10 <_dtoa_r+0xb98>)
 8008908:	4602      	mov	r2, r0
 800890a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800890e:	f7ff bb4a 	b.w	8007fa6 <_dtoa_r+0x2e>
 8008912:	692a      	ldr	r2, [r5, #16]
 8008914:	3202      	adds	r2, #2
 8008916:	0092      	lsls	r2, r2, #2
 8008918:	f105 010c 	add.w	r1, r5, #12
 800891c:	300c      	adds	r0, #12
 800891e:	f001 f8a3 	bl	8009a68 <memcpy>
 8008922:	2201      	movs	r2, #1
 8008924:	4631      	mov	r1, r6
 8008926:	4648      	mov	r0, r9
 8008928:	f000 fb46 	bl	8008fb8 <__lshift>
 800892c:	f10a 0301 	add.w	r3, sl, #1
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	eb0a 030b 	add.w	r3, sl, fp
 8008936:	9308      	str	r3, [sp, #32]
 8008938:	9b04      	ldr	r3, [sp, #16]
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	462f      	mov	r7, r5
 8008940:	9306      	str	r3, [sp, #24]
 8008942:	4605      	mov	r5, r0
 8008944:	9b00      	ldr	r3, [sp, #0]
 8008946:	9802      	ldr	r0, [sp, #8]
 8008948:	4621      	mov	r1, r4
 800894a:	f103 3bff 	add.w	fp, r3, #4294967295
 800894e:	f7ff fa88 	bl	8007e62 <quorem>
 8008952:	4603      	mov	r3, r0
 8008954:	3330      	adds	r3, #48	@ 0x30
 8008956:	9003      	str	r0, [sp, #12]
 8008958:	4639      	mov	r1, r7
 800895a:	9802      	ldr	r0, [sp, #8]
 800895c:	9309      	str	r3, [sp, #36]	@ 0x24
 800895e:	f000 fb97 	bl	8009090 <__mcmp>
 8008962:	462a      	mov	r2, r5
 8008964:	9004      	str	r0, [sp, #16]
 8008966:	4621      	mov	r1, r4
 8008968:	4648      	mov	r0, r9
 800896a:	f000 fbad 	bl	80090c8 <__mdiff>
 800896e:	68c2      	ldr	r2, [r0, #12]
 8008970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008972:	4606      	mov	r6, r0
 8008974:	bb02      	cbnz	r2, 80089b8 <_dtoa_r+0xa40>
 8008976:	4601      	mov	r1, r0
 8008978:	9802      	ldr	r0, [sp, #8]
 800897a:	f000 fb89 	bl	8009090 <__mcmp>
 800897e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008980:	4602      	mov	r2, r0
 8008982:	4631      	mov	r1, r6
 8008984:	4648      	mov	r0, r9
 8008986:	920c      	str	r2, [sp, #48]	@ 0x30
 8008988:	9309      	str	r3, [sp, #36]	@ 0x24
 800898a:	f000 f94f 	bl	8008c2c <_Bfree>
 800898e:	9b07      	ldr	r3, [sp, #28]
 8008990:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008992:	9e00      	ldr	r6, [sp, #0]
 8008994:	ea42 0103 	orr.w	r1, r2, r3
 8008998:	9b06      	ldr	r3, [sp, #24]
 800899a:	4319      	orrs	r1, r3
 800899c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800899e:	d10d      	bne.n	80089bc <_dtoa_r+0xa44>
 80089a0:	2b39      	cmp	r3, #57	@ 0x39
 80089a2:	d027      	beq.n	80089f4 <_dtoa_r+0xa7c>
 80089a4:	9a04      	ldr	r2, [sp, #16]
 80089a6:	2a00      	cmp	r2, #0
 80089a8:	dd01      	ble.n	80089ae <_dtoa_r+0xa36>
 80089aa:	9b03      	ldr	r3, [sp, #12]
 80089ac:	3331      	adds	r3, #49	@ 0x31
 80089ae:	f88b 3000 	strb.w	r3, [fp]
 80089b2:	e52e      	b.n	8008412 <_dtoa_r+0x49a>
 80089b4:	4628      	mov	r0, r5
 80089b6:	e7b9      	b.n	800892c <_dtoa_r+0x9b4>
 80089b8:	2201      	movs	r2, #1
 80089ba:	e7e2      	b.n	8008982 <_dtoa_r+0xa0a>
 80089bc:	9904      	ldr	r1, [sp, #16]
 80089be:	2900      	cmp	r1, #0
 80089c0:	db04      	blt.n	80089cc <_dtoa_r+0xa54>
 80089c2:	9807      	ldr	r0, [sp, #28]
 80089c4:	4301      	orrs	r1, r0
 80089c6:	9806      	ldr	r0, [sp, #24]
 80089c8:	4301      	orrs	r1, r0
 80089ca:	d120      	bne.n	8008a0e <_dtoa_r+0xa96>
 80089cc:	2a00      	cmp	r2, #0
 80089ce:	ddee      	ble.n	80089ae <_dtoa_r+0xa36>
 80089d0:	9902      	ldr	r1, [sp, #8]
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	2201      	movs	r2, #1
 80089d6:	4648      	mov	r0, r9
 80089d8:	f000 faee 	bl	8008fb8 <__lshift>
 80089dc:	4621      	mov	r1, r4
 80089de:	9002      	str	r0, [sp, #8]
 80089e0:	f000 fb56 	bl	8009090 <__mcmp>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	9b00      	ldr	r3, [sp, #0]
 80089e8:	dc02      	bgt.n	80089f0 <_dtoa_r+0xa78>
 80089ea:	d1e0      	bne.n	80089ae <_dtoa_r+0xa36>
 80089ec:	07da      	lsls	r2, r3, #31
 80089ee:	d5de      	bpl.n	80089ae <_dtoa_r+0xa36>
 80089f0:	2b39      	cmp	r3, #57	@ 0x39
 80089f2:	d1da      	bne.n	80089aa <_dtoa_r+0xa32>
 80089f4:	2339      	movs	r3, #57	@ 0x39
 80089f6:	f88b 3000 	strb.w	r3, [fp]
 80089fa:	4633      	mov	r3, r6
 80089fc:	461e      	mov	r6, r3
 80089fe:	3b01      	subs	r3, #1
 8008a00:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008a04:	2a39      	cmp	r2, #57	@ 0x39
 8008a06:	d04e      	beq.n	8008aa6 <_dtoa_r+0xb2e>
 8008a08:	3201      	adds	r2, #1
 8008a0a:	701a      	strb	r2, [r3, #0]
 8008a0c:	e501      	b.n	8008412 <_dtoa_r+0x49a>
 8008a0e:	2a00      	cmp	r2, #0
 8008a10:	dd03      	ble.n	8008a1a <_dtoa_r+0xaa2>
 8008a12:	2b39      	cmp	r3, #57	@ 0x39
 8008a14:	d0ee      	beq.n	80089f4 <_dtoa_r+0xa7c>
 8008a16:	3301      	adds	r3, #1
 8008a18:	e7c9      	b.n	80089ae <_dtoa_r+0xa36>
 8008a1a:	9a00      	ldr	r2, [sp, #0]
 8008a1c:	9908      	ldr	r1, [sp, #32]
 8008a1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a22:	428a      	cmp	r2, r1
 8008a24:	d028      	beq.n	8008a78 <_dtoa_r+0xb00>
 8008a26:	9902      	ldr	r1, [sp, #8]
 8008a28:	2300      	movs	r3, #0
 8008a2a:	220a      	movs	r2, #10
 8008a2c:	4648      	mov	r0, r9
 8008a2e:	f000 f91f 	bl	8008c70 <__multadd>
 8008a32:	42af      	cmp	r7, r5
 8008a34:	9002      	str	r0, [sp, #8]
 8008a36:	f04f 0300 	mov.w	r3, #0
 8008a3a:	f04f 020a 	mov.w	r2, #10
 8008a3e:	4639      	mov	r1, r7
 8008a40:	4648      	mov	r0, r9
 8008a42:	d107      	bne.n	8008a54 <_dtoa_r+0xadc>
 8008a44:	f000 f914 	bl	8008c70 <__multadd>
 8008a48:	4607      	mov	r7, r0
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	9b00      	ldr	r3, [sp, #0]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	e777      	b.n	8008944 <_dtoa_r+0x9cc>
 8008a54:	f000 f90c 	bl	8008c70 <__multadd>
 8008a58:	4629      	mov	r1, r5
 8008a5a:	4607      	mov	r7, r0
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	220a      	movs	r2, #10
 8008a60:	4648      	mov	r0, r9
 8008a62:	f000 f905 	bl	8008c70 <__multadd>
 8008a66:	4605      	mov	r5, r0
 8008a68:	e7f0      	b.n	8008a4c <_dtoa_r+0xad4>
 8008a6a:	f1bb 0f00 	cmp.w	fp, #0
 8008a6e:	bfcc      	ite	gt
 8008a70:	465e      	movgt	r6, fp
 8008a72:	2601      	movle	r6, #1
 8008a74:	4456      	add	r6, sl
 8008a76:	2700      	movs	r7, #0
 8008a78:	9902      	ldr	r1, [sp, #8]
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	4648      	mov	r0, r9
 8008a80:	f000 fa9a 	bl	8008fb8 <__lshift>
 8008a84:	4621      	mov	r1, r4
 8008a86:	9002      	str	r0, [sp, #8]
 8008a88:	f000 fb02 	bl	8009090 <__mcmp>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	dcb4      	bgt.n	80089fa <_dtoa_r+0xa82>
 8008a90:	d102      	bne.n	8008a98 <_dtoa_r+0xb20>
 8008a92:	9b00      	ldr	r3, [sp, #0]
 8008a94:	07db      	lsls	r3, r3, #31
 8008a96:	d4b0      	bmi.n	80089fa <_dtoa_r+0xa82>
 8008a98:	4633      	mov	r3, r6
 8008a9a:	461e      	mov	r6, r3
 8008a9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008aa0:	2a30      	cmp	r2, #48	@ 0x30
 8008aa2:	d0fa      	beq.n	8008a9a <_dtoa_r+0xb22>
 8008aa4:	e4b5      	b.n	8008412 <_dtoa_r+0x49a>
 8008aa6:	459a      	cmp	sl, r3
 8008aa8:	d1a8      	bne.n	80089fc <_dtoa_r+0xa84>
 8008aaa:	2331      	movs	r3, #49	@ 0x31
 8008aac:	f108 0801 	add.w	r8, r8, #1
 8008ab0:	f88a 3000 	strb.w	r3, [sl]
 8008ab4:	e4ad      	b.n	8008412 <_dtoa_r+0x49a>
 8008ab6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ab8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008b14 <_dtoa_r+0xb9c>
 8008abc:	b11b      	cbz	r3, 8008ac6 <_dtoa_r+0xb4e>
 8008abe:	f10a 0308 	add.w	r3, sl, #8
 8008ac2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008ac4:	6013      	str	r3, [r2, #0]
 8008ac6:	4650      	mov	r0, sl
 8008ac8:	b017      	add	sp, #92	@ 0x5c
 8008aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ace:	9b07      	ldr	r3, [sp, #28]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	f77f ae2e 	ble.w	8008732 <_dtoa_r+0x7ba>
 8008ad6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ad8:	9308      	str	r3, [sp, #32]
 8008ada:	2001      	movs	r0, #1
 8008adc:	e64d      	b.n	800877a <_dtoa_r+0x802>
 8008ade:	f1bb 0f00 	cmp.w	fp, #0
 8008ae2:	f77f aed9 	ble.w	8008898 <_dtoa_r+0x920>
 8008ae6:	4656      	mov	r6, sl
 8008ae8:	9802      	ldr	r0, [sp, #8]
 8008aea:	4621      	mov	r1, r4
 8008aec:	f7ff f9b9 	bl	8007e62 <quorem>
 8008af0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008af4:	f806 3b01 	strb.w	r3, [r6], #1
 8008af8:	eba6 020a 	sub.w	r2, r6, sl
 8008afc:	4593      	cmp	fp, r2
 8008afe:	ddb4      	ble.n	8008a6a <_dtoa_r+0xaf2>
 8008b00:	9902      	ldr	r1, [sp, #8]
 8008b02:	2300      	movs	r3, #0
 8008b04:	220a      	movs	r2, #10
 8008b06:	4648      	mov	r0, r9
 8008b08:	f000 f8b2 	bl	8008c70 <__multadd>
 8008b0c:	9002      	str	r0, [sp, #8]
 8008b0e:	e7eb      	b.n	8008ae8 <_dtoa_r+0xb70>
 8008b10:	0800caa8 	.word	0x0800caa8
 8008b14:	0800ca2c 	.word	0x0800ca2c

08008b18 <_free_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4605      	mov	r5, r0
 8008b1c:	2900      	cmp	r1, #0
 8008b1e:	d041      	beq.n	8008ba4 <_free_r+0x8c>
 8008b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b24:	1f0c      	subs	r4, r1, #4
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	bfb8      	it	lt
 8008b2a:	18e4      	addlt	r4, r4, r3
 8008b2c:	f7fe fa8e 	bl	800704c <__malloc_lock>
 8008b30:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba8 <_free_r+0x90>)
 8008b32:	6813      	ldr	r3, [r2, #0]
 8008b34:	b933      	cbnz	r3, 8008b44 <_free_r+0x2c>
 8008b36:	6063      	str	r3, [r4, #4]
 8008b38:	6014      	str	r4, [r2, #0]
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b40:	f7fe ba8a 	b.w	8007058 <__malloc_unlock>
 8008b44:	42a3      	cmp	r3, r4
 8008b46:	d908      	bls.n	8008b5a <_free_r+0x42>
 8008b48:	6820      	ldr	r0, [r4, #0]
 8008b4a:	1821      	adds	r1, r4, r0
 8008b4c:	428b      	cmp	r3, r1
 8008b4e:	bf01      	itttt	eq
 8008b50:	6819      	ldreq	r1, [r3, #0]
 8008b52:	685b      	ldreq	r3, [r3, #4]
 8008b54:	1809      	addeq	r1, r1, r0
 8008b56:	6021      	streq	r1, [r4, #0]
 8008b58:	e7ed      	b.n	8008b36 <_free_r+0x1e>
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	b10b      	cbz	r3, 8008b64 <_free_r+0x4c>
 8008b60:	42a3      	cmp	r3, r4
 8008b62:	d9fa      	bls.n	8008b5a <_free_r+0x42>
 8008b64:	6811      	ldr	r1, [r2, #0]
 8008b66:	1850      	adds	r0, r2, r1
 8008b68:	42a0      	cmp	r0, r4
 8008b6a:	d10b      	bne.n	8008b84 <_free_r+0x6c>
 8008b6c:	6820      	ldr	r0, [r4, #0]
 8008b6e:	4401      	add	r1, r0
 8008b70:	1850      	adds	r0, r2, r1
 8008b72:	4283      	cmp	r3, r0
 8008b74:	6011      	str	r1, [r2, #0]
 8008b76:	d1e0      	bne.n	8008b3a <_free_r+0x22>
 8008b78:	6818      	ldr	r0, [r3, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	6053      	str	r3, [r2, #4]
 8008b7e:	4408      	add	r0, r1
 8008b80:	6010      	str	r0, [r2, #0]
 8008b82:	e7da      	b.n	8008b3a <_free_r+0x22>
 8008b84:	d902      	bls.n	8008b8c <_free_r+0x74>
 8008b86:	230c      	movs	r3, #12
 8008b88:	602b      	str	r3, [r5, #0]
 8008b8a:	e7d6      	b.n	8008b3a <_free_r+0x22>
 8008b8c:	6820      	ldr	r0, [r4, #0]
 8008b8e:	1821      	adds	r1, r4, r0
 8008b90:	428b      	cmp	r3, r1
 8008b92:	bf04      	itt	eq
 8008b94:	6819      	ldreq	r1, [r3, #0]
 8008b96:	685b      	ldreq	r3, [r3, #4]
 8008b98:	6063      	str	r3, [r4, #4]
 8008b9a:	bf04      	itt	eq
 8008b9c:	1809      	addeq	r1, r1, r0
 8008b9e:	6021      	streq	r1, [r4, #0]
 8008ba0:	6054      	str	r4, [r2, #4]
 8008ba2:	e7ca      	b.n	8008b3a <_free_r+0x22>
 8008ba4:	bd38      	pop	{r3, r4, r5, pc}
 8008ba6:	bf00      	nop
 8008ba8:	200003bc 	.word	0x200003bc

08008bac <_Balloc>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	69c6      	ldr	r6, [r0, #28]
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	460d      	mov	r5, r1
 8008bb4:	b976      	cbnz	r6, 8008bd4 <_Balloc+0x28>
 8008bb6:	2010      	movs	r0, #16
 8008bb8:	f7fe f99e 	bl	8006ef8 <malloc>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	61e0      	str	r0, [r4, #28]
 8008bc0:	b920      	cbnz	r0, 8008bcc <_Balloc+0x20>
 8008bc2:	4b18      	ldr	r3, [pc, #96]	@ (8008c24 <_Balloc+0x78>)
 8008bc4:	4818      	ldr	r0, [pc, #96]	@ (8008c28 <_Balloc+0x7c>)
 8008bc6:	216b      	movs	r1, #107	@ 0x6b
 8008bc8:	f000 ff5c 	bl	8009a84 <__assert_func>
 8008bcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bd0:	6006      	str	r6, [r0, #0]
 8008bd2:	60c6      	str	r6, [r0, #12]
 8008bd4:	69e6      	ldr	r6, [r4, #28]
 8008bd6:	68f3      	ldr	r3, [r6, #12]
 8008bd8:	b183      	cbz	r3, 8008bfc <_Balloc+0x50>
 8008bda:	69e3      	ldr	r3, [r4, #28]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008be2:	b9b8      	cbnz	r0, 8008c14 <_Balloc+0x68>
 8008be4:	2101      	movs	r1, #1
 8008be6:	fa01 f605 	lsl.w	r6, r1, r5
 8008bea:	1d72      	adds	r2, r6, #5
 8008bec:	0092      	lsls	r2, r2, #2
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f000 ff66 	bl	8009ac0 <_calloc_r>
 8008bf4:	b160      	cbz	r0, 8008c10 <_Balloc+0x64>
 8008bf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bfa:	e00e      	b.n	8008c1a <_Balloc+0x6e>
 8008bfc:	2221      	movs	r2, #33	@ 0x21
 8008bfe:	2104      	movs	r1, #4
 8008c00:	4620      	mov	r0, r4
 8008c02:	f000 ff5d 	bl	8009ac0 <_calloc_r>
 8008c06:	69e3      	ldr	r3, [r4, #28]
 8008c08:	60f0      	str	r0, [r6, #12]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1e4      	bne.n	8008bda <_Balloc+0x2e>
 8008c10:	2000      	movs	r0, #0
 8008c12:	bd70      	pop	{r4, r5, r6, pc}
 8008c14:	6802      	ldr	r2, [r0, #0]
 8008c16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c20:	e7f7      	b.n	8008c12 <_Balloc+0x66>
 8008c22:	bf00      	nop
 8008c24:	0800ca39 	.word	0x0800ca39
 8008c28:	0800cab9 	.word	0x0800cab9

08008c2c <_Bfree>:
 8008c2c:	b570      	push	{r4, r5, r6, lr}
 8008c2e:	69c6      	ldr	r6, [r0, #28]
 8008c30:	4605      	mov	r5, r0
 8008c32:	460c      	mov	r4, r1
 8008c34:	b976      	cbnz	r6, 8008c54 <_Bfree+0x28>
 8008c36:	2010      	movs	r0, #16
 8008c38:	f7fe f95e 	bl	8006ef8 <malloc>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	61e8      	str	r0, [r5, #28]
 8008c40:	b920      	cbnz	r0, 8008c4c <_Bfree+0x20>
 8008c42:	4b09      	ldr	r3, [pc, #36]	@ (8008c68 <_Bfree+0x3c>)
 8008c44:	4809      	ldr	r0, [pc, #36]	@ (8008c6c <_Bfree+0x40>)
 8008c46:	218f      	movs	r1, #143	@ 0x8f
 8008c48:	f000 ff1c 	bl	8009a84 <__assert_func>
 8008c4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c50:	6006      	str	r6, [r0, #0]
 8008c52:	60c6      	str	r6, [r0, #12]
 8008c54:	b13c      	cbz	r4, 8008c66 <_Bfree+0x3a>
 8008c56:	69eb      	ldr	r3, [r5, #28]
 8008c58:	6862      	ldr	r2, [r4, #4]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c60:	6021      	str	r1, [r4, #0]
 8008c62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c66:	bd70      	pop	{r4, r5, r6, pc}
 8008c68:	0800ca39 	.word	0x0800ca39
 8008c6c:	0800cab9 	.word	0x0800cab9

08008c70 <__multadd>:
 8008c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c74:	690d      	ldr	r5, [r1, #16]
 8008c76:	4607      	mov	r7, r0
 8008c78:	460c      	mov	r4, r1
 8008c7a:	461e      	mov	r6, r3
 8008c7c:	f101 0c14 	add.w	ip, r1, #20
 8008c80:	2000      	movs	r0, #0
 8008c82:	f8dc 3000 	ldr.w	r3, [ip]
 8008c86:	b299      	uxth	r1, r3
 8008c88:	fb02 6101 	mla	r1, r2, r1, r6
 8008c8c:	0c1e      	lsrs	r6, r3, #16
 8008c8e:	0c0b      	lsrs	r3, r1, #16
 8008c90:	fb02 3306 	mla	r3, r2, r6, r3
 8008c94:	b289      	uxth	r1, r1
 8008c96:	3001      	adds	r0, #1
 8008c98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c9c:	4285      	cmp	r5, r0
 8008c9e:	f84c 1b04 	str.w	r1, [ip], #4
 8008ca2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ca6:	dcec      	bgt.n	8008c82 <__multadd+0x12>
 8008ca8:	b30e      	cbz	r6, 8008cee <__multadd+0x7e>
 8008caa:	68a3      	ldr	r3, [r4, #8]
 8008cac:	42ab      	cmp	r3, r5
 8008cae:	dc19      	bgt.n	8008ce4 <__multadd+0x74>
 8008cb0:	6861      	ldr	r1, [r4, #4]
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	3101      	adds	r1, #1
 8008cb6:	f7ff ff79 	bl	8008bac <_Balloc>
 8008cba:	4680      	mov	r8, r0
 8008cbc:	b928      	cbnz	r0, 8008cca <__multadd+0x5a>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf4 <__multadd+0x84>)
 8008cc2:	480d      	ldr	r0, [pc, #52]	@ (8008cf8 <__multadd+0x88>)
 8008cc4:	21ba      	movs	r1, #186	@ 0xba
 8008cc6:	f000 fedd 	bl	8009a84 <__assert_func>
 8008cca:	6922      	ldr	r2, [r4, #16]
 8008ccc:	3202      	adds	r2, #2
 8008cce:	f104 010c 	add.w	r1, r4, #12
 8008cd2:	0092      	lsls	r2, r2, #2
 8008cd4:	300c      	adds	r0, #12
 8008cd6:	f000 fec7 	bl	8009a68 <memcpy>
 8008cda:	4621      	mov	r1, r4
 8008cdc:	4638      	mov	r0, r7
 8008cde:	f7ff ffa5 	bl	8008c2c <_Bfree>
 8008ce2:	4644      	mov	r4, r8
 8008ce4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ce8:	3501      	adds	r5, #1
 8008cea:	615e      	str	r6, [r3, #20]
 8008cec:	6125      	str	r5, [r4, #16]
 8008cee:	4620      	mov	r0, r4
 8008cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf4:	0800caa8 	.word	0x0800caa8
 8008cf8:	0800cab9 	.word	0x0800cab9

08008cfc <__hi0bits>:
 8008cfc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d00:	4603      	mov	r3, r0
 8008d02:	bf36      	itet	cc
 8008d04:	0403      	lslcc	r3, r0, #16
 8008d06:	2000      	movcs	r0, #0
 8008d08:	2010      	movcc	r0, #16
 8008d0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d0e:	bf3c      	itt	cc
 8008d10:	021b      	lslcc	r3, r3, #8
 8008d12:	3008      	addcc	r0, #8
 8008d14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d18:	bf3c      	itt	cc
 8008d1a:	011b      	lslcc	r3, r3, #4
 8008d1c:	3004      	addcc	r0, #4
 8008d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d22:	bf3c      	itt	cc
 8008d24:	009b      	lslcc	r3, r3, #2
 8008d26:	3002      	addcc	r0, #2
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	db05      	blt.n	8008d38 <__hi0bits+0x3c>
 8008d2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d30:	f100 0001 	add.w	r0, r0, #1
 8008d34:	bf08      	it	eq
 8008d36:	2020      	moveq	r0, #32
 8008d38:	4770      	bx	lr

08008d3a <__lo0bits>:
 8008d3a:	6803      	ldr	r3, [r0, #0]
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	f013 0007 	ands.w	r0, r3, #7
 8008d42:	d00b      	beq.n	8008d5c <__lo0bits+0x22>
 8008d44:	07d9      	lsls	r1, r3, #31
 8008d46:	d421      	bmi.n	8008d8c <__lo0bits+0x52>
 8008d48:	0798      	lsls	r0, r3, #30
 8008d4a:	bf49      	itett	mi
 8008d4c:	085b      	lsrmi	r3, r3, #1
 8008d4e:	089b      	lsrpl	r3, r3, #2
 8008d50:	2001      	movmi	r0, #1
 8008d52:	6013      	strmi	r3, [r2, #0]
 8008d54:	bf5c      	itt	pl
 8008d56:	6013      	strpl	r3, [r2, #0]
 8008d58:	2002      	movpl	r0, #2
 8008d5a:	4770      	bx	lr
 8008d5c:	b299      	uxth	r1, r3
 8008d5e:	b909      	cbnz	r1, 8008d64 <__lo0bits+0x2a>
 8008d60:	0c1b      	lsrs	r3, r3, #16
 8008d62:	2010      	movs	r0, #16
 8008d64:	b2d9      	uxtb	r1, r3
 8008d66:	b909      	cbnz	r1, 8008d6c <__lo0bits+0x32>
 8008d68:	3008      	adds	r0, #8
 8008d6a:	0a1b      	lsrs	r3, r3, #8
 8008d6c:	0719      	lsls	r1, r3, #28
 8008d6e:	bf04      	itt	eq
 8008d70:	091b      	lsreq	r3, r3, #4
 8008d72:	3004      	addeq	r0, #4
 8008d74:	0799      	lsls	r1, r3, #30
 8008d76:	bf04      	itt	eq
 8008d78:	089b      	lsreq	r3, r3, #2
 8008d7a:	3002      	addeq	r0, #2
 8008d7c:	07d9      	lsls	r1, r3, #31
 8008d7e:	d403      	bmi.n	8008d88 <__lo0bits+0x4e>
 8008d80:	085b      	lsrs	r3, r3, #1
 8008d82:	f100 0001 	add.w	r0, r0, #1
 8008d86:	d003      	beq.n	8008d90 <__lo0bits+0x56>
 8008d88:	6013      	str	r3, [r2, #0]
 8008d8a:	4770      	bx	lr
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	4770      	bx	lr
 8008d90:	2020      	movs	r0, #32
 8008d92:	4770      	bx	lr

08008d94 <__i2b>:
 8008d94:	b510      	push	{r4, lr}
 8008d96:	460c      	mov	r4, r1
 8008d98:	2101      	movs	r1, #1
 8008d9a:	f7ff ff07 	bl	8008bac <_Balloc>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	b928      	cbnz	r0, 8008dae <__i2b+0x1a>
 8008da2:	4b05      	ldr	r3, [pc, #20]	@ (8008db8 <__i2b+0x24>)
 8008da4:	4805      	ldr	r0, [pc, #20]	@ (8008dbc <__i2b+0x28>)
 8008da6:	f240 1145 	movw	r1, #325	@ 0x145
 8008daa:	f000 fe6b 	bl	8009a84 <__assert_func>
 8008dae:	2301      	movs	r3, #1
 8008db0:	6144      	str	r4, [r0, #20]
 8008db2:	6103      	str	r3, [r0, #16]
 8008db4:	bd10      	pop	{r4, pc}
 8008db6:	bf00      	nop
 8008db8:	0800caa8 	.word	0x0800caa8
 8008dbc:	0800cab9 	.word	0x0800cab9

08008dc0 <__multiply>:
 8008dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	4617      	mov	r7, r2
 8008dc6:	690a      	ldr	r2, [r1, #16]
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	bfa8      	it	ge
 8008dce:	463b      	movge	r3, r7
 8008dd0:	4689      	mov	r9, r1
 8008dd2:	bfa4      	itt	ge
 8008dd4:	460f      	movge	r7, r1
 8008dd6:	4699      	movge	r9, r3
 8008dd8:	693d      	ldr	r5, [r7, #16]
 8008dda:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	6879      	ldr	r1, [r7, #4]
 8008de2:	eb05 060a 	add.w	r6, r5, sl
 8008de6:	42b3      	cmp	r3, r6
 8008de8:	b085      	sub	sp, #20
 8008dea:	bfb8      	it	lt
 8008dec:	3101      	addlt	r1, #1
 8008dee:	f7ff fedd 	bl	8008bac <_Balloc>
 8008df2:	b930      	cbnz	r0, 8008e02 <__multiply+0x42>
 8008df4:	4602      	mov	r2, r0
 8008df6:	4b41      	ldr	r3, [pc, #260]	@ (8008efc <__multiply+0x13c>)
 8008df8:	4841      	ldr	r0, [pc, #260]	@ (8008f00 <__multiply+0x140>)
 8008dfa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008dfe:	f000 fe41 	bl	8009a84 <__assert_func>
 8008e02:	f100 0414 	add.w	r4, r0, #20
 8008e06:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008e0a:	4623      	mov	r3, r4
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	4573      	cmp	r3, lr
 8008e10:	d320      	bcc.n	8008e54 <__multiply+0x94>
 8008e12:	f107 0814 	add.w	r8, r7, #20
 8008e16:	f109 0114 	add.w	r1, r9, #20
 8008e1a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008e1e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008e22:	9302      	str	r3, [sp, #8]
 8008e24:	1beb      	subs	r3, r5, r7
 8008e26:	3b15      	subs	r3, #21
 8008e28:	f023 0303 	bic.w	r3, r3, #3
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	3715      	adds	r7, #21
 8008e30:	42bd      	cmp	r5, r7
 8008e32:	bf38      	it	cc
 8008e34:	2304      	movcc	r3, #4
 8008e36:	9301      	str	r3, [sp, #4]
 8008e38:	9b02      	ldr	r3, [sp, #8]
 8008e3a:	9103      	str	r1, [sp, #12]
 8008e3c:	428b      	cmp	r3, r1
 8008e3e:	d80c      	bhi.n	8008e5a <__multiply+0x9a>
 8008e40:	2e00      	cmp	r6, #0
 8008e42:	dd03      	ble.n	8008e4c <__multiply+0x8c>
 8008e44:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d055      	beq.n	8008ef8 <__multiply+0x138>
 8008e4c:	6106      	str	r6, [r0, #16]
 8008e4e:	b005      	add	sp, #20
 8008e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e54:	f843 2b04 	str.w	r2, [r3], #4
 8008e58:	e7d9      	b.n	8008e0e <__multiply+0x4e>
 8008e5a:	f8b1 a000 	ldrh.w	sl, [r1]
 8008e5e:	f1ba 0f00 	cmp.w	sl, #0
 8008e62:	d01f      	beq.n	8008ea4 <__multiply+0xe4>
 8008e64:	46c4      	mov	ip, r8
 8008e66:	46a1      	mov	r9, r4
 8008e68:	2700      	movs	r7, #0
 8008e6a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008e6e:	f8d9 3000 	ldr.w	r3, [r9]
 8008e72:	fa1f fb82 	uxth.w	fp, r2
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	fb0a 330b 	mla	r3, sl, fp, r3
 8008e7c:	443b      	add	r3, r7
 8008e7e:	f8d9 7000 	ldr.w	r7, [r9]
 8008e82:	0c12      	lsrs	r2, r2, #16
 8008e84:	0c3f      	lsrs	r7, r7, #16
 8008e86:	fb0a 7202 	mla	r2, sl, r2, r7
 8008e8a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e94:	4565      	cmp	r5, ip
 8008e96:	f849 3b04 	str.w	r3, [r9], #4
 8008e9a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008e9e:	d8e4      	bhi.n	8008e6a <__multiply+0xaa>
 8008ea0:	9b01      	ldr	r3, [sp, #4]
 8008ea2:	50e7      	str	r7, [r4, r3]
 8008ea4:	9b03      	ldr	r3, [sp, #12]
 8008ea6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008eaa:	3104      	adds	r1, #4
 8008eac:	f1b9 0f00 	cmp.w	r9, #0
 8008eb0:	d020      	beq.n	8008ef4 <__multiply+0x134>
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	4647      	mov	r7, r8
 8008eb6:	46a4      	mov	ip, r4
 8008eb8:	f04f 0a00 	mov.w	sl, #0
 8008ebc:	f8b7 b000 	ldrh.w	fp, [r7]
 8008ec0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008ec4:	fb09 220b 	mla	r2, r9, fp, r2
 8008ec8:	4452      	add	r2, sl
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ed0:	f84c 3b04 	str.w	r3, [ip], #4
 8008ed4:	f857 3b04 	ldr.w	r3, [r7], #4
 8008ed8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008edc:	f8bc 3000 	ldrh.w	r3, [ip]
 8008ee0:	fb09 330a 	mla	r3, r9, sl, r3
 8008ee4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008ee8:	42bd      	cmp	r5, r7
 8008eea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008eee:	d8e5      	bhi.n	8008ebc <__multiply+0xfc>
 8008ef0:	9a01      	ldr	r2, [sp, #4]
 8008ef2:	50a3      	str	r3, [r4, r2]
 8008ef4:	3404      	adds	r4, #4
 8008ef6:	e79f      	b.n	8008e38 <__multiply+0x78>
 8008ef8:	3e01      	subs	r6, #1
 8008efa:	e7a1      	b.n	8008e40 <__multiply+0x80>
 8008efc:	0800caa8 	.word	0x0800caa8
 8008f00:	0800cab9 	.word	0x0800cab9

08008f04 <__pow5mult>:
 8008f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f08:	4615      	mov	r5, r2
 8008f0a:	f012 0203 	ands.w	r2, r2, #3
 8008f0e:	4607      	mov	r7, r0
 8008f10:	460e      	mov	r6, r1
 8008f12:	d007      	beq.n	8008f24 <__pow5mult+0x20>
 8008f14:	4c25      	ldr	r4, [pc, #148]	@ (8008fac <__pow5mult+0xa8>)
 8008f16:	3a01      	subs	r2, #1
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f1e:	f7ff fea7 	bl	8008c70 <__multadd>
 8008f22:	4606      	mov	r6, r0
 8008f24:	10ad      	asrs	r5, r5, #2
 8008f26:	d03d      	beq.n	8008fa4 <__pow5mult+0xa0>
 8008f28:	69fc      	ldr	r4, [r7, #28]
 8008f2a:	b97c      	cbnz	r4, 8008f4c <__pow5mult+0x48>
 8008f2c:	2010      	movs	r0, #16
 8008f2e:	f7fd ffe3 	bl	8006ef8 <malloc>
 8008f32:	4602      	mov	r2, r0
 8008f34:	61f8      	str	r0, [r7, #28]
 8008f36:	b928      	cbnz	r0, 8008f44 <__pow5mult+0x40>
 8008f38:	4b1d      	ldr	r3, [pc, #116]	@ (8008fb0 <__pow5mult+0xac>)
 8008f3a:	481e      	ldr	r0, [pc, #120]	@ (8008fb4 <__pow5mult+0xb0>)
 8008f3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008f40:	f000 fda0 	bl	8009a84 <__assert_func>
 8008f44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f48:	6004      	str	r4, [r0, #0]
 8008f4a:	60c4      	str	r4, [r0, #12]
 8008f4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008f50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f54:	b94c      	cbnz	r4, 8008f6a <__pow5mult+0x66>
 8008f56:	f240 2171 	movw	r1, #625	@ 0x271
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	f7ff ff1a 	bl	8008d94 <__i2b>
 8008f60:	2300      	movs	r3, #0
 8008f62:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f66:	4604      	mov	r4, r0
 8008f68:	6003      	str	r3, [r0, #0]
 8008f6a:	f04f 0900 	mov.w	r9, #0
 8008f6e:	07eb      	lsls	r3, r5, #31
 8008f70:	d50a      	bpl.n	8008f88 <__pow5mult+0x84>
 8008f72:	4631      	mov	r1, r6
 8008f74:	4622      	mov	r2, r4
 8008f76:	4638      	mov	r0, r7
 8008f78:	f7ff ff22 	bl	8008dc0 <__multiply>
 8008f7c:	4631      	mov	r1, r6
 8008f7e:	4680      	mov	r8, r0
 8008f80:	4638      	mov	r0, r7
 8008f82:	f7ff fe53 	bl	8008c2c <_Bfree>
 8008f86:	4646      	mov	r6, r8
 8008f88:	106d      	asrs	r5, r5, #1
 8008f8a:	d00b      	beq.n	8008fa4 <__pow5mult+0xa0>
 8008f8c:	6820      	ldr	r0, [r4, #0]
 8008f8e:	b938      	cbnz	r0, 8008fa0 <__pow5mult+0x9c>
 8008f90:	4622      	mov	r2, r4
 8008f92:	4621      	mov	r1, r4
 8008f94:	4638      	mov	r0, r7
 8008f96:	f7ff ff13 	bl	8008dc0 <__multiply>
 8008f9a:	6020      	str	r0, [r4, #0]
 8008f9c:	f8c0 9000 	str.w	r9, [r0]
 8008fa0:	4604      	mov	r4, r0
 8008fa2:	e7e4      	b.n	8008f6e <__pow5mult+0x6a>
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008faa:	bf00      	nop
 8008fac:	0800cb6c 	.word	0x0800cb6c
 8008fb0:	0800ca39 	.word	0x0800ca39
 8008fb4:	0800cab9 	.word	0x0800cab9

08008fb8 <__lshift>:
 8008fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fbc:	460c      	mov	r4, r1
 8008fbe:	6849      	ldr	r1, [r1, #4]
 8008fc0:	6923      	ldr	r3, [r4, #16]
 8008fc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fc6:	68a3      	ldr	r3, [r4, #8]
 8008fc8:	4607      	mov	r7, r0
 8008fca:	4691      	mov	r9, r2
 8008fcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008fd0:	f108 0601 	add.w	r6, r8, #1
 8008fd4:	42b3      	cmp	r3, r6
 8008fd6:	db0b      	blt.n	8008ff0 <__lshift+0x38>
 8008fd8:	4638      	mov	r0, r7
 8008fda:	f7ff fde7 	bl	8008bac <_Balloc>
 8008fde:	4605      	mov	r5, r0
 8008fe0:	b948      	cbnz	r0, 8008ff6 <__lshift+0x3e>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	4b28      	ldr	r3, [pc, #160]	@ (8009088 <__lshift+0xd0>)
 8008fe6:	4829      	ldr	r0, [pc, #164]	@ (800908c <__lshift+0xd4>)
 8008fe8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008fec:	f000 fd4a 	bl	8009a84 <__assert_func>
 8008ff0:	3101      	adds	r1, #1
 8008ff2:	005b      	lsls	r3, r3, #1
 8008ff4:	e7ee      	b.n	8008fd4 <__lshift+0x1c>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f100 0114 	add.w	r1, r0, #20
 8008ffc:	f100 0210 	add.w	r2, r0, #16
 8009000:	4618      	mov	r0, r3
 8009002:	4553      	cmp	r3, sl
 8009004:	db33      	blt.n	800906e <__lshift+0xb6>
 8009006:	6920      	ldr	r0, [r4, #16]
 8009008:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800900c:	f104 0314 	add.w	r3, r4, #20
 8009010:	f019 091f 	ands.w	r9, r9, #31
 8009014:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009018:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800901c:	d02b      	beq.n	8009076 <__lshift+0xbe>
 800901e:	f1c9 0e20 	rsb	lr, r9, #32
 8009022:	468a      	mov	sl, r1
 8009024:	2200      	movs	r2, #0
 8009026:	6818      	ldr	r0, [r3, #0]
 8009028:	fa00 f009 	lsl.w	r0, r0, r9
 800902c:	4310      	orrs	r0, r2
 800902e:	f84a 0b04 	str.w	r0, [sl], #4
 8009032:	f853 2b04 	ldr.w	r2, [r3], #4
 8009036:	459c      	cmp	ip, r3
 8009038:	fa22 f20e 	lsr.w	r2, r2, lr
 800903c:	d8f3      	bhi.n	8009026 <__lshift+0x6e>
 800903e:	ebac 0304 	sub.w	r3, ip, r4
 8009042:	3b15      	subs	r3, #21
 8009044:	f023 0303 	bic.w	r3, r3, #3
 8009048:	3304      	adds	r3, #4
 800904a:	f104 0015 	add.w	r0, r4, #21
 800904e:	4560      	cmp	r0, ip
 8009050:	bf88      	it	hi
 8009052:	2304      	movhi	r3, #4
 8009054:	50ca      	str	r2, [r1, r3]
 8009056:	b10a      	cbz	r2, 800905c <__lshift+0xa4>
 8009058:	f108 0602 	add.w	r6, r8, #2
 800905c:	3e01      	subs	r6, #1
 800905e:	4638      	mov	r0, r7
 8009060:	612e      	str	r6, [r5, #16]
 8009062:	4621      	mov	r1, r4
 8009064:	f7ff fde2 	bl	8008c2c <_Bfree>
 8009068:	4628      	mov	r0, r5
 800906a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009072:	3301      	adds	r3, #1
 8009074:	e7c5      	b.n	8009002 <__lshift+0x4a>
 8009076:	3904      	subs	r1, #4
 8009078:	f853 2b04 	ldr.w	r2, [r3], #4
 800907c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009080:	459c      	cmp	ip, r3
 8009082:	d8f9      	bhi.n	8009078 <__lshift+0xc0>
 8009084:	e7ea      	b.n	800905c <__lshift+0xa4>
 8009086:	bf00      	nop
 8009088:	0800caa8 	.word	0x0800caa8
 800908c:	0800cab9 	.word	0x0800cab9

08009090 <__mcmp>:
 8009090:	690a      	ldr	r2, [r1, #16]
 8009092:	4603      	mov	r3, r0
 8009094:	6900      	ldr	r0, [r0, #16]
 8009096:	1a80      	subs	r0, r0, r2
 8009098:	b530      	push	{r4, r5, lr}
 800909a:	d10e      	bne.n	80090ba <__mcmp+0x2a>
 800909c:	3314      	adds	r3, #20
 800909e:	3114      	adds	r1, #20
 80090a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80090a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80090a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80090ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80090b0:	4295      	cmp	r5, r2
 80090b2:	d003      	beq.n	80090bc <__mcmp+0x2c>
 80090b4:	d205      	bcs.n	80090c2 <__mcmp+0x32>
 80090b6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ba:	bd30      	pop	{r4, r5, pc}
 80090bc:	42a3      	cmp	r3, r4
 80090be:	d3f3      	bcc.n	80090a8 <__mcmp+0x18>
 80090c0:	e7fb      	b.n	80090ba <__mcmp+0x2a>
 80090c2:	2001      	movs	r0, #1
 80090c4:	e7f9      	b.n	80090ba <__mcmp+0x2a>
	...

080090c8 <__mdiff>:
 80090c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090cc:	4689      	mov	r9, r1
 80090ce:	4606      	mov	r6, r0
 80090d0:	4611      	mov	r1, r2
 80090d2:	4648      	mov	r0, r9
 80090d4:	4614      	mov	r4, r2
 80090d6:	f7ff ffdb 	bl	8009090 <__mcmp>
 80090da:	1e05      	subs	r5, r0, #0
 80090dc:	d112      	bne.n	8009104 <__mdiff+0x3c>
 80090de:	4629      	mov	r1, r5
 80090e0:	4630      	mov	r0, r6
 80090e2:	f7ff fd63 	bl	8008bac <_Balloc>
 80090e6:	4602      	mov	r2, r0
 80090e8:	b928      	cbnz	r0, 80090f6 <__mdiff+0x2e>
 80090ea:	4b3f      	ldr	r3, [pc, #252]	@ (80091e8 <__mdiff+0x120>)
 80090ec:	f240 2137 	movw	r1, #567	@ 0x237
 80090f0:	483e      	ldr	r0, [pc, #248]	@ (80091ec <__mdiff+0x124>)
 80090f2:	f000 fcc7 	bl	8009a84 <__assert_func>
 80090f6:	2301      	movs	r3, #1
 80090f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80090fc:	4610      	mov	r0, r2
 80090fe:	b003      	add	sp, #12
 8009100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009104:	bfbc      	itt	lt
 8009106:	464b      	movlt	r3, r9
 8009108:	46a1      	movlt	r9, r4
 800910a:	4630      	mov	r0, r6
 800910c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009110:	bfba      	itte	lt
 8009112:	461c      	movlt	r4, r3
 8009114:	2501      	movlt	r5, #1
 8009116:	2500      	movge	r5, #0
 8009118:	f7ff fd48 	bl	8008bac <_Balloc>
 800911c:	4602      	mov	r2, r0
 800911e:	b918      	cbnz	r0, 8009128 <__mdiff+0x60>
 8009120:	4b31      	ldr	r3, [pc, #196]	@ (80091e8 <__mdiff+0x120>)
 8009122:	f240 2145 	movw	r1, #581	@ 0x245
 8009126:	e7e3      	b.n	80090f0 <__mdiff+0x28>
 8009128:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800912c:	6926      	ldr	r6, [r4, #16]
 800912e:	60c5      	str	r5, [r0, #12]
 8009130:	f109 0310 	add.w	r3, r9, #16
 8009134:	f109 0514 	add.w	r5, r9, #20
 8009138:	f104 0e14 	add.w	lr, r4, #20
 800913c:	f100 0b14 	add.w	fp, r0, #20
 8009140:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009144:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009148:	9301      	str	r3, [sp, #4]
 800914a:	46d9      	mov	r9, fp
 800914c:	f04f 0c00 	mov.w	ip, #0
 8009150:	9b01      	ldr	r3, [sp, #4]
 8009152:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009156:	f853 af04 	ldr.w	sl, [r3, #4]!
 800915a:	9301      	str	r3, [sp, #4]
 800915c:	fa1f f38a 	uxth.w	r3, sl
 8009160:	4619      	mov	r1, r3
 8009162:	b283      	uxth	r3, r0
 8009164:	1acb      	subs	r3, r1, r3
 8009166:	0c00      	lsrs	r0, r0, #16
 8009168:	4463      	add	r3, ip
 800916a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800916e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009172:	b29b      	uxth	r3, r3
 8009174:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009178:	4576      	cmp	r6, lr
 800917a:	f849 3b04 	str.w	r3, [r9], #4
 800917e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009182:	d8e5      	bhi.n	8009150 <__mdiff+0x88>
 8009184:	1b33      	subs	r3, r6, r4
 8009186:	3b15      	subs	r3, #21
 8009188:	f023 0303 	bic.w	r3, r3, #3
 800918c:	3415      	adds	r4, #21
 800918e:	3304      	adds	r3, #4
 8009190:	42a6      	cmp	r6, r4
 8009192:	bf38      	it	cc
 8009194:	2304      	movcc	r3, #4
 8009196:	441d      	add	r5, r3
 8009198:	445b      	add	r3, fp
 800919a:	461e      	mov	r6, r3
 800919c:	462c      	mov	r4, r5
 800919e:	4544      	cmp	r4, r8
 80091a0:	d30e      	bcc.n	80091c0 <__mdiff+0xf8>
 80091a2:	f108 0103 	add.w	r1, r8, #3
 80091a6:	1b49      	subs	r1, r1, r5
 80091a8:	f021 0103 	bic.w	r1, r1, #3
 80091ac:	3d03      	subs	r5, #3
 80091ae:	45a8      	cmp	r8, r5
 80091b0:	bf38      	it	cc
 80091b2:	2100      	movcc	r1, #0
 80091b4:	440b      	add	r3, r1
 80091b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091ba:	b191      	cbz	r1, 80091e2 <__mdiff+0x11a>
 80091bc:	6117      	str	r7, [r2, #16]
 80091be:	e79d      	b.n	80090fc <__mdiff+0x34>
 80091c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80091c4:	46e6      	mov	lr, ip
 80091c6:	0c08      	lsrs	r0, r1, #16
 80091c8:	fa1c fc81 	uxtah	ip, ip, r1
 80091cc:	4471      	add	r1, lr
 80091ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80091d2:	b289      	uxth	r1, r1
 80091d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80091d8:	f846 1b04 	str.w	r1, [r6], #4
 80091dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091e0:	e7dd      	b.n	800919e <__mdiff+0xd6>
 80091e2:	3f01      	subs	r7, #1
 80091e4:	e7e7      	b.n	80091b6 <__mdiff+0xee>
 80091e6:	bf00      	nop
 80091e8:	0800caa8 	.word	0x0800caa8
 80091ec:	0800cab9 	.word	0x0800cab9

080091f0 <__d2b>:
 80091f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091f4:	460f      	mov	r7, r1
 80091f6:	2101      	movs	r1, #1
 80091f8:	ec59 8b10 	vmov	r8, r9, d0
 80091fc:	4616      	mov	r6, r2
 80091fe:	f7ff fcd5 	bl	8008bac <_Balloc>
 8009202:	4604      	mov	r4, r0
 8009204:	b930      	cbnz	r0, 8009214 <__d2b+0x24>
 8009206:	4602      	mov	r2, r0
 8009208:	4b23      	ldr	r3, [pc, #140]	@ (8009298 <__d2b+0xa8>)
 800920a:	4824      	ldr	r0, [pc, #144]	@ (800929c <__d2b+0xac>)
 800920c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009210:	f000 fc38 	bl	8009a84 <__assert_func>
 8009214:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009218:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800921c:	b10d      	cbz	r5, 8009222 <__d2b+0x32>
 800921e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009222:	9301      	str	r3, [sp, #4]
 8009224:	f1b8 0300 	subs.w	r3, r8, #0
 8009228:	d023      	beq.n	8009272 <__d2b+0x82>
 800922a:	4668      	mov	r0, sp
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	f7ff fd84 	bl	8008d3a <__lo0bits>
 8009232:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009236:	b1d0      	cbz	r0, 800926e <__d2b+0x7e>
 8009238:	f1c0 0320 	rsb	r3, r0, #32
 800923c:	fa02 f303 	lsl.w	r3, r2, r3
 8009240:	430b      	orrs	r3, r1
 8009242:	40c2      	lsrs	r2, r0
 8009244:	6163      	str	r3, [r4, #20]
 8009246:	9201      	str	r2, [sp, #4]
 8009248:	9b01      	ldr	r3, [sp, #4]
 800924a:	61a3      	str	r3, [r4, #24]
 800924c:	2b00      	cmp	r3, #0
 800924e:	bf0c      	ite	eq
 8009250:	2201      	moveq	r2, #1
 8009252:	2202      	movne	r2, #2
 8009254:	6122      	str	r2, [r4, #16]
 8009256:	b1a5      	cbz	r5, 8009282 <__d2b+0x92>
 8009258:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800925c:	4405      	add	r5, r0
 800925e:	603d      	str	r5, [r7, #0]
 8009260:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009264:	6030      	str	r0, [r6, #0]
 8009266:	4620      	mov	r0, r4
 8009268:	b003      	add	sp, #12
 800926a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800926e:	6161      	str	r1, [r4, #20]
 8009270:	e7ea      	b.n	8009248 <__d2b+0x58>
 8009272:	a801      	add	r0, sp, #4
 8009274:	f7ff fd61 	bl	8008d3a <__lo0bits>
 8009278:	9b01      	ldr	r3, [sp, #4]
 800927a:	6163      	str	r3, [r4, #20]
 800927c:	3020      	adds	r0, #32
 800927e:	2201      	movs	r2, #1
 8009280:	e7e8      	b.n	8009254 <__d2b+0x64>
 8009282:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009286:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800928a:	6038      	str	r0, [r7, #0]
 800928c:	6918      	ldr	r0, [r3, #16]
 800928e:	f7ff fd35 	bl	8008cfc <__hi0bits>
 8009292:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009296:	e7e5      	b.n	8009264 <__d2b+0x74>
 8009298:	0800caa8 	.word	0x0800caa8
 800929c:	0800cab9 	.word	0x0800cab9

080092a0 <__ssputs_r>:
 80092a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a4:	688e      	ldr	r6, [r1, #8]
 80092a6:	461f      	mov	r7, r3
 80092a8:	42be      	cmp	r6, r7
 80092aa:	680b      	ldr	r3, [r1, #0]
 80092ac:	4682      	mov	sl, r0
 80092ae:	460c      	mov	r4, r1
 80092b0:	4690      	mov	r8, r2
 80092b2:	d82d      	bhi.n	8009310 <__ssputs_r+0x70>
 80092b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80092bc:	d026      	beq.n	800930c <__ssputs_r+0x6c>
 80092be:	6965      	ldr	r5, [r4, #20]
 80092c0:	6909      	ldr	r1, [r1, #16]
 80092c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092c6:	eba3 0901 	sub.w	r9, r3, r1
 80092ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092ce:	1c7b      	adds	r3, r7, #1
 80092d0:	444b      	add	r3, r9
 80092d2:	106d      	asrs	r5, r5, #1
 80092d4:	429d      	cmp	r5, r3
 80092d6:	bf38      	it	cc
 80092d8:	461d      	movcc	r5, r3
 80092da:	0553      	lsls	r3, r2, #21
 80092dc:	d527      	bpl.n	800932e <__ssputs_r+0x8e>
 80092de:	4629      	mov	r1, r5
 80092e0:	f7fd fe34 	bl	8006f4c <_malloc_r>
 80092e4:	4606      	mov	r6, r0
 80092e6:	b360      	cbz	r0, 8009342 <__ssputs_r+0xa2>
 80092e8:	6921      	ldr	r1, [r4, #16]
 80092ea:	464a      	mov	r2, r9
 80092ec:	f000 fbbc 	bl	8009a68 <memcpy>
 80092f0:	89a3      	ldrh	r3, [r4, #12]
 80092f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80092f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092fa:	81a3      	strh	r3, [r4, #12]
 80092fc:	6126      	str	r6, [r4, #16]
 80092fe:	6165      	str	r5, [r4, #20]
 8009300:	444e      	add	r6, r9
 8009302:	eba5 0509 	sub.w	r5, r5, r9
 8009306:	6026      	str	r6, [r4, #0]
 8009308:	60a5      	str	r5, [r4, #8]
 800930a:	463e      	mov	r6, r7
 800930c:	42be      	cmp	r6, r7
 800930e:	d900      	bls.n	8009312 <__ssputs_r+0x72>
 8009310:	463e      	mov	r6, r7
 8009312:	6820      	ldr	r0, [r4, #0]
 8009314:	4632      	mov	r2, r6
 8009316:	4641      	mov	r1, r8
 8009318:	f000 fb6a 	bl	80099f0 <memmove>
 800931c:	68a3      	ldr	r3, [r4, #8]
 800931e:	1b9b      	subs	r3, r3, r6
 8009320:	60a3      	str	r3, [r4, #8]
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	4433      	add	r3, r6
 8009326:	6023      	str	r3, [r4, #0]
 8009328:	2000      	movs	r0, #0
 800932a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800932e:	462a      	mov	r2, r5
 8009330:	f000 fbec 	bl	8009b0c <_realloc_r>
 8009334:	4606      	mov	r6, r0
 8009336:	2800      	cmp	r0, #0
 8009338:	d1e0      	bne.n	80092fc <__ssputs_r+0x5c>
 800933a:	6921      	ldr	r1, [r4, #16]
 800933c:	4650      	mov	r0, sl
 800933e:	f7ff fbeb 	bl	8008b18 <_free_r>
 8009342:	230c      	movs	r3, #12
 8009344:	f8ca 3000 	str.w	r3, [sl]
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800934e:	81a3      	strh	r3, [r4, #12]
 8009350:	f04f 30ff 	mov.w	r0, #4294967295
 8009354:	e7e9      	b.n	800932a <__ssputs_r+0x8a>
	...

08009358 <_svfiprintf_r>:
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	4698      	mov	r8, r3
 800935e:	898b      	ldrh	r3, [r1, #12]
 8009360:	061b      	lsls	r3, r3, #24
 8009362:	b09d      	sub	sp, #116	@ 0x74
 8009364:	4607      	mov	r7, r0
 8009366:	460d      	mov	r5, r1
 8009368:	4614      	mov	r4, r2
 800936a:	d510      	bpl.n	800938e <_svfiprintf_r+0x36>
 800936c:	690b      	ldr	r3, [r1, #16]
 800936e:	b973      	cbnz	r3, 800938e <_svfiprintf_r+0x36>
 8009370:	2140      	movs	r1, #64	@ 0x40
 8009372:	f7fd fdeb 	bl	8006f4c <_malloc_r>
 8009376:	6028      	str	r0, [r5, #0]
 8009378:	6128      	str	r0, [r5, #16]
 800937a:	b930      	cbnz	r0, 800938a <_svfiprintf_r+0x32>
 800937c:	230c      	movs	r3, #12
 800937e:	603b      	str	r3, [r7, #0]
 8009380:	f04f 30ff 	mov.w	r0, #4294967295
 8009384:	b01d      	add	sp, #116	@ 0x74
 8009386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938a:	2340      	movs	r3, #64	@ 0x40
 800938c:	616b      	str	r3, [r5, #20]
 800938e:	2300      	movs	r3, #0
 8009390:	9309      	str	r3, [sp, #36]	@ 0x24
 8009392:	2320      	movs	r3, #32
 8009394:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009398:	f8cd 800c 	str.w	r8, [sp, #12]
 800939c:	2330      	movs	r3, #48	@ 0x30
 800939e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800953c <_svfiprintf_r+0x1e4>
 80093a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093a6:	f04f 0901 	mov.w	r9, #1
 80093aa:	4623      	mov	r3, r4
 80093ac:	469a      	mov	sl, r3
 80093ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093b2:	b10a      	cbz	r2, 80093b8 <_svfiprintf_r+0x60>
 80093b4:	2a25      	cmp	r2, #37	@ 0x25
 80093b6:	d1f9      	bne.n	80093ac <_svfiprintf_r+0x54>
 80093b8:	ebba 0b04 	subs.w	fp, sl, r4
 80093bc:	d00b      	beq.n	80093d6 <_svfiprintf_r+0x7e>
 80093be:	465b      	mov	r3, fp
 80093c0:	4622      	mov	r2, r4
 80093c2:	4629      	mov	r1, r5
 80093c4:	4638      	mov	r0, r7
 80093c6:	f7ff ff6b 	bl	80092a0 <__ssputs_r>
 80093ca:	3001      	adds	r0, #1
 80093cc:	f000 80a7 	beq.w	800951e <_svfiprintf_r+0x1c6>
 80093d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093d2:	445a      	add	r2, fp
 80093d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80093d6:	f89a 3000 	ldrb.w	r3, [sl]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f000 809f 	beq.w	800951e <_svfiprintf_r+0x1c6>
 80093e0:	2300      	movs	r3, #0
 80093e2:	f04f 32ff 	mov.w	r2, #4294967295
 80093e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093ea:	f10a 0a01 	add.w	sl, sl, #1
 80093ee:	9304      	str	r3, [sp, #16]
 80093f0:	9307      	str	r3, [sp, #28]
 80093f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80093f8:	4654      	mov	r4, sl
 80093fa:	2205      	movs	r2, #5
 80093fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009400:	484e      	ldr	r0, [pc, #312]	@ (800953c <_svfiprintf_r+0x1e4>)
 8009402:	f7f6 fee5 	bl	80001d0 <memchr>
 8009406:	9a04      	ldr	r2, [sp, #16]
 8009408:	b9d8      	cbnz	r0, 8009442 <_svfiprintf_r+0xea>
 800940a:	06d0      	lsls	r0, r2, #27
 800940c:	bf44      	itt	mi
 800940e:	2320      	movmi	r3, #32
 8009410:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009414:	0711      	lsls	r1, r2, #28
 8009416:	bf44      	itt	mi
 8009418:	232b      	movmi	r3, #43	@ 0x2b
 800941a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800941e:	f89a 3000 	ldrb.w	r3, [sl]
 8009422:	2b2a      	cmp	r3, #42	@ 0x2a
 8009424:	d015      	beq.n	8009452 <_svfiprintf_r+0xfa>
 8009426:	9a07      	ldr	r2, [sp, #28]
 8009428:	4654      	mov	r4, sl
 800942a:	2000      	movs	r0, #0
 800942c:	f04f 0c0a 	mov.w	ip, #10
 8009430:	4621      	mov	r1, r4
 8009432:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009436:	3b30      	subs	r3, #48	@ 0x30
 8009438:	2b09      	cmp	r3, #9
 800943a:	d94b      	bls.n	80094d4 <_svfiprintf_r+0x17c>
 800943c:	b1b0      	cbz	r0, 800946c <_svfiprintf_r+0x114>
 800943e:	9207      	str	r2, [sp, #28]
 8009440:	e014      	b.n	800946c <_svfiprintf_r+0x114>
 8009442:	eba0 0308 	sub.w	r3, r0, r8
 8009446:	fa09 f303 	lsl.w	r3, r9, r3
 800944a:	4313      	orrs	r3, r2
 800944c:	9304      	str	r3, [sp, #16]
 800944e:	46a2      	mov	sl, r4
 8009450:	e7d2      	b.n	80093f8 <_svfiprintf_r+0xa0>
 8009452:	9b03      	ldr	r3, [sp, #12]
 8009454:	1d19      	adds	r1, r3, #4
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	9103      	str	r1, [sp, #12]
 800945a:	2b00      	cmp	r3, #0
 800945c:	bfbb      	ittet	lt
 800945e:	425b      	neglt	r3, r3
 8009460:	f042 0202 	orrlt.w	r2, r2, #2
 8009464:	9307      	strge	r3, [sp, #28]
 8009466:	9307      	strlt	r3, [sp, #28]
 8009468:	bfb8      	it	lt
 800946a:	9204      	strlt	r2, [sp, #16]
 800946c:	7823      	ldrb	r3, [r4, #0]
 800946e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009470:	d10a      	bne.n	8009488 <_svfiprintf_r+0x130>
 8009472:	7863      	ldrb	r3, [r4, #1]
 8009474:	2b2a      	cmp	r3, #42	@ 0x2a
 8009476:	d132      	bne.n	80094de <_svfiprintf_r+0x186>
 8009478:	9b03      	ldr	r3, [sp, #12]
 800947a:	1d1a      	adds	r2, r3, #4
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	9203      	str	r2, [sp, #12]
 8009480:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009484:	3402      	adds	r4, #2
 8009486:	9305      	str	r3, [sp, #20]
 8009488:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800954c <_svfiprintf_r+0x1f4>
 800948c:	7821      	ldrb	r1, [r4, #0]
 800948e:	2203      	movs	r2, #3
 8009490:	4650      	mov	r0, sl
 8009492:	f7f6 fe9d 	bl	80001d0 <memchr>
 8009496:	b138      	cbz	r0, 80094a8 <_svfiprintf_r+0x150>
 8009498:	9b04      	ldr	r3, [sp, #16]
 800949a:	eba0 000a 	sub.w	r0, r0, sl
 800949e:	2240      	movs	r2, #64	@ 0x40
 80094a0:	4082      	lsls	r2, r0
 80094a2:	4313      	orrs	r3, r2
 80094a4:	3401      	adds	r4, #1
 80094a6:	9304      	str	r3, [sp, #16]
 80094a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ac:	4824      	ldr	r0, [pc, #144]	@ (8009540 <_svfiprintf_r+0x1e8>)
 80094ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094b2:	2206      	movs	r2, #6
 80094b4:	f7f6 fe8c 	bl	80001d0 <memchr>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d036      	beq.n	800952a <_svfiprintf_r+0x1d2>
 80094bc:	4b21      	ldr	r3, [pc, #132]	@ (8009544 <_svfiprintf_r+0x1ec>)
 80094be:	bb1b      	cbnz	r3, 8009508 <_svfiprintf_r+0x1b0>
 80094c0:	9b03      	ldr	r3, [sp, #12]
 80094c2:	3307      	adds	r3, #7
 80094c4:	f023 0307 	bic.w	r3, r3, #7
 80094c8:	3308      	adds	r3, #8
 80094ca:	9303      	str	r3, [sp, #12]
 80094cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ce:	4433      	add	r3, r6
 80094d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80094d2:	e76a      	b.n	80093aa <_svfiprintf_r+0x52>
 80094d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80094d8:	460c      	mov	r4, r1
 80094da:	2001      	movs	r0, #1
 80094dc:	e7a8      	b.n	8009430 <_svfiprintf_r+0xd8>
 80094de:	2300      	movs	r3, #0
 80094e0:	3401      	adds	r4, #1
 80094e2:	9305      	str	r3, [sp, #20]
 80094e4:	4619      	mov	r1, r3
 80094e6:	f04f 0c0a 	mov.w	ip, #10
 80094ea:	4620      	mov	r0, r4
 80094ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094f0:	3a30      	subs	r2, #48	@ 0x30
 80094f2:	2a09      	cmp	r2, #9
 80094f4:	d903      	bls.n	80094fe <_svfiprintf_r+0x1a6>
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d0c6      	beq.n	8009488 <_svfiprintf_r+0x130>
 80094fa:	9105      	str	r1, [sp, #20]
 80094fc:	e7c4      	b.n	8009488 <_svfiprintf_r+0x130>
 80094fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009502:	4604      	mov	r4, r0
 8009504:	2301      	movs	r3, #1
 8009506:	e7f0      	b.n	80094ea <_svfiprintf_r+0x192>
 8009508:	ab03      	add	r3, sp, #12
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	462a      	mov	r2, r5
 800950e:	4b0e      	ldr	r3, [pc, #56]	@ (8009548 <_svfiprintf_r+0x1f0>)
 8009510:	a904      	add	r1, sp, #16
 8009512:	4638      	mov	r0, r7
 8009514:	f7fd fe46 	bl	80071a4 <_printf_float>
 8009518:	1c42      	adds	r2, r0, #1
 800951a:	4606      	mov	r6, r0
 800951c:	d1d6      	bne.n	80094cc <_svfiprintf_r+0x174>
 800951e:	89ab      	ldrh	r3, [r5, #12]
 8009520:	065b      	lsls	r3, r3, #25
 8009522:	f53f af2d 	bmi.w	8009380 <_svfiprintf_r+0x28>
 8009526:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009528:	e72c      	b.n	8009384 <_svfiprintf_r+0x2c>
 800952a:	ab03      	add	r3, sp, #12
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	462a      	mov	r2, r5
 8009530:	4b05      	ldr	r3, [pc, #20]	@ (8009548 <_svfiprintf_r+0x1f0>)
 8009532:	a904      	add	r1, sp, #16
 8009534:	4638      	mov	r0, r7
 8009536:	f7fe f8cd 	bl	80076d4 <_printf_i>
 800953a:	e7ed      	b.n	8009518 <_svfiprintf_r+0x1c0>
 800953c:	0800cb12 	.word	0x0800cb12
 8009540:	0800cb1c 	.word	0x0800cb1c
 8009544:	080071a5 	.word	0x080071a5
 8009548:	080092a1 	.word	0x080092a1
 800954c:	0800cb18 	.word	0x0800cb18

08009550 <__sfputc_r>:
 8009550:	6893      	ldr	r3, [r2, #8]
 8009552:	3b01      	subs	r3, #1
 8009554:	2b00      	cmp	r3, #0
 8009556:	b410      	push	{r4}
 8009558:	6093      	str	r3, [r2, #8]
 800955a:	da08      	bge.n	800956e <__sfputc_r+0x1e>
 800955c:	6994      	ldr	r4, [r2, #24]
 800955e:	42a3      	cmp	r3, r4
 8009560:	db01      	blt.n	8009566 <__sfputc_r+0x16>
 8009562:	290a      	cmp	r1, #10
 8009564:	d103      	bne.n	800956e <__sfputc_r+0x1e>
 8009566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800956a:	f7fe bb56 	b.w	8007c1a <__swbuf_r>
 800956e:	6813      	ldr	r3, [r2, #0]
 8009570:	1c58      	adds	r0, r3, #1
 8009572:	6010      	str	r0, [r2, #0]
 8009574:	7019      	strb	r1, [r3, #0]
 8009576:	4608      	mov	r0, r1
 8009578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800957c:	4770      	bx	lr

0800957e <__sfputs_r>:
 800957e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009580:	4606      	mov	r6, r0
 8009582:	460f      	mov	r7, r1
 8009584:	4614      	mov	r4, r2
 8009586:	18d5      	adds	r5, r2, r3
 8009588:	42ac      	cmp	r4, r5
 800958a:	d101      	bne.n	8009590 <__sfputs_r+0x12>
 800958c:	2000      	movs	r0, #0
 800958e:	e007      	b.n	80095a0 <__sfputs_r+0x22>
 8009590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009594:	463a      	mov	r2, r7
 8009596:	4630      	mov	r0, r6
 8009598:	f7ff ffda 	bl	8009550 <__sfputc_r>
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	d1f3      	bne.n	8009588 <__sfputs_r+0xa>
 80095a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095a4 <_vfiprintf_r>:
 80095a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a8:	460d      	mov	r5, r1
 80095aa:	b09d      	sub	sp, #116	@ 0x74
 80095ac:	4614      	mov	r4, r2
 80095ae:	4698      	mov	r8, r3
 80095b0:	4606      	mov	r6, r0
 80095b2:	b118      	cbz	r0, 80095bc <_vfiprintf_r+0x18>
 80095b4:	6a03      	ldr	r3, [r0, #32]
 80095b6:	b90b      	cbnz	r3, 80095bc <_vfiprintf_r+0x18>
 80095b8:	f7fe fa36 	bl	8007a28 <__sinit>
 80095bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095be:	07d9      	lsls	r1, r3, #31
 80095c0:	d405      	bmi.n	80095ce <_vfiprintf_r+0x2a>
 80095c2:	89ab      	ldrh	r3, [r5, #12]
 80095c4:	059a      	lsls	r2, r3, #22
 80095c6:	d402      	bmi.n	80095ce <_vfiprintf_r+0x2a>
 80095c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095ca:	f7fe fc48 	bl	8007e5e <__retarget_lock_acquire_recursive>
 80095ce:	89ab      	ldrh	r3, [r5, #12]
 80095d0:	071b      	lsls	r3, r3, #28
 80095d2:	d501      	bpl.n	80095d8 <_vfiprintf_r+0x34>
 80095d4:	692b      	ldr	r3, [r5, #16]
 80095d6:	b99b      	cbnz	r3, 8009600 <_vfiprintf_r+0x5c>
 80095d8:	4629      	mov	r1, r5
 80095da:	4630      	mov	r0, r6
 80095dc:	f7fe fb5c 	bl	8007c98 <__swsetup_r>
 80095e0:	b170      	cbz	r0, 8009600 <_vfiprintf_r+0x5c>
 80095e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095e4:	07dc      	lsls	r4, r3, #31
 80095e6:	d504      	bpl.n	80095f2 <_vfiprintf_r+0x4e>
 80095e8:	f04f 30ff 	mov.w	r0, #4294967295
 80095ec:	b01d      	add	sp, #116	@ 0x74
 80095ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f2:	89ab      	ldrh	r3, [r5, #12]
 80095f4:	0598      	lsls	r0, r3, #22
 80095f6:	d4f7      	bmi.n	80095e8 <_vfiprintf_r+0x44>
 80095f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095fa:	f7fe fc31 	bl	8007e60 <__retarget_lock_release_recursive>
 80095fe:	e7f3      	b.n	80095e8 <_vfiprintf_r+0x44>
 8009600:	2300      	movs	r3, #0
 8009602:	9309      	str	r3, [sp, #36]	@ 0x24
 8009604:	2320      	movs	r3, #32
 8009606:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800960a:	f8cd 800c 	str.w	r8, [sp, #12]
 800960e:	2330      	movs	r3, #48	@ 0x30
 8009610:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80097c0 <_vfiprintf_r+0x21c>
 8009614:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009618:	f04f 0901 	mov.w	r9, #1
 800961c:	4623      	mov	r3, r4
 800961e:	469a      	mov	sl, r3
 8009620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009624:	b10a      	cbz	r2, 800962a <_vfiprintf_r+0x86>
 8009626:	2a25      	cmp	r2, #37	@ 0x25
 8009628:	d1f9      	bne.n	800961e <_vfiprintf_r+0x7a>
 800962a:	ebba 0b04 	subs.w	fp, sl, r4
 800962e:	d00b      	beq.n	8009648 <_vfiprintf_r+0xa4>
 8009630:	465b      	mov	r3, fp
 8009632:	4622      	mov	r2, r4
 8009634:	4629      	mov	r1, r5
 8009636:	4630      	mov	r0, r6
 8009638:	f7ff ffa1 	bl	800957e <__sfputs_r>
 800963c:	3001      	adds	r0, #1
 800963e:	f000 80a7 	beq.w	8009790 <_vfiprintf_r+0x1ec>
 8009642:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009644:	445a      	add	r2, fp
 8009646:	9209      	str	r2, [sp, #36]	@ 0x24
 8009648:	f89a 3000 	ldrb.w	r3, [sl]
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 809f 	beq.w	8009790 <_vfiprintf_r+0x1ec>
 8009652:	2300      	movs	r3, #0
 8009654:	f04f 32ff 	mov.w	r2, #4294967295
 8009658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800965c:	f10a 0a01 	add.w	sl, sl, #1
 8009660:	9304      	str	r3, [sp, #16]
 8009662:	9307      	str	r3, [sp, #28]
 8009664:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009668:	931a      	str	r3, [sp, #104]	@ 0x68
 800966a:	4654      	mov	r4, sl
 800966c:	2205      	movs	r2, #5
 800966e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009672:	4853      	ldr	r0, [pc, #332]	@ (80097c0 <_vfiprintf_r+0x21c>)
 8009674:	f7f6 fdac 	bl	80001d0 <memchr>
 8009678:	9a04      	ldr	r2, [sp, #16]
 800967a:	b9d8      	cbnz	r0, 80096b4 <_vfiprintf_r+0x110>
 800967c:	06d1      	lsls	r1, r2, #27
 800967e:	bf44      	itt	mi
 8009680:	2320      	movmi	r3, #32
 8009682:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009686:	0713      	lsls	r3, r2, #28
 8009688:	bf44      	itt	mi
 800968a:	232b      	movmi	r3, #43	@ 0x2b
 800968c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009690:	f89a 3000 	ldrb.w	r3, [sl]
 8009694:	2b2a      	cmp	r3, #42	@ 0x2a
 8009696:	d015      	beq.n	80096c4 <_vfiprintf_r+0x120>
 8009698:	9a07      	ldr	r2, [sp, #28]
 800969a:	4654      	mov	r4, sl
 800969c:	2000      	movs	r0, #0
 800969e:	f04f 0c0a 	mov.w	ip, #10
 80096a2:	4621      	mov	r1, r4
 80096a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096a8:	3b30      	subs	r3, #48	@ 0x30
 80096aa:	2b09      	cmp	r3, #9
 80096ac:	d94b      	bls.n	8009746 <_vfiprintf_r+0x1a2>
 80096ae:	b1b0      	cbz	r0, 80096de <_vfiprintf_r+0x13a>
 80096b0:	9207      	str	r2, [sp, #28]
 80096b2:	e014      	b.n	80096de <_vfiprintf_r+0x13a>
 80096b4:	eba0 0308 	sub.w	r3, r0, r8
 80096b8:	fa09 f303 	lsl.w	r3, r9, r3
 80096bc:	4313      	orrs	r3, r2
 80096be:	9304      	str	r3, [sp, #16]
 80096c0:	46a2      	mov	sl, r4
 80096c2:	e7d2      	b.n	800966a <_vfiprintf_r+0xc6>
 80096c4:	9b03      	ldr	r3, [sp, #12]
 80096c6:	1d19      	adds	r1, r3, #4
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	9103      	str	r1, [sp, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	bfbb      	ittet	lt
 80096d0:	425b      	neglt	r3, r3
 80096d2:	f042 0202 	orrlt.w	r2, r2, #2
 80096d6:	9307      	strge	r3, [sp, #28]
 80096d8:	9307      	strlt	r3, [sp, #28]
 80096da:	bfb8      	it	lt
 80096dc:	9204      	strlt	r2, [sp, #16]
 80096de:	7823      	ldrb	r3, [r4, #0]
 80096e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80096e2:	d10a      	bne.n	80096fa <_vfiprintf_r+0x156>
 80096e4:	7863      	ldrb	r3, [r4, #1]
 80096e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80096e8:	d132      	bne.n	8009750 <_vfiprintf_r+0x1ac>
 80096ea:	9b03      	ldr	r3, [sp, #12]
 80096ec:	1d1a      	adds	r2, r3, #4
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	9203      	str	r2, [sp, #12]
 80096f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096f6:	3402      	adds	r4, #2
 80096f8:	9305      	str	r3, [sp, #20]
 80096fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80097d0 <_vfiprintf_r+0x22c>
 80096fe:	7821      	ldrb	r1, [r4, #0]
 8009700:	2203      	movs	r2, #3
 8009702:	4650      	mov	r0, sl
 8009704:	f7f6 fd64 	bl	80001d0 <memchr>
 8009708:	b138      	cbz	r0, 800971a <_vfiprintf_r+0x176>
 800970a:	9b04      	ldr	r3, [sp, #16]
 800970c:	eba0 000a 	sub.w	r0, r0, sl
 8009710:	2240      	movs	r2, #64	@ 0x40
 8009712:	4082      	lsls	r2, r0
 8009714:	4313      	orrs	r3, r2
 8009716:	3401      	adds	r4, #1
 8009718:	9304      	str	r3, [sp, #16]
 800971a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800971e:	4829      	ldr	r0, [pc, #164]	@ (80097c4 <_vfiprintf_r+0x220>)
 8009720:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009724:	2206      	movs	r2, #6
 8009726:	f7f6 fd53 	bl	80001d0 <memchr>
 800972a:	2800      	cmp	r0, #0
 800972c:	d03f      	beq.n	80097ae <_vfiprintf_r+0x20a>
 800972e:	4b26      	ldr	r3, [pc, #152]	@ (80097c8 <_vfiprintf_r+0x224>)
 8009730:	bb1b      	cbnz	r3, 800977a <_vfiprintf_r+0x1d6>
 8009732:	9b03      	ldr	r3, [sp, #12]
 8009734:	3307      	adds	r3, #7
 8009736:	f023 0307 	bic.w	r3, r3, #7
 800973a:	3308      	adds	r3, #8
 800973c:	9303      	str	r3, [sp, #12]
 800973e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009740:	443b      	add	r3, r7
 8009742:	9309      	str	r3, [sp, #36]	@ 0x24
 8009744:	e76a      	b.n	800961c <_vfiprintf_r+0x78>
 8009746:	fb0c 3202 	mla	r2, ip, r2, r3
 800974a:	460c      	mov	r4, r1
 800974c:	2001      	movs	r0, #1
 800974e:	e7a8      	b.n	80096a2 <_vfiprintf_r+0xfe>
 8009750:	2300      	movs	r3, #0
 8009752:	3401      	adds	r4, #1
 8009754:	9305      	str	r3, [sp, #20]
 8009756:	4619      	mov	r1, r3
 8009758:	f04f 0c0a 	mov.w	ip, #10
 800975c:	4620      	mov	r0, r4
 800975e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009762:	3a30      	subs	r2, #48	@ 0x30
 8009764:	2a09      	cmp	r2, #9
 8009766:	d903      	bls.n	8009770 <_vfiprintf_r+0x1cc>
 8009768:	2b00      	cmp	r3, #0
 800976a:	d0c6      	beq.n	80096fa <_vfiprintf_r+0x156>
 800976c:	9105      	str	r1, [sp, #20]
 800976e:	e7c4      	b.n	80096fa <_vfiprintf_r+0x156>
 8009770:	fb0c 2101 	mla	r1, ip, r1, r2
 8009774:	4604      	mov	r4, r0
 8009776:	2301      	movs	r3, #1
 8009778:	e7f0      	b.n	800975c <_vfiprintf_r+0x1b8>
 800977a:	ab03      	add	r3, sp, #12
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	462a      	mov	r2, r5
 8009780:	4b12      	ldr	r3, [pc, #72]	@ (80097cc <_vfiprintf_r+0x228>)
 8009782:	a904      	add	r1, sp, #16
 8009784:	4630      	mov	r0, r6
 8009786:	f7fd fd0d 	bl	80071a4 <_printf_float>
 800978a:	4607      	mov	r7, r0
 800978c:	1c78      	adds	r0, r7, #1
 800978e:	d1d6      	bne.n	800973e <_vfiprintf_r+0x19a>
 8009790:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009792:	07d9      	lsls	r1, r3, #31
 8009794:	d405      	bmi.n	80097a2 <_vfiprintf_r+0x1fe>
 8009796:	89ab      	ldrh	r3, [r5, #12]
 8009798:	059a      	lsls	r2, r3, #22
 800979a:	d402      	bmi.n	80097a2 <_vfiprintf_r+0x1fe>
 800979c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800979e:	f7fe fb5f 	bl	8007e60 <__retarget_lock_release_recursive>
 80097a2:	89ab      	ldrh	r3, [r5, #12]
 80097a4:	065b      	lsls	r3, r3, #25
 80097a6:	f53f af1f 	bmi.w	80095e8 <_vfiprintf_r+0x44>
 80097aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097ac:	e71e      	b.n	80095ec <_vfiprintf_r+0x48>
 80097ae:	ab03      	add	r3, sp, #12
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	462a      	mov	r2, r5
 80097b4:	4b05      	ldr	r3, [pc, #20]	@ (80097cc <_vfiprintf_r+0x228>)
 80097b6:	a904      	add	r1, sp, #16
 80097b8:	4630      	mov	r0, r6
 80097ba:	f7fd ff8b 	bl	80076d4 <_printf_i>
 80097be:	e7e4      	b.n	800978a <_vfiprintf_r+0x1e6>
 80097c0:	0800cb12 	.word	0x0800cb12
 80097c4:	0800cb1c 	.word	0x0800cb1c
 80097c8:	080071a5 	.word	0x080071a5
 80097cc:	0800957f 	.word	0x0800957f
 80097d0:	0800cb18 	.word	0x0800cb18

080097d4 <__sflush_r>:
 80097d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097dc:	0716      	lsls	r6, r2, #28
 80097de:	4605      	mov	r5, r0
 80097e0:	460c      	mov	r4, r1
 80097e2:	d454      	bmi.n	800988e <__sflush_r+0xba>
 80097e4:	684b      	ldr	r3, [r1, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	dc02      	bgt.n	80097f0 <__sflush_r+0x1c>
 80097ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	dd48      	ble.n	8009882 <__sflush_r+0xae>
 80097f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097f2:	2e00      	cmp	r6, #0
 80097f4:	d045      	beq.n	8009882 <__sflush_r+0xae>
 80097f6:	2300      	movs	r3, #0
 80097f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80097fc:	682f      	ldr	r7, [r5, #0]
 80097fe:	6a21      	ldr	r1, [r4, #32]
 8009800:	602b      	str	r3, [r5, #0]
 8009802:	d030      	beq.n	8009866 <__sflush_r+0x92>
 8009804:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	0759      	lsls	r1, r3, #29
 800980a:	d505      	bpl.n	8009818 <__sflush_r+0x44>
 800980c:	6863      	ldr	r3, [r4, #4]
 800980e:	1ad2      	subs	r2, r2, r3
 8009810:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009812:	b10b      	cbz	r3, 8009818 <__sflush_r+0x44>
 8009814:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009816:	1ad2      	subs	r2, r2, r3
 8009818:	2300      	movs	r3, #0
 800981a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800981c:	6a21      	ldr	r1, [r4, #32]
 800981e:	4628      	mov	r0, r5
 8009820:	47b0      	blx	r6
 8009822:	1c43      	adds	r3, r0, #1
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	d106      	bne.n	8009836 <__sflush_r+0x62>
 8009828:	6829      	ldr	r1, [r5, #0]
 800982a:	291d      	cmp	r1, #29
 800982c:	d82b      	bhi.n	8009886 <__sflush_r+0xb2>
 800982e:	4a2a      	ldr	r2, [pc, #168]	@ (80098d8 <__sflush_r+0x104>)
 8009830:	40ca      	lsrs	r2, r1
 8009832:	07d6      	lsls	r6, r2, #31
 8009834:	d527      	bpl.n	8009886 <__sflush_r+0xb2>
 8009836:	2200      	movs	r2, #0
 8009838:	6062      	str	r2, [r4, #4]
 800983a:	04d9      	lsls	r1, r3, #19
 800983c:	6922      	ldr	r2, [r4, #16]
 800983e:	6022      	str	r2, [r4, #0]
 8009840:	d504      	bpl.n	800984c <__sflush_r+0x78>
 8009842:	1c42      	adds	r2, r0, #1
 8009844:	d101      	bne.n	800984a <__sflush_r+0x76>
 8009846:	682b      	ldr	r3, [r5, #0]
 8009848:	b903      	cbnz	r3, 800984c <__sflush_r+0x78>
 800984a:	6560      	str	r0, [r4, #84]	@ 0x54
 800984c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800984e:	602f      	str	r7, [r5, #0]
 8009850:	b1b9      	cbz	r1, 8009882 <__sflush_r+0xae>
 8009852:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009856:	4299      	cmp	r1, r3
 8009858:	d002      	beq.n	8009860 <__sflush_r+0x8c>
 800985a:	4628      	mov	r0, r5
 800985c:	f7ff f95c 	bl	8008b18 <_free_r>
 8009860:	2300      	movs	r3, #0
 8009862:	6363      	str	r3, [r4, #52]	@ 0x34
 8009864:	e00d      	b.n	8009882 <__sflush_r+0xae>
 8009866:	2301      	movs	r3, #1
 8009868:	4628      	mov	r0, r5
 800986a:	47b0      	blx	r6
 800986c:	4602      	mov	r2, r0
 800986e:	1c50      	adds	r0, r2, #1
 8009870:	d1c9      	bne.n	8009806 <__sflush_r+0x32>
 8009872:	682b      	ldr	r3, [r5, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d0c6      	beq.n	8009806 <__sflush_r+0x32>
 8009878:	2b1d      	cmp	r3, #29
 800987a:	d001      	beq.n	8009880 <__sflush_r+0xac>
 800987c:	2b16      	cmp	r3, #22
 800987e:	d11e      	bne.n	80098be <__sflush_r+0xea>
 8009880:	602f      	str	r7, [r5, #0]
 8009882:	2000      	movs	r0, #0
 8009884:	e022      	b.n	80098cc <__sflush_r+0xf8>
 8009886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800988a:	b21b      	sxth	r3, r3
 800988c:	e01b      	b.n	80098c6 <__sflush_r+0xf2>
 800988e:	690f      	ldr	r7, [r1, #16]
 8009890:	2f00      	cmp	r7, #0
 8009892:	d0f6      	beq.n	8009882 <__sflush_r+0xae>
 8009894:	0793      	lsls	r3, r2, #30
 8009896:	680e      	ldr	r6, [r1, #0]
 8009898:	bf08      	it	eq
 800989a:	694b      	ldreq	r3, [r1, #20]
 800989c:	600f      	str	r7, [r1, #0]
 800989e:	bf18      	it	ne
 80098a0:	2300      	movne	r3, #0
 80098a2:	eba6 0807 	sub.w	r8, r6, r7
 80098a6:	608b      	str	r3, [r1, #8]
 80098a8:	f1b8 0f00 	cmp.w	r8, #0
 80098ac:	dde9      	ble.n	8009882 <__sflush_r+0xae>
 80098ae:	6a21      	ldr	r1, [r4, #32]
 80098b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80098b2:	4643      	mov	r3, r8
 80098b4:	463a      	mov	r2, r7
 80098b6:	4628      	mov	r0, r5
 80098b8:	47b0      	blx	r6
 80098ba:	2800      	cmp	r0, #0
 80098bc:	dc08      	bgt.n	80098d0 <__sflush_r+0xfc>
 80098be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098c6:	81a3      	strh	r3, [r4, #12]
 80098c8:	f04f 30ff 	mov.w	r0, #4294967295
 80098cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098d0:	4407      	add	r7, r0
 80098d2:	eba8 0800 	sub.w	r8, r8, r0
 80098d6:	e7e7      	b.n	80098a8 <__sflush_r+0xd4>
 80098d8:	20400001 	.word	0x20400001

080098dc <_fflush_r>:
 80098dc:	b538      	push	{r3, r4, r5, lr}
 80098de:	690b      	ldr	r3, [r1, #16]
 80098e0:	4605      	mov	r5, r0
 80098e2:	460c      	mov	r4, r1
 80098e4:	b913      	cbnz	r3, 80098ec <_fflush_r+0x10>
 80098e6:	2500      	movs	r5, #0
 80098e8:	4628      	mov	r0, r5
 80098ea:	bd38      	pop	{r3, r4, r5, pc}
 80098ec:	b118      	cbz	r0, 80098f6 <_fflush_r+0x1a>
 80098ee:	6a03      	ldr	r3, [r0, #32]
 80098f0:	b90b      	cbnz	r3, 80098f6 <_fflush_r+0x1a>
 80098f2:	f7fe f899 	bl	8007a28 <__sinit>
 80098f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d0f3      	beq.n	80098e6 <_fflush_r+0xa>
 80098fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009900:	07d0      	lsls	r0, r2, #31
 8009902:	d404      	bmi.n	800990e <_fflush_r+0x32>
 8009904:	0599      	lsls	r1, r3, #22
 8009906:	d402      	bmi.n	800990e <_fflush_r+0x32>
 8009908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800990a:	f7fe faa8 	bl	8007e5e <__retarget_lock_acquire_recursive>
 800990e:	4628      	mov	r0, r5
 8009910:	4621      	mov	r1, r4
 8009912:	f7ff ff5f 	bl	80097d4 <__sflush_r>
 8009916:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009918:	07da      	lsls	r2, r3, #31
 800991a:	4605      	mov	r5, r0
 800991c:	d4e4      	bmi.n	80098e8 <_fflush_r+0xc>
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	059b      	lsls	r3, r3, #22
 8009922:	d4e1      	bmi.n	80098e8 <_fflush_r+0xc>
 8009924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009926:	f7fe fa9b 	bl	8007e60 <__retarget_lock_release_recursive>
 800992a:	e7dd      	b.n	80098e8 <_fflush_r+0xc>

0800992c <__swhatbuf_r>:
 800992c:	b570      	push	{r4, r5, r6, lr}
 800992e:	460c      	mov	r4, r1
 8009930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009934:	2900      	cmp	r1, #0
 8009936:	b096      	sub	sp, #88	@ 0x58
 8009938:	4615      	mov	r5, r2
 800993a:	461e      	mov	r6, r3
 800993c:	da0d      	bge.n	800995a <__swhatbuf_r+0x2e>
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009944:	f04f 0100 	mov.w	r1, #0
 8009948:	bf14      	ite	ne
 800994a:	2340      	movne	r3, #64	@ 0x40
 800994c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009950:	2000      	movs	r0, #0
 8009952:	6031      	str	r1, [r6, #0]
 8009954:	602b      	str	r3, [r5, #0]
 8009956:	b016      	add	sp, #88	@ 0x58
 8009958:	bd70      	pop	{r4, r5, r6, pc}
 800995a:	466a      	mov	r2, sp
 800995c:	f000 f862 	bl	8009a24 <_fstat_r>
 8009960:	2800      	cmp	r0, #0
 8009962:	dbec      	blt.n	800993e <__swhatbuf_r+0x12>
 8009964:	9901      	ldr	r1, [sp, #4]
 8009966:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800996a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800996e:	4259      	negs	r1, r3
 8009970:	4159      	adcs	r1, r3
 8009972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009976:	e7eb      	b.n	8009950 <__swhatbuf_r+0x24>

08009978 <__smakebuf_r>:
 8009978:	898b      	ldrh	r3, [r1, #12]
 800997a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800997c:	079d      	lsls	r5, r3, #30
 800997e:	4606      	mov	r6, r0
 8009980:	460c      	mov	r4, r1
 8009982:	d507      	bpl.n	8009994 <__smakebuf_r+0x1c>
 8009984:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	6123      	str	r3, [r4, #16]
 800998c:	2301      	movs	r3, #1
 800998e:	6163      	str	r3, [r4, #20]
 8009990:	b003      	add	sp, #12
 8009992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009994:	ab01      	add	r3, sp, #4
 8009996:	466a      	mov	r2, sp
 8009998:	f7ff ffc8 	bl	800992c <__swhatbuf_r>
 800999c:	9f00      	ldr	r7, [sp, #0]
 800999e:	4605      	mov	r5, r0
 80099a0:	4639      	mov	r1, r7
 80099a2:	4630      	mov	r0, r6
 80099a4:	f7fd fad2 	bl	8006f4c <_malloc_r>
 80099a8:	b948      	cbnz	r0, 80099be <__smakebuf_r+0x46>
 80099aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ae:	059a      	lsls	r2, r3, #22
 80099b0:	d4ee      	bmi.n	8009990 <__smakebuf_r+0x18>
 80099b2:	f023 0303 	bic.w	r3, r3, #3
 80099b6:	f043 0302 	orr.w	r3, r3, #2
 80099ba:	81a3      	strh	r3, [r4, #12]
 80099bc:	e7e2      	b.n	8009984 <__smakebuf_r+0xc>
 80099be:	89a3      	ldrh	r3, [r4, #12]
 80099c0:	6020      	str	r0, [r4, #0]
 80099c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099c6:	81a3      	strh	r3, [r4, #12]
 80099c8:	9b01      	ldr	r3, [sp, #4]
 80099ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099ce:	b15b      	cbz	r3, 80099e8 <__smakebuf_r+0x70>
 80099d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099d4:	4630      	mov	r0, r6
 80099d6:	f000 f837 	bl	8009a48 <_isatty_r>
 80099da:	b128      	cbz	r0, 80099e8 <__smakebuf_r+0x70>
 80099dc:	89a3      	ldrh	r3, [r4, #12]
 80099de:	f023 0303 	bic.w	r3, r3, #3
 80099e2:	f043 0301 	orr.w	r3, r3, #1
 80099e6:	81a3      	strh	r3, [r4, #12]
 80099e8:	89a3      	ldrh	r3, [r4, #12]
 80099ea:	431d      	orrs	r5, r3
 80099ec:	81a5      	strh	r5, [r4, #12]
 80099ee:	e7cf      	b.n	8009990 <__smakebuf_r+0x18>

080099f0 <memmove>:
 80099f0:	4288      	cmp	r0, r1
 80099f2:	b510      	push	{r4, lr}
 80099f4:	eb01 0402 	add.w	r4, r1, r2
 80099f8:	d902      	bls.n	8009a00 <memmove+0x10>
 80099fa:	4284      	cmp	r4, r0
 80099fc:	4623      	mov	r3, r4
 80099fe:	d807      	bhi.n	8009a10 <memmove+0x20>
 8009a00:	1e43      	subs	r3, r0, #1
 8009a02:	42a1      	cmp	r1, r4
 8009a04:	d008      	beq.n	8009a18 <memmove+0x28>
 8009a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a0e:	e7f8      	b.n	8009a02 <memmove+0x12>
 8009a10:	4402      	add	r2, r0
 8009a12:	4601      	mov	r1, r0
 8009a14:	428a      	cmp	r2, r1
 8009a16:	d100      	bne.n	8009a1a <memmove+0x2a>
 8009a18:	bd10      	pop	{r4, pc}
 8009a1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a22:	e7f7      	b.n	8009a14 <memmove+0x24>

08009a24 <_fstat_r>:
 8009a24:	b538      	push	{r3, r4, r5, lr}
 8009a26:	4d07      	ldr	r5, [pc, #28]	@ (8009a44 <_fstat_r+0x20>)
 8009a28:	2300      	movs	r3, #0
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	4608      	mov	r0, r1
 8009a2e:	4611      	mov	r1, r2
 8009a30:	602b      	str	r3, [r5, #0]
 8009a32:	f7f9 fc5c 	bl	80032ee <_fstat>
 8009a36:	1c43      	adds	r3, r0, #1
 8009a38:	d102      	bne.n	8009a40 <_fstat_r+0x1c>
 8009a3a:	682b      	ldr	r3, [r5, #0]
 8009a3c:	b103      	cbz	r3, 8009a40 <_fstat_r+0x1c>
 8009a3e:	6023      	str	r3, [r4, #0]
 8009a40:	bd38      	pop	{r3, r4, r5, pc}
 8009a42:	bf00      	nop
 8009a44:	200004fc 	.word	0x200004fc

08009a48 <_isatty_r>:
 8009a48:	b538      	push	{r3, r4, r5, lr}
 8009a4a:	4d06      	ldr	r5, [pc, #24]	@ (8009a64 <_isatty_r+0x1c>)
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	4604      	mov	r4, r0
 8009a50:	4608      	mov	r0, r1
 8009a52:	602b      	str	r3, [r5, #0]
 8009a54:	f7f9 fc5b 	bl	800330e <_isatty>
 8009a58:	1c43      	adds	r3, r0, #1
 8009a5a:	d102      	bne.n	8009a62 <_isatty_r+0x1a>
 8009a5c:	682b      	ldr	r3, [r5, #0]
 8009a5e:	b103      	cbz	r3, 8009a62 <_isatty_r+0x1a>
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	bd38      	pop	{r3, r4, r5, pc}
 8009a64:	200004fc 	.word	0x200004fc

08009a68 <memcpy>:
 8009a68:	440a      	add	r2, r1
 8009a6a:	4291      	cmp	r1, r2
 8009a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a70:	d100      	bne.n	8009a74 <memcpy+0xc>
 8009a72:	4770      	bx	lr
 8009a74:	b510      	push	{r4, lr}
 8009a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a7e:	4291      	cmp	r1, r2
 8009a80:	d1f9      	bne.n	8009a76 <memcpy+0xe>
 8009a82:	bd10      	pop	{r4, pc}

08009a84 <__assert_func>:
 8009a84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a86:	4614      	mov	r4, r2
 8009a88:	461a      	mov	r2, r3
 8009a8a:	4b09      	ldr	r3, [pc, #36]	@ (8009ab0 <__assert_func+0x2c>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4605      	mov	r5, r0
 8009a90:	68d8      	ldr	r0, [r3, #12]
 8009a92:	b14c      	cbz	r4, 8009aa8 <__assert_func+0x24>
 8009a94:	4b07      	ldr	r3, [pc, #28]	@ (8009ab4 <__assert_func+0x30>)
 8009a96:	9100      	str	r1, [sp, #0]
 8009a98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a9c:	4906      	ldr	r1, [pc, #24]	@ (8009ab8 <__assert_func+0x34>)
 8009a9e:	462b      	mov	r3, r5
 8009aa0:	f000 f870 	bl	8009b84 <fiprintf>
 8009aa4:	f000 f880 	bl	8009ba8 <abort>
 8009aa8:	4b04      	ldr	r3, [pc, #16]	@ (8009abc <__assert_func+0x38>)
 8009aaa:	461c      	mov	r4, r3
 8009aac:	e7f3      	b.n	8009a96 <__assert_func+0x12>
 8009aae:	bf00      	nop
 8009ab0:	20000028 	.word	0x20000028
 8009ab4:	0800cb2d 	.word	0x0800cb2d
 8009ab8:	0800cb3a 	.word	0x0800cb3a
 8009abc:	0800cb68 	.word	0x0800cb68

08009ac0 <_calloc_r>:
 8009ac0:	b570      	push	{r4, r5, r6, lr}
 8009ac2:	fba1 5402 	umull	r5, r4, r1, r2
 8009ac6:	b934      	cbnz	r4, 8009ad6 <_calloc_r+0x16>
 8009ac8:	4629      	mov	r1, r5
 8009aca:	f7fd fa3f 	bl	8006f4c <_malloc_r>
 8009ace:	4606      	mov	r6, r0
 8009ad0:	b928      	cbnz	r0, 8009ade <_calloc_r+0x1e>
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	bd70      	pop	{r4, r5, r6, pc}
 8009ad6:	220c      	movs	r2, #12
 8009ad8:	6002      	str	r2, [r0, #0]
 8009ada:	2600      	movs	r6, #0
 8009adc:	e7f9      	b.n	8009ad2 <_calloc_r+0x12>
 8009ade:	462a      	mov	r2, r5
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	f7fe f92f 	bl	8007d44 <memset>
 8009ae6:	e7f4      	b.n	8009ad2 <_calloc_r+0x12>

08009ae8 <__ascii_mbtowc>:
 8009ae8:	b082      	sub	sp, #8
 8009aea:	b901      	cbnz	r1, 8009aee <__ascii_mbtowc+0x6>
 8009aec:	a901      	add	r1, sp, #4
 8009aee:	b142      	cbz	r2, 8009b02 <__ascii_mbtowc+0x1a>
 8009af0:	b14b      	cbz	r3, 8009b06 <__ascii_mbtowc+0x1e>
 8009af2:	7813      	ldrb	r3, [r2, #0]
 8009af4:	600b      	str	r3, [r1, #0]
 8009af6:	7812      	ldrb	r2, [r2, #0]
 8009af8:	1e10      	subs	r0, r2, #0
 8009afa:	bf18      	it	ne
 8009afc:	2001      	movne	r0, #1
 8009afe:	b002      	add	sp, #8
 8009b00:	4770      	bx	lr
 8009b02:	4610      	mov	r0, r2
 8009b04:	e7fb      	b.n	8009afe <__ascii_mbtowc+0x16>
 8009b06:	f06f 0001 	mvn.w	r0, #1
 8009b0a:	e7f8      	b.n	8009afe <__ascii_mbtowc+0x16>

08009b0c <_realloc_r>:
 8009b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b10:	4607      	mov	r7, r0
 8009b12:	4614      	mov	r4, r2
 8009b14:	460d      	mov	r5, r1
 8009b16:	b921      	cbnz	r1, 8009b22 <_realloc_r+0x16>
 8009b18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	f7fd ba15 	b.w	8006f4c <_malloc_r>
 8009b22:	b92a      	cbnz	r2, 8009b30 <_realloc_r+0x24>
 8009b24:	f7fe fff8 	bl	8008b18 <_free_r>
 8009b28:	4625      	mov	r5, r4
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b30:	f000 f841 	bl	8009bb6 <_malloc_usable_size_r>
 8009b34:	4284      	cmp	r4, r0
 8009b36:	4606      	mov	r6, r0
 8009b38:	d802      	bhi.n	8009b40 <_realloc_r+0x34>
 8009b3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b3e:	d8f4      	bhi.n	8009b2a <_realloc_r+0x1e>
 8009b40:	4621      	mov	r1, r4
 8009b42:	4638      	mov	r0, r7
 8009b44:	f7fd fa02 	bl	8006f4c <_malloc_r>
 8009b48:	4680      	mov	r8, r0
 8009b4a:	b908      	cbnz	r0, 8009b50 <_realloc_r+0x44>
 8009b4c:	4645      	mov	r5, r8
 8009b4e:	e7ec      	b.n	8009b2a <_realloc_r+0x1e>
 8009b50:	42b4      	cmp	r4, r6
 8009b52:	4622      	mov	r2, r4
 8009b54:	4629      	mov	r1, r5
 8009b56:	bf28      	it	cs
 8009b58:	4632      	movcs	r2, r6
 8009b5a:	f7ff ff85 	bl	8009a68 <memcpy>
 8009b5e:	4629      	mov	r1, r5
 8009b60:	4638      	mov	r0, r7
 8009b62:	f7fe ffd9 	bl	8008b18 <_free_r>
 8009b66:	e7f1      	b.n	8009b4c <_realloc_r+0x40>

08009b68 <__ascii_wctomb>:
 8009b68:	4603      	mov	r3, r0
 8009b6a:	4608      	mov	r0, r1
 8009b6c:	b141      	cbz	r1, 8009b80 <__ascii_wctomb+0x18>
 8009b6e:	2aff      	cmp	r2, #255	@ 0xff
 8009b70:	d904      	bls.n	8009b7c <__ascii_wctomb+0x14>
 8009b72:	228a      	movs	r2, #138	@ 0x8a
 8009b74:	601a      	str	r2, [r3, #0]
 8009b76:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7a:	4770      	bx	lr
 8009b7c:	700a      	strb	r2, [r1, #0]
 8009b7e:	2001      	movs	r0, #1
 8009b80:	4770      	bx	lr
	...

08009b84 <fiprintf>:
 8009b84:	b40e      	push	{r1, r2, r3}
 8009b86:	b503      	push	{r0, r1, lr}
 8009b88:	4601      	mov	r1, r0
 8009b8a:	ab03      	add	r3, sp, #12
 8009b8c:	4805      	ldr	r0, [pc, #20]	@ (8009ba4 <fiprintf+0x20>)
 8009b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b92:	6800      	ldr	r0, [r0, #0]
 8009b94:	9301      	str	r3, [sp, #4]
 8009b96:	f7ff fd05 	bl	80095a4 <_vfiprintf_r>
 8009b9a:	b002      	add	sp, #8
 8009b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ba0:	b003      	add	sp, #12
 8009ba2:	4770      	bx	lr
 8009ba4:	20000028 	.word	0x20000028

08009ba8 <abort>:
 8009ba8:	b508      	push	{r3, lr}
 8009baa:	2006      	movs	r0, #6
 8009bac:	f000 f834 	bl	8009c18 <raise>
 8009bb0:	2001      	movs	r0, #1
 8009bb2:	f7f9 fb4c 	bl	800324e <_exit>

08009bb6 <_malloc_usable_size_r>:
 8009bb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bba:	1f18      	subs	r0, r3, #4
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	bfbc      	itt	lt
 8009bc0:	580b      	ldrlt	r3, [r1, r0]
 8009bc2:	18c0      	addlt	r0, r0, r3
 8009bc4:	4770      	bx	lr

08009bc6 <_raise_r>:
 8009bc6:	291f      	cmp	r1, #31
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	4605      	mov	r5, r0
 8009bcc:	460c      	mov	r4, r1
 8009bce:	d904      	bls.n	8009bda <_raise_r+0x14>
 8009bd0:	2316      	movs	r3, #22
 8009bd2:	6003      	str	r3, [r0, #0]
 8009bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd8:	bd38      	pop	{r3, r4, r5, pc}
 8009bda:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009bdc:	b112      	cbz	r2, 8009be4 <_raise_r+0x1e>
 8009bde:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009be2:	b94b      	cbnz	r3, 8009bf8 <_raise_r+0x32>
 8009be4:	4628      	mov	r0, r5
 8009be6:	f000 f831 	bl	8009c4c <_getpid_r>
 8009bea:	4622      	mov	r2, r4
 8009bec:	4601      	mov	r1, r0
 8009bee:	4628      	mov	r0, r5
 8009bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bf4:	f000 b818 	b.w	8009c28 <_kill_r>
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d00a      	beq.n	8009c12 <_raise_r+0x4c>
 8009bfc:	1c59      	adds	r1, r3, #1
 8009bfe:	d103      	bne.n	8009c08 <_raise_r+0x42>
 8009c00:	2316      	movs	r3, #22
 8009c02:	6003      	str	r3, [r0, #0]
 8009c04:	2001      	movs	r0, #1
 8009c06:	e7e7      	b.n	8009bd8 <_raise_r+0x12>
 8009c08:	2100      	movs	r1, #0
 8009c0a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009c0e:	4620      	mov	r0, r4
 8009c10:	4798      	blx	r3
 8009c12:	2000      	movs	r0, #0
 8009c14:	e7e0      	b.n	8009bd8 <_raise_r+0x12>
	...

08009c18 <raise>:
 8009c18:	4b02      	ldr	r3, [pc, #8]	@ (8009c24 <raise+0xc>)
 8009c1a:	4601      	mov	r1, r0
 8009c1c:	6818      	ldr	r0, [r3, #0]
 8009c1e:	f7ff bfd2 	b.w	8009bc6 <_raise_r>
 8009c22:	bf00      	nop
 8009c24:	20000028 	.word	0x20000028

08009c28 <_kill_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4d07      	ldr	r5, [pc, #28]	@ (8009c48 <_kill_r+0x20>)
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4604      	mov	r4, r0
 8009c30:	4608      	mov	r0, r1
 8009c32:	4611      	mov	r1, r2
 8009c34:	602b      	str	r3, [r5, #0]
 8009c36:	f7f9 fafa 	bl	800322e <_kill>
 8009c3a:	1c43      	adds	r3, r0, #1
 8009c3c:	d102      	bne.n	8009c44 <_kill_r+0x1c>
 8009c3e:	682b      	ldr	r3, [r5, #0]
 8009c40:	b103      	cbz	r3, 8009c44 <_kill_r+0x1c>
 8009c42:	6023      	str	r3, [r4, #0]
 8009c44:	bd38      	pop	{r3, r4, r5, pc}
 8009c46:	bf00      	nop
 8009c48:	200004fc 	.word	0x200004fc

08009c4c <_getpid_r>:
 8009c4c:	f7f9 bae7 	b.w	800321e <_getpid>

08009c50 <pow>:
 8009c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c52:	ed2d 8b02 	vpush	{d8}
 8009c56:	eeb0 8a40 	vmov.f32	s16, s0
 8009c5a:	eef0 8a60 	vmov.f32	s17, s1
 8009c5e:	ec55 4b11 	vmov	r4, r5, d1
 8009c62:	f000 f871 	bl	8009d48 <__ieee754_pow>
 8009c66:	4622      	mov	r2, r4
 8009c68:	462b      	mov	r3, r5
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	ec57 6b10 	vmov	r6, r7, d0
 8009c72:	f7f6 ff5b 	bl	8000b2c <__aeabi_dcmpun>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d13b      	bne.n	8009cf2 <pow+0xa2>
 8009c7a:	ec51 0b18 	vmov	r0, r1, d8
 8009c7e:	2200      	movs	r2, #0
 8009c80:	2300      	movs	r3, #0
 8009c82:	f7f6 ff21 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c86:	b1b8      	cbz	r0, 8009cb8 <pow+0x68>
 8009c88:	2200      	movs	r2, #0
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	4629      	mov	r1, r5
 8009c90:	f7f6 ff1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d146      	bne.n	8009d26 <pow+0xd6>
 8009c98:	ec45 4b10 	vmov	d0, r4, r5
 8009c9c:	f000 f848 	bl	8009d30 <finite>
 8009ca0:	b338      	cbz	r0, 8009cf2 <pow+0xa2>
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	4629      	mov	r1, r5
 8009caa:	f7f6 ff17 	bl	8000adc <__aeabi_dcmplt>
 8009cae:	b300      	cbz	r0, 8009cf2 <pow+0xa2>
 8009cb0:	f7fe f8aa 	bl	8007e08 <__errno>
 8009cb4:	2322      	movs	r3, #34	@ 0x22
 8009cb6:	e01b      	b.n	8009cf0 <pow+0xa0>
 8009cb8:	ec47 6b10 	vmov	d0, r6, r7
 8009cbc:	f000 f838 	bl	8009d30 <finite>
 8009cc0:	b9e0      	cbnz	r0, 8009cfc <pow+0xac>
 8009cc2:	eeb0 0a48 	vmov.f32	s0, s16
 8009cc6:	eef0 0a68 	vmov.f32	s1, s17
 8009cca:	f000 f831 	bl	8009d30 <finite>
 8009cce:	b1a8      	cbz	r0, 8009cfc <pow+0xac>
 8009cd0:	ec45 4b10 	vmov	d0, r4, r5
 8009cd4:	f000 f82c 	bl	8009d30 <finite>
 8009cd8:	b180      	cbz	r0, 8009cfc <pow+0xac>
 8009cda:	4632      	mov	r2, r6
 8009cdc:	463b      	mov	r3, r7
 8009cde:	4630      	mov	r0, r6
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	f7f6 ff23 	bl	8000b2c <__aeabi_dcmpun>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d0e2      	beq.n	8009cb0 <pow+0x60>
 8009cea:	f7fe f88d 	bl	8007e08 <__errno>
 8009cee:	2321      	movs	r3, #33	@ 0x21
 8009cf0:	6003      	str	r3, [r0, #0]
 8009cf2:	ecbd 8b02 	vpop	{d8}
 8009cf6:	ec47 6b10 	vmov	d0, r6, r7
 8009cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2300      	movs	r3, #0
 8009d00:	4630      	mov	r0, r6
 8009d02:	4639      	mov	r1, r7
 8009d04:	f7f6 fee0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d0f2      	beq.n	8009cf2 <pow+0xa2>
 8009d0c:	eeb0 0a48 	vmov.f32	s0, s16
 8009d10:	eef0 0a68 	vmov.f32	s1, s17
 8009d14:	f000 f80c 	bl	8009d30 <finite>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	d0ea      	beq.n	8009cf2 <pow+0xa2>
 8009d1c:	ec45 4b10 	vmov	d0, r4, r5
 8009d20:	f000 f806 	bl	8009d30 <finite>
 8009d24:	e7c3      	b.n	8009cae <pow+0x5e>
 8009d26:	4f01      	ldr	r7, [pc, #4]	@ (8009d2c <pow+0xdc>)
 8009d28:	2600      	movs	r6, #0
 8009d2a:	e7e2      	b.n	8009cf2 <pow+0xa2>
 8009d2c:	3ff00000 	.word	0x3ff00000

08009d30 <finite>:
 8009d30:	b082      	sub	sp, #8
 8009d32:	ed8d 0b00 	vstr	d0, [sp]
 8009d36:	9801      	ldr	r0, [sp, #4]
 8009d38:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009d3c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009d40:	0fc0      	lsrs	r0, r0, #31
 8009d42:	b002      	add	sp, #8
 8009d44:	4770      	bx	lr
	...

08009d48 <__ieee754_pow>:
 8009d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	b091      	sub	sp, #68	@ 0x44
 8009d4e:	ed8d 1b00 	vstr	d1, [sp]
 8009d52:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009d56:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009d5a:	ea5a 0001 	orrs.w	r0, sl, r1
 8009d5e:	ec57 6b10 	vmov	r6, r7, d0
 8009d62:	d113      	bne.n	8009d8c <__ieee754_pow+0x44>
 8009d64:	19b3      	adds	r3, r6, r6
 8009d66:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009d6a:	4152      	adcs	r2, r2
 8009d6c:	4298      	cmp	r0, r3
 8009d6e:	4b9a      	ldr	r3, [pc, #616]	@ (8009fd8 <__ieee754_pow+0x290>)
 8009d70:	4193      	sbcs	r3, r2
 8009d72:	f080 84ee 	bcs.w	800a752 <__ieee754_pow+0xa0a>
 8009d76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	4639      	mov	r1, r7
 8009d7e:	f7f6 fa85 	bl	800028c <__adddf3>
 8009d82:	ec41 0b10 	vmov	d0, r0, r1
 8009d86:	b011      	add	sp, #68	@ 0x44
 8009d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8c:	4a93      	ldr	r2, [pc, #588]	@ (8009fdc <__ieee754_pow+0x294>)
 8009d8e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8009d92:	4295      	cmp	r5, r2
 8009d94:	46b8      	mov	r8, r7
 8009d96:	4633      	mov	r3, r6
 8009d98:	d80a      	bhi.n	8009db0 <__ieee754_pow+0x68>
 8009d9a:	d104      	bne.n	8009da6 <__ieee754_pow+0x5e>
 8009d9c:	2e00      	cmp	r6, #0
 8009d9e:	d1ea      	bne.n	8009d76 <__ieee754_pow+0x2e>
 8009da0:	45aa      	cmp	sl, r5
 8009da2:	d8e8      	bhi.n	8009d76 <__ieee754_pow+0x2e>
 8009da4:	e001      	b.n	8009daa <__ieee754_pow+0x62>
 8009da6:	4592      	cmp	sl, r2
 8009da8:	d802      	bhi.n	8009db0 <__ieee754_pow+0x68>
 8009daa:	4592      	cmp	sl, r2
 8009dac:	d10f      	bne.n	8009dce <__ieee754_pow+0x86>
 8009dae:	b171      	cbz	r1, 8009dce <__ieee754_pow+0x86>
 8009db0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009db4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009db8:	ea58 0803 	orrs.w	r8, r8, r3
 8009dbc:	d1db      	bne.n	8009d76 <__ieee754_pow+0x2e>
 8009dbe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009dc2:	18db      	adds	r3, r3, r3
 8009dc4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009dc8:	4152      	adcs	r2, r2
 8009dca:	4598      	cmp	r8, r3
 8009dcc:	e7cf      	b.n	8009d6e <__ieee754_pow+0x26>
 8009dce:	f1b8 0f00 	cmp.w	r8, #0
 8009dd2:	46ab      	mov	fp, r5
 8009dd4:	da43      	bge.n	8009e5e <__ieee754_pow+0x116>
 8009dd6:	4a82      	ldr	r2, [pc, #520]	@ (8009fe0 <__ieee754_pow+0x298>)
 8009dd8:	4592      	cmp	sl, r2
 8009dda:	d856      	bhi.n	8009e8a <__ieee754_pow+0x142>
 8009ddc:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009de0:	4592      	cmp	sl, r2
 8009de2:	f240 84c5 	bls.w	800a770 <__ieee754_pow+0xa28>
 8009de6:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009dea:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009dee:	2a14      	cmp	r2, #20
 8009df0:	dd18      	ble.n	8009e24 <__ieee754_pow+0xdc>
 8009df2:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009df6:	fa21 f402 	lsr.w	r4, r1, r2
 8009dfa:	fa04 f202 	lsl.w	r2, r4, r2
 8009dfe:	428a      	cmp	r2, r1
 8009e00:	f040 84b6 	bne.w	800a770 <__ieee754_pow+0xa28>
 8009e04:	f004 0401 	and.w	r4, r4, #1
 8009e08:	f1c4 0402 	rsb	r4, r4, #2
 8009e0c:	2900      	cmp	r1, #0
 8009e0e:	d159      	bne.n	8009ec4 <__ieee754_pow+0x17c>
 8009e10:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009e14:	d148      	bne.n	8009ea8 <__ieee754_pow+0x160>
 8009e16:	4632      	mov	r2, r6
 8009e18:	463b      	mov	r3, r7
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	f7f6 fbeb 	bl	80005f8 <__aeabi_dmul>
 8009e22:	e7ae      	b.n	8009d82 <__ieee754_pow+0x3a>
 8009e24:	2900      	cmp	r1, #0
 8009e26:	d14c      	bne.n	8009ec2 <__ieee754_pow+0x17a>
 8009e28:	f1c2 0214 	rsb	r2, r2, #20
 8009e2c:	fa4a f402 	asr.w	r4, sl, r2
 8009e30:	fa04 f202 	lsl.w	r2, r4, r2
 8009e34:	4552      	cmp	r2, sl
 8009e36:	f040 8498 	bne.w	800a76a <__ieee754_pow+0xa22>
 8009e3a:	f004 0401 	and.w	r4, r4, #1
 8009e3e:	f1c4 0402 	rsb	r4, r4, #2
 8009e42:	4a68      	ldr	r2, [pc, #416]	@ (8009fe4 <__ieee754_pow+0x29c>)
 8009e44:	4592      	cmp	sl, r2
 8009e46:	d1e3      	bne.n	8009e10 <__ieee754_pow+0xc8>
 8009e48:	f1b9 0f00 	cmp.w	r9, #0
 8009e4c:	f280 8489 	bge.w	800a762 <__ieee754_pow+0xa1a>
 8009e50:	4964      	ldr	r1, [pc, #400]	@ (8009fe4 <__ieee754_pow+0x29c>)
 8009e52:	4632      	mov	r2, r6
 8009e54:	463b      	mov	r3, r7
 8009e56:	2000      	movs	r0, #0
 8009e58:	f7f6 fcf8 	bl	800084c <__aeabi_ddiv>
 8009e5c:	e791      	b.n	8009d82 <__ieee754_pow+0x3a>
 8009e5e:	2400      	movs	r4, #0
 8009e60:	bb81      	cbnz	r1, 8009ec4 <__ieee754_pow+0x17c>
 8009e62:	4a5e      	ldr	r2, [pc, #376]	@ (8009fdc <__ieee754_pow+0x294>)
 8009e64:	4592      	cmp	sl, r2
 8009e66:	d1ec      	bne.n	8009e42 <__ieee754_pow+0xfa>
 8009e68:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8009e6c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009e70:	431a      	orrs	r2, r3
 8009e72:	f000 846e 	beq.w	800a752 <__ieee754_pow+0xa0a>
 8009e76:	4b5c      	ldr	r3, [pc, #368]	@ (8009fe8 <__ieee754_pow+0x2a0>)
 8009e78:	429d      	cmp	r5, r3
 8009e7a:	d908      	bls.n	8009e8e <__ieee754_pow+0x146>
 8009e7c:	f1b9 0f00 	cmp.w	r9, #0
 8009e80:	f280 846b 	bge.w	800a75a <__ieee754_pow+0xa12>
 8009e84:	2000      	movs	r0, #0
 8009e86:	2100      	movs	r1, #0
 8009e88:	e77b      	b.n	8009d82 <__ieee754_pow+0x3a>
 8009e8a:	2402      	movs	r4, #2
 8009e8c:	e7e8      	b.n	8009e60 <__ieee754_pow+0x118>
 8009e8e:	f1b9 0f00 	cmp.w	r9, #0
 8009e92:	f04f 0000 	mov.w	r0, #0
 8009e96:	f04f 0100 	mov.w	r1, #0
 8009e9a:	f6bf af72 	bge.w	8009d82 <__ieee754_pow+0x3a>
 8009e9e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009ea2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009ea6:	e76c      	b.n	8009d82 <__ieee754_pow+0x3a>
 8009ea8:	4a50      	ldr	r2, [pc, #320]	@ (8009fec <__ieee754_pow+0x2a4>)
 8009eaa:	4591      	cmp	r9, r2
 8009eac:	d10a      	bne.n	8009ec4 <__ieee754_pow+0x17c>
 8009eae:	f1b8 0f00 	cmp.w	r8, #0
 8009eb2:	db07      	blt.n	8009ec4 <__ieee754_pow+0x17c>
 8009eb4:	ec47 6b10 	vmov	d0, r6, r7
 8009eb8:	b011      	add	sp, #68	@ 0x44
 8009eba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ebe:	f000 bd4f 	b.w	800a960 <__ieee754_sqrt>
 8009ec2:	2400      	movs	r4, #0
 8009ec4:	ec47 6b10 	vmov	d0, r6, r7
 8009ec8:	9302      	str	r3, [sp, #8]
 8009eca:	f000 fc87 	bl	800a7dc <fabs>
 8009ece:	9b02      	ldr	r3, [sp, #8]
 8009ed0:	ec51 0b10 	vmov	r0, r1, d0
 8009ed4:	bb43      	cbnz	r3, 8009f28 <__ieee754_pow+0x1e0>
 8009ed6:	4b43      	ldr	r3, [pc, #268]	@ (8009fe4 <__ieee754_pow+0x29c>)
 8009ed8:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d000      	beq.n	8009ee2 <__ieee754_pow+0x19a>
 8009ee0:	bb15      	cbnz	r5, 8009f28 <__ieee754_pow+0x1e0>
 8009ee2:	f1b9 0f00 	cmp.w	r9, #0
 8009ee6:	da05      	bge.n	8009ef4 <__ieee754_pow+0x1ac>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	2000      	movs	r0, #0
 8009eee:	493d      	ldr	r1, [pc, #244]	@ (8009fe4 <__ieee754_pow+0x29c>)
 8009ef0:	f7f6 fcac 	bl	800084c <__aeabi_ddiv>
 8009ef4:	f1b8 0f00 	cmp.w	r8, #0
 8009ef8:	f6bf af43 	bge.w	8009d82 <__ieee754_pow+0x3a>
 8009efc:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009f00:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009f04:	4325      	orrs	r5, r4
 8009f06:	d108      	bne.n	8009f1a <__ieee754_pow+0x1d2>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	4619      	mov	r1, r3
 8009f10:	f7f6 f9ba 	bl	8000288 <__aeabi_dsub>
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	e79e      	b.n	8009e58 <__ieee754_pow+0x110>
 8009f1a:	2c01      	cmp	r4, #1
 8009f1c:	f47f af31 	bne.w	8009d82 <__ieee754_pow+0x3a>
 8009f20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f24:	4619      	mov	r1, r3
 8009f26:	e72c      	b.n	8009d82 <__ieee754_pow+0x3a>
 8009f28:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	ea53 0204 	orrs.w	r2, r3, r4
 8009f32:	d102      	bne.n	8009f3a <__ieee754_pow+0x1f2>
 8009f34:	4632      	mov	r2, r6
 8009f36:	463b      	mov	r3, r7
 8009f38:	e7e8      	b.n	8009f0c <__ieee754_pow+0x1c4>
 8009f3a:	3c01      	subs	r4, #1
 8009f3c:	431c      	orrs	r4, r3
 8009f3e:	d016      	beq.n	8009f6e <__ieee754_pow+0x226>
 8009f40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009fc8 <__ieee754_pow+0x280>
 8009f44:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009f48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f4c:	f240 8110 	bls.w	800a170 <__ieee754_pow+0x428>
 8009f50:	4b27      	ldr	r3, [pc, #156]	@ (8009ff0 <__ieee754_pow+0x2a8>)
 8009f52:	459a      	cmp	sl, r3
 8009f54:	4b24      	ldr	r3, [pc, #144]	@ (8009fe8 <__ieee754_pow+0x2a0>)
 8009f56:	d916      	bls.n	8009f86 <__ieee754_pow+0x23e>
 8009f58:	429d      	cmp	r5, r3
 8009f5a:	d80b      	bhi.n	8009f74 <__ieee754_pow+0x22c>
 8009f5c:	f1b9 0f00 	cmp.w	r9, #0
 8009f60:	da0b      	bge.n	8009f7a <__ieee754_pow+0x232>
 8009f62:	2000      	movs	r0, #0
 8009f64:	b011      	add	sp, #68	@ 0x44
 8009f66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6a:	f000 bcf1 	b.w	800a950 <__math_oflow>
 8009f6e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8009fd0 <__ieee754_pow+0x288>
 8009f72:	e7e7      	b.n	8009f44 <__ieee754_pow+0x1fc>
 8009f74:	f1b9 0f00 	cmp.w	r9, #0
 8009f78:	dcf3      	bgt.n	8009f62 <__ieee754_pow+0x21a>
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	b011      	add	sp, #68	@ 0x44
 8009f7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f82:	f000 bcdd 	b.w	800a940 <__math_uflow>
 8009f86:	429d      	cmp	r5, r3
 8009f88:	d20c      	bcs.n	8009fa4 <__ieee754_pow+0x25c>
 8009f8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	2300      	movs	r3, #0
 8009f92:	f7f6 fda3 	bl	8000adc <__aeabi_dcmplt>
 8009f96:	3800      	subs	r0, #0
 8009f98:	bf18      	it	ne
 8009f9a:	2001      	movne	r0, #1
 8009f9c:	f1b9 0f00 	cmp.w	r9, #0
 8009fa0:	daec      	bge.n	8009f7c <__ieee754_pow+0x234>
 8009fa2:	e7df      	b.n	8009f64 <__ieee754_pow+0x21c>
 8009fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8009fe4 <__ieee754_pow+0x29c>)
 8009fa6:	429d      	cmp	r5, r3
 8009fa8:	f04f 0200 	mov.w	r2, #0
 8009fac:	d922      	bls.n	8009ff4 <__ieee754_pow+0x2ac>
 8009fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	f7f6 fd92 	bl	8000adc <__aeabi_dcmplt>
 8009fb8:	3800      	subs	r0, #0
 8009fba:	bf18      	it	ne
 8009fbc:	2001      	movne	r0, #1
 8009fbe:	f1b9 0f00 	cmp.w	r9, #0
 8009fc2:	dccf      	bgt.n	8009f64 <__ieee754_pow+0x21c>
 8009fc4:	e7da      	b.n	8009f7c <__ieee754_pow+0x234>
 8009fc6:	bf00      	nop
 8009fc8:	00000000 	.word	0x00000000
 8009fcc:	3ff00000 	.word	0x3ff00000
 8009fd0:	00000000 	.word	0x00000000
 8009fd4:	bff00000 	.word	0xbff00000
 8009fd8:	fff00000 	.word	0xfff00000
 8009fdc:	7ff00000 	.word	0x7ff00000
 8009fe0:	433fffff 	.word	0x433fffff
 8009fe4:	3ff00000 	.word	0x3ff00000
 8009fe8:	3fefffff 	.word	0x3fefffff
 8009fec:	3fe00000 	.word	0x3fe00000
 8009ff0:	43f00000 	.word	0x43f00000
 8009ff4:	4b5a      	ldr	r3, [pc, #360]	@ (800a160 <__ieee754_pow+0x418>)
 8009ff6:	f7f6 f947 	bl	8000288 <__aeabi_dsub>
 8009ffa:	a351      	add	r3, pc, #324	@ (adr r3, 800a140 <__ieee754_pow+0x3f8>)
 8009ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a000:	4604      	mov	r4, r0
 800a002:	460d      	mov	r5, r1
 800a004:	f7f6 faf8 	bl	80005f8 <__aeabi_dmul>
 800a008:	a34f      	add	r3, pc, #316	@ (adr r3, 800a148 <__ieee754_pow+0x400>)
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	4606      	mov	r6, r0
 800a010:	460f      	mov	r7, r1
 800a012:	4620      	mov	r0, r4
 800a014:	4629      	mov	r1, r5
 800a016:	f7f6 faef 	bl	80005f8 <__aeabi_dmul>
 800a01a:	4b52      	ldr	r3, [pc, #328]	@ (800a164 <__ieee754_pow+0x41c>)
 800a01c:	4682      	mov	sl, r0
 800a01e:	468b      	mov	fp, r1
 800a020:	2200      	movs	r2, #0
 800a022:	4620      	mov	r0, r4
 800a024:	4629      	mov	r1, r5
 800a026:	f7f6 fae7 	bl	80005f8 <__aeabi_dmul>
 800a02a:	4602      	mov	r2, r0
 800a02c:	460b      	mov	r3, r1
 800a02e:	a148      	add	r1, pc, #288	@ (adr r1, 800a150 <__ieee754_pow+0x408>)
 800a030:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a034:	f7f6 f928 	bl	8000288 <__aeabi_dsub>
 800a038:	4622      	mov	r2, r4
 800a03a:	462b      	mov	r3, r5
 800a03c:	f7f6 fadc 	bl	80005f8 <__aeabi_dmul>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	2000      	movs	r0, #0
 800a046:	4948      	ldr	r1, [pc, #288]	@ (800a168 <__ieee754_pow+0x420>)
 800a048:	f7f6 f91e 	bl	8000288 <__aeabi_dsub>
 800a04c:	4622      	mov	r2, r4
 800a04e:	4680      	mov	r8, r0
 800a050:	4689      	mov	r9, r1
 800a052:	462b      	mov	r3, r5
 800a054:	4620      	mov	r0, r4
 800a056:	4629      	mov	r1, r5
 800a058:	f7f6 face 	bl	80005f8 <__aeabi_dmul>
 800a05c:	4602      	mov	r2, r0
 800a05e:	460b      	mov	r3, r1
 800a060:	4640      	mov	r0, r8
 800a062:	4649      	mov	r1, r9
 800a064:	f7f6 fac8 	bl	80005f8 <__aeabi_dmul>
 800a068:	a33b      	add	r3, pc, #236	@ (adr r3, 800a158 <__ieee754_pow+0x410>)
 800a06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06e:	f7f6 fac3 	bl	80005f8 <__aeabi_dmul>
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
 800a076:	4650      	mov	r0, sl
 800a078:	4659      	mov	r1, fp
 800a07a:	f7f6 f905 	bl	8000288 <__aeabi_dsub>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	4680      	mov	r8, r0
 800a084:	4689      	mov	r9, r1
 800a086:	4630      	mov	r0, r6
 800a088:	4639      	mov	r1, r7
 800a08a:	f7f6 f8ff 	bl	800028c <__adddf3>
 800a08e:	2400      	movs	r4, #0
 800a090:	4632      	mov	r2, r6
 800a092:	463b      	mov	r3, r7
 800a094:	4620      	mov	r0, r4
 800a096:	460d      	mov	r5, r1
 800a098:	f7f6 f8f6 	bl	8000288 <__aeabi_dsub>
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	4640      	mov	r0, r8
 800a0a2:	4649      	mov	r1, r9
 800a0a4:	f7f6 f8f0 	bl	8000288 <__aeabi_dsub>
 800a0a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	9304      	str	r3, [sp, #16]
 800a0b4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a0b8:	4606      	mov	r6, r0
 800a0ba:	460f      	mov	r7, r1
 800a0bc:	465b      	mov	r3, fp
 800a0be:	4652      	mov	r2, sl
 800a0c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0c4:	f7f6 f8e0 	bl	8000288 <__aeabi_dsub>
 800a0c8:	4622      	mov	r2, r4
 800a0ca:	462b      	mov	r3, r5
 800a0cc:	f7f6 fa94 	bl	80005f8 <__aeabi_dmul>
 800a0d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0d4:	4680      	mov	r8, r0
 800a0d6:	4689      	mov	r9, r1
 800a0d8:	4630      	mov	r0, r6
 800a0da:	4639      	mov	r1, r7
 800a0dc:	f7f6 fa8c 	bl	80005f8 <__aeabi_dmul>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	4640      	mov	r0, r8
 800a0e6:	4649      	mov	r1, r9
 800a0e8:	f7f6 f8d0 	bl	800028c <__adddf3>
 800a0ec:	465b      	mov	r3, fp
 800a0ee:	4606      	mov	r6, r0
 800a0f0:	460f      	mov	r7, r1
 800a0f2:	4652      	mov	r2, sl
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	f7f6 fa7e 	bl	80005f8 <__aeabi_dmul>
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	4602      	mov	r2, r0
 800a100:	4680      	mov	r8, r0
 800a102:	4689      	mov	r9, r1
 800a104:	4630      	mov	r0, r6
 800a106:	4639      	mov	r1, r7
 800a108:	f7f6 f8c0 	bl	800028c <__adddf3>
 800a10c:	4b17      	ldr	r3, [pc, #92]	@ (800a16c <__ieee754_pow+0x424>)
 800a10e:	4299      	cmp	r1, r3
 800a110:	4604      	mov	r4, r0
 800a112:	460d      	mov	r5, r1
 800a114:	468b      	mov	fp, r1
 800a116:	f340 820b 	ble.w	800a530 <__ieee754_pow+0x7e8>
 800a11a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a11e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a122:	4303      	orrs	r3, r0
 800a124:	f000 81ea 	beq.w	800a4fc <__ieee754_pow+0x7b4>
 800a128:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a12c:	2200      	movs	r2, #0
 800a12e:	2300      	movs	r3, #0
 800a130:	f7f6 fcd4 	bl	8000adc <__aeabi_dcmplt>
 800a134:	3800      	subs	r0, #0
 800a136:	bf18      	it	ne
 800a138:	2001      	movne	r0, #1
 800a13a:	e713      	b.n	8009f64 <__ieee754_pow+0x21c>
 800a13c:	f3af 8000 	nop.w
 800a140:	60000000 	.word	0x60000000
 800a144:	3ff71547 	.word	0x3ff71547
 800a148:	f85ddf44 	.word	0xf85ddf44
 800a14c:	3e54ae0b 	.word	0x3e54ae0b
 800a150:	55555555 	.word	0x55555555
 800a154:	3fd55555 	.word	0x3fd55555
 800a158:	652b82fe 	.word	0x652b82fe
 800a15c:	3ff71547 	.word	0x3ff71547
 800a160:	3ff00000 	.word	0x3ff00000
 800a164:	3fd00000 	.word	0x3fd00000
 800a168:	3fe00000 	.word	0x3fe00000
 800a16c:	408fffff 	.word	0x408fffff
 800a170:	4bd5      	ldr	r3, [pc, #852]	@ (800a4c8 <__ieee754_pow+0x780>)
 800a172:	ea08 0303 	and.w	r3, r8, r3
 800a176:	2200      	movs	r2, #0
 800a178:	b92b      	cbnz	r3, 800a186 <__ieee754_pow+0x43e>
 800a17a:	4bd4      	ldr	r3, [pc, #848]	@ (800a4cc <__ieee754_pow+0x784>)
 800a17c:	f7f6 fa3c 	bl	80005f8 <__aeabi_dmul>
 800a180:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a184:	468b      	mov	fp, r1
 800a186:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a18a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a18e:	4413      	add	r3, r2
 800a190:	930a      	str	r3, [sp, #40]	@ 0x28
 800a192:	4bcf      	ldr	r3, [pc, #828]	@ (800a4d0 <__ieee754_pow+0x788>)
 800a194:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a198:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a19c:	459b      	cmp	fp, r3
 800a19e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a1a2:	dd08      	ble.n	800a1b6 <__ieee754_pow+0x46e>
 800a1a4:	4bcb      	ldr	r3, [pc, #812]	@ (800a4d4 <__ieee754_pow+0x78c>)
 800a1a6:	459b      	cmp	fp, r3
 800a1a8:	f340 81a5 	ble.w	800a4f6 <__ieee754_pow+0x7ae>
 800a1ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1b2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a1b6:	f04f 0a00 	mov.w	sl, #0
 800a1ba:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a1be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1c0:	4bc5      	ldr	r3, [pc, #788]	@ (800a4d8 <__ieee754_pow+0x790>)
 800a1c2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a1c6:	ed93 7b00 	vldr	d7, [r3]
 800a1ca:	4629      	mov	r1, r5
 800a1cc:	ec53 2b17 	vmov	r2, r3, d7
 800a1d0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a1d4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a1d8:	f7f6 f856 	bl	8000288 <__aeabi_dsub>
 800a1dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a1e0:	4606      	mov	r6, r0
 800a1e2:	460f      	mov	r7, r1
 800a1e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1e8:	f7f6 f850 	bl	800028c <__adddf3>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	49ba      	ldr	r1, [pc, #744]	@ (800a4dc <__ieee754_pow+0x794>)
 800a1f4:	f7f6 fb2a 	bl	800084c <__aeabi_ddiv>
 800a1f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	4630      	mov	r0, r6
 800a202:	4639      	mov	r1, r7
 800a204:	f7f6 f9f8 	bl	80005f8 <__aeabi_dmul>
 800a208:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a20c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a210:	106d      	asrs	r5, r5, #1
 800a212:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a216:	f04f 0b00 	mov.w	fp, #0
 800a21a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a21e:	4661      	mov	r1, ip
 800a220:	2200      	movs	r2, #0
 800a222:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a226:	4658      	mov	r0, fp
 800a228:	46e1      	mov	r9, ip
 800a22a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a22e:	4614      	mov	r4, r2
 800a230:	461d      	mov	r5, r3
 800a232:	f7f6 f9e1 	bl	80005f8 <__aeabi_dmul>
 800a236:	4602      	mov	r2, r0
 800a238:	460b      	mov	r3, r1
 800a23a:	4630      	mov	r0, r6
 800a23c:	4639      	mov	r1, r7
 800a23e:	f7f6 f823 	bl	8000288 <__aeabi_dsub>
 800a242:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a246:	4606      	mov	r6, r0
 800a248:	460f      	mov	r7, r1
 800a24a:	4620      	mov	r0, r4
 800a24c:	4629      	mov	r1, r5
 800a24e:	f7f6 f81b 	bl	8000288 <__aeabi_dsub>
 800a252:	4602      	mov	r2, r0
 800a254:	460b      	mov	r3, r1
 800a256:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a25a:	f7f6 f815 	bl	8000288 <__aeabi_dsub>
 800a25e:	465a      	mov	r2, fp
 800a260:	464b      	mov	r3, r9
 800a262:	f7f6 f9c9 	bl	80005f8 <__aeabi_dmul>
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	4630      	mov	r0, r6
 800a26c:	4639      	mov	r1, r7
 800a26e:	f7f6 f80b 	bl	8000288 <__aeabi_dsub>
 800a272:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a276:	f7f6 f9bf 	bl	80005f8 <__aeabi_dmul>
 800a27a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a27e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a282:	4610      	mov	r0, r2
 800a284:	4619      	mov	r1, r3
 800a286:	f7f6 f9b7 	bl	80005f8 <__aeabi_dmul>
 800a28a:	a37d      	add	r3, pc, #500	@ (adr r3, 800a480 <__ieee754_pow+0x738>)
 800a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a290:	4604      	mov	r4, r0
 800a292:	460d      	mov	r5, r1
 800a294:	f7f6 f9b0 	bl	80005f8 <__aeabi_dmul>
 800a298:	a37b      	add	r3, pc, #492	@ (adr r3, 800a488 <__ieee754_pow+0x740>)
 800a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29e:	f7f5 fff5 	bl	800028c <__adddf3>
 800a2a2:	4622      	mov	r2, r4
 800a2a4:	462b      	mov	r3, r5
 800a2a6:	f7f6 f9a7 	bl	80005f8 <__aeabi_dmul>
 800a2aa:	a379      	add	r3, pc, #484	@ (adr r3, 800a490 <__ieee754_pow+0x748>)
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	f7f5 ffec 	bl	800028c <__adddf3>
 800a2b4:	4622      	mov	r2, r4
 800a2b6:	462b      	mov	r3, r5
 800a2b8:	f7f6 f99e 	bl	80005f8 <__aeabi_dmul>
 800a2bc:	a376      	add	r3, pc, #472	@ (adr r3, 800a498 <__ieee754_pow+0x750>)
 800a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c2:	f7f5 ffe3 	bl	800028c <__adddf3>
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	462b      	mov	r3, r5
 800a2ca:	f7f6 f995 	bl	80005f8 <__aeabi_dmul>
 800a2ce:	a374      	add	r3, pc, #464	@ (adr r3, 800a4a0 <__ieee754_pow+0x758>)
 800a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d4:	f7f5 ffda 	bl	800028c <__adddf3>
 800a2d8:	4622      	mov	r2, r4
 800a2da:	462b      	mov	r3, r5
 800a2dc:	f7f6 f98c 	bl	80005f8 <__aeabi_dmul>
 800a2e0:	a371      	add	r3, pc, #452	@ (adr r3, 800a4a8 <__ieee754_pow+0x760>)
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	f7f5 ffd1 	bl	800028c <__adddf3>
 800a2ea:	4622      	mov	r2, r4
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	460f      	mov	r7, r1
 800a2f0:	462b      	mov	r3, r5
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	f7f6 f97f 	bl	80005f8 <__aeabi_dmul>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4630      	mov	r0, r6
 800a300:	4639      	mov	r1, r7
 800a302:	f7f6 f979 	bl	80005f8 <__aeabi_dmul>
 800a306:	465a      	mov	r2, fp
 800a308:	4604      	mov	r4, r0
 800a30a:	460d      	mov	r5, r1
 800a30c:	464b      	mov	r3, r9
 800a30e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a312:	f7f5 ffbb 	bl	800028c <__adddf3>
 800a316:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a31a:	f7f6 f96d 	bl	80005f8 <__aeabi_dmul>
 800a31e:	4622      	mov	r2, r4
 800a320:	462b      	mov	r3, r5
 800a322:	f7f5 ffb3 	bl	800028c <__adddf3>
 800a326:	465a      	mov	r2, fp
 800a328:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a32c:	464b      	mov	r3, r9
 800a32e:	4658      	mov	r0, fp
 800a330:	4649      	mov	r1, r9
 800a332:	f7f6 f961 	bl	80005f8 <__aeabi_dmul>
 800a336:	4b6a      	ldr	r3, [pc, #424]	@ (800a4e0 <__ieee754_pow+0x798>)
 800a338:	2200      	movs	r2, #0
 800a33a:	4606      	mov	r6, r0
 800a33c:	460f      	mov	r7, r1
 800a33e:	f7f5 ffa5 	bl	800028c <__adddf3>
 800a342:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a346:	f7f5 ffa1 	bl	800028c <__adddf3>
 800a34a:	46d8      	mov	r8, fp
 800a34c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a350:	460d      	mov	r5, r1
 800a352:	465a      	mov	r2, fp
 800a354:	460b      	mov	r3, r1
 800a356:	4640      	mov	r0, r8
 800a358:	4649      	mov	r1, r9
 800a35a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a35e:	f7f6 f94b 	bl	80005f8 <__aeabi_dmul>
 800a362:	465c      	mov	r4, fp
 800a364:	4680      	mov	r8, r0
 800a366:	4689      	mov	r9, r1
 800a368:	4b5d      	ldr	r3, [pc, #372]	@ (800a4e0 <__ieee754_pow+0x798>)
 800a36a:	2200      	movs	r2, #0
 800a36c:	4620      	mov	r0, r4
 800a36e:	4629      	mov	r1, r5
 800a370:	f7f5 ff8a 	bl	8000288 <__aeabi_dsub>
 800a374:	4632      	mov	r2, r6
 800a376:	463b      	mov	r3, r7
 800a378:	f7f5 ff86 	bl	8000288 <__aeabi_dsub>
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a384:	f7f5 ff80 	bl	8000288 <__aeabi_dsub>
 800a388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a38c:	f7f6 f934 	bl	80005f8 <__aeabi_dmul>
 800a390:	4622      	mov	r2, r4
 800a392:	4606      	mov	r6, r0
 800a394:	460f      	mov	r7, r1
 800a396:	462b      	mov	r3, r5
 800a398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a39c:	f7f6 f92c 	bl	80005f8 <__aeabi_dmul>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	4639      	mov	r1, r7
 800a3a8:	f7f5 ff70 	bl	800028c <__adddf3>
 800a3ac:	4606      	mov	r6, r0
 800a3ae:	460f      	mov	r7, r1
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4640      	mov	r0, r8
 800a3b6:	4649      	mov	r1, r9
 800a3b8:	f7f5 ff68 	bl	800028c <__adddf3>
 800a3bc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a3c0:	a33b      	add	r3, pc, #236	@ (adr r3, 800a4b0 <__ieee754_pow+0x768>)
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	4658      	mov	r0, fp
 800a3c8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a3cc:	460d      	mov	r5, r1
 800a3ce:	f7f6 f913 	bl	80005f8 <__aeabi_dmul>
 800a3d2:	465c      	mov	r4, fp
 800a3d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3d8:	4642      	mov	r2, r8
 800a3da:	464b      	mov	r3, r9
 800a3dc:	4620      	mov	r0, r4
 800a3de:	4629      	mov	r1, r5
 800a3e0:	f7f5 ff52 	bl	8000288 <__aeabi_dsub>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	4639      	mov	r1, r7
 800a3ec:	f7f5 ff4c 	bl	8000288 <__aeabi_dsub>
 800a3f0:	a331      	add	r3, pc, #196	@ (adr r3, 800a4b8 <__ieee754_pow+0x770>)
 800a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f6:	f7f6 f8ff 	bl	80005f8 <__aeabi_dmul>
 800a3fa:	a331      	add	r3, pc, #196	@ (adr r3, 800a4c0 <__ieee754_pow+0x778>)
 800a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a400:	4606      	mov	r6, r0
 800a402:	460f      	mov	r7, r1
 800a404:	4620      	mov	r0, r4
 800a406:	4629      	mov	r1, r5
 800a408:	f7f6 f8f6 	bl	80005f8 <__aeabi_dmul>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	4630      	mov	r0, r6
 800a412:	4639      	mov	r1, r7
 800a414:	f7f5 ff3a 	bl	800028c <__adddf3>
 800a418:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a41a:	4b32      	ldr	r3, [pc, #200]	@ (800a4e4 <__ieee754_pow+0x79c>)
 800a41c:	4413      	add	r3, r2
 800a41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a422:	f7f5 ff33 	bl	800028c <__adddf3>
 800a426:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a42a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a42c:	f7f6 f87a 	bl	8000524 <__aeabi_i2d>
 800a430:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a432:	4b2d      	ldr	r3, [pc, #180]	@ (800a4e8 <__ieee754_pow+0x7a0>)
 800a434:	4413      	add	r3, r2
 800a436:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a43a:	4606      	mov	r6, r0
 800a43c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a440:	460f      	mov	r7, r1
 800a442:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a446:	f7f5 ff21 	bl	800028c <__adddf3>
 800a44a:	4642      	mov	r2, r8
 800a44c:	464b      	mov	r3, r9
 800a44e:	f7f5 ff1d 	bl	800028c <__adddf3>
 800a452:	4632      	mov	r2, r6
 800a454:	463b      	mov	r3, r7
 800a456:	f7f5 ff19 	bl	800028c <__adddf3>
 800a45a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a45e:	4632      	mov	r2, r6
 800a460:	463b      	mov	r3, r7
 800a462:	4658      	mov	r0, fp
 800a464:	460d      	mov	r5, r1
 800a466:	f7f5 ff0f 	bl	8000288 <__aeabi_dsub>
 800a46a:	4642      	mov	r2, r8
 800a46c:	464b      	mov	r3, r9
 800a46e:	f7f5 ff0b 	bl	8000288 <__aeabi_dsub>
 800a472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a476:	f7f5 ff07 	bl	8000288 <__aeabi_dsub>
 800a47a:	465c      	mov	r4, fp
 800a47c:	e036      	b.n	800a4ec <__ieee754_pow+0x7a4>
 800a47e:	bf00      	nop
 800a480:	4a454eef 	.word	0x4a454eef
 800a484:	3fca7e28 	.word	0x3fca7e28
 800a488:	93c9db65 	.word	0x93c9db65
 800a48c:	3fcd864a 	.word	0x3fcd864a
 800a490:	a91d4101 	.word	0xa91d4101
 800a494:	3fd17460 	.word	0x3fd17460
 800a498:	518f264d 	.word	0x518f264d
 800a49c:	3fd55555 	.word	0x3fd55555
 800a4a0:	db6fabff 	.word	0xdb6fabff
 800a4a4:	3fdb6db6 	.word	0x3fdb6db6
 800a4a8:	33333303 	.word	0x33333303
 800a4ac:	3fe33333 	.word	0x3fe33333
 800a4b0:	e0000000 	.word	0xe0000000
 800a4b4:	3feec709 	.word	0x3feec709
 800a4b8:	dc3a03fd 	.word	0xdc3a03fd
 800a4bc:	3feec709 	.word	0x3feec709
 800a4c0:	145b01f5 	.word	0x145b01f5
 800a4c4:	be3e2fe0 	.word	0xbe3e2fe0
 800a4c8:	7ff00000 	.word	0x7ff00000
 800a4cc:	43400000 	.word	0x43400000
 800a4d0:	0003988e 	.word	0x0003988e
 800a4d4:	000bb679 	.word	0x000bb679
 800a4d8:	0800cd90 	.word	0x0800cd90
 800a4dc:	3ff00000 	.word	0x3ff00000
 800a4e0:	40080000 	.word	0x40080000
 800a4e4:	0800cd70 	.word	0x0800cd70
 800a4e8:	0800cd80 	.word	0x0800cd80
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4f4:	e5d6      	b.n	800a0a4 <__ieee754_pow+0x35c>
 800a4f6:	f04f 0a01 	mov.w	sl, #1
 800a4fa:	e65e      	b.n	800a1ba <__ieee754_pow+0x472>
 800a4fc:	a3b5      	add	r3, pc, #724	@ (adr r3, 800a7d4 <__ieee754_pow+0xa8c>)
 800a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a502:	4630      	mov	r0, r6
 800a504:	4639      	mov	r1, r7
 800a506:	f7f5 fec1 	bl	800028c <__adddf3>
 800a50a:	4642      	mov	r2, r8
 800a50c:	e9cd 0100 	strd	r0, r1, [sp]
 800a510:	464b      	mov	r3, r9
 800a512:	4620      	mov	r0, r4
 800a514:	4629      	mov	r1, r5
 800a516:	f7f5 feb7 	bl	8000288 <__aeabi_dsub>
 800a51a:	4602      	mov	r2, r0
 800a51c:	460b      	mov	r3, r1
 800a51e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a522:	f7f6 faf9 	bl	8000b18 <__aeabi_dcmpgt>
 800a526:	2800      	cmp	r0, #0
 800a528:	f47f adfe 	bne.w	800a128 <__ieee754_pow+0x3e0>
 800a52c:	4ba2      	ldr	r3, [pc, #648]	@ (800a7b8 <__ieee754_pow+0xa70>)
 800a52e:	e022      	b.n	800a576 <__ieee754_pow+0x82e>
 800a530:	4ca2      	ldr	r4, [pc, #648]	@ (800a7bc <__ieee754_pow+0xa74>)
 800a532:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a536:	42a3      	cmp	r3, r4
 800a538:	d919      	bls.n	800a56e <__ieee754_pow+0x826>
 800a53a:	4ba1      	ldr	r3, [pc, #644]	@ (800a7c0 <__ieee754_pow+0xa78>)
 800a53c:	440b      	add	r3, r1
 800a53e:	4303      	orrs	r3, r0
 800a540:	d009      	beq.n	800a556 <__ieee754_pow+0x80e>
 800a542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a546:	2200      	movs	r2, #0
 800a548:	2300      	movs	r3, #0
 800a54a:	f7f6 fac7 	bl	8000adc <__aeabi_dcmplt>
 800a54e:	3800      	subs	r0, #0
 800a550:	bf18      	it	ne
 800a552:	2001      	movne	r0, #1
 800a554:	e512      	b.n	8009f7c <__ieee754_pow+0x234>
 800a556:	4642      	mov	r2, r8
 800a558:	464b      	mov	r3, r9
 800a55a:	f7f5 fe95 	bl	8000288 <__aeabi_dsub>
 800a55e:	4632      	mov	r2, r6
 800a560:	463b      	mov	r3, r7
 800a562:	f7f6 facf 	bl	8000b04 <__aeabi_dcmpge>
 800a566:	2800      	cmp	r0, #0
 800a568:	d1eb      	bne.n	800a542 <__ieee754_pow+0x7fa>
 800a56a:	4b96      	ldr	r3, [pc, #600]	@ (800a7c4 <__ieee754_pow+0xa7c>)
 800a56c:	e003      	b.n	800a576 <__ieee754_pow+0x82e>
 800a56e:	4a96      	ldr	r2, [pc, #600]	@ (800a7c8 <__ieee754_pow+0xa80>)
 800a570:	4293      	cmp	r3, r2
 800a572:	f240 80e7 	bls.w	800a744 <__ieee754_pow+0x9fc>
 800a576:	151b      	asrs	r3, r3, #20
 800a578:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800a57c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800a580:	fa4a fa03 	asr.w	sl, sl, r3
 800a584:	44da      	add	sl, fp
 800a586:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a58a:	4890      	ldr	r0, [pc, #576]	@ (800a7cc <__ieee754_pow+0xa84>)
 800a58c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a590:	4108      	asrs	r0, r1
 800a592:	ea00 030a 	and.w	r3, r0, sl
 800a596:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a59a:	f1c1 0114 	rsb	r1, r1, #20
 800a59e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a5a2:	fa4a fa01 	asr.w	sl, sl, r1
 800a5a6:	f1bb 0f00 	cmp.w	fp, #0
 800a5aa:	4640      	mov	r0, r8
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	f04f 0200 	mov.w	r2, #0
 800a5b2:	bfb8      	it	lt
 800a5b4:	f1ca 0a00 	rsblt	sl, sl, #0
 800a5b8:	f7f5 fe66 	bl	8000288 <__aeabi_dsub>
 800a5bc:	4680      	mov	r8, r0
 800a5be:	4689      	mov	r9, r1
 800a5c0:	4632      	mov	r2, r6
 800a5c2:	463b      	mov	r3, r7
 800a5c4:	4640      	mov	r0, r8
 800a5c6:	4649      	mov	r1, r9
 800a5c8:	f7f5 fe60 	bl	800028c <__adddf3>
 800a5cc:	2400      	movs	r4, #0
 800a5ce:	a36a      	add	r3, pc, #424	@ (adr r3, 800a778 <__ieee754_pow+0xa30>)
 800a5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	460d      	mov	r5, r1
 800a5d8:	f7f6 f80e 	bl	80005f8 <__aeabi_dmul>
 800a5dc:	4642      	mov	r2, r8
 800a5de:	e9cd 0100 	strd	r0, r1, [sp]
 800a5e2:	464b      	mov	r3, r9
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	f7f5 fe4e 	bl	8000288 <__aeabi_dsub>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	4639      	mov	r1, r7
 800a5f4:	f7f5 fe48 	bl	8000288 <__aeabi_dsub>
 800a5f8:	a361      	add	r3, pc, #388	@ (adr r3, 800a780 <__ieee754_pow+0xa38>)
 800a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fe:	f7f5 fffb 	bl	80005f8 <__aeabi_dmul>
 800a602:	a361      	add	r3, pc, #388	@ (adr r3, 800a788 <__ieee754_pow+0xa40>)
 800a604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a608:	4680      	mov	r8, r0
 800a60a:	4689      	mov	r9, r1
 800a60c:	4620      	mov	r0, r4
 800a60e:	4629      	mov	r1, r5
 800a610:	f7f5 fff2 	bl	80005f8 <__aeabi_dmul>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	4640      	mov	r0, r8
 800a61a:	4649      	mov	r1, r9
 800a61c:	f7f5 fe36 	bl	800028c <__adddf3>
 800a620:	4604      	mov	r4, r0
 800a622:	460d      	mov	r5, r1
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a62c:	f7f5 fe2e 	bl	800028c <__adddf3>
 800a630:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a634:	4680      	mov	r8, r0
 800a636:	4689      	mov	r9, r1
 800a638:	f7f5 fe26 	bl	8000288 <__aeabi_dsub>
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	4620      	mov	r0, r4
 800a642:	4629      	mov	r1, r5
 800a644:	f7f5 fe20 	bl	8000288 <__aeabi_dsub>
 800a648:	4642      	mov	r2, r8
 800a64a:	4606      	mov	r6, r0
 800a64c:	460f      	mov	r7, r1
 800a64e:	464b      	mov	r3, r9
 800a650:	4640      	mov	r0, r8
 800a652:	4649      	mov	r1, r9
 800a654:	f7f5 ffd0 	bl	80005f8 <__aeabi_dmul>
 800a658:	a34d      	add	r3, pc, #308	@ (adr r3, 800a790 <__ieee754_pow+0xa48>)
 800a65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65e:	4604      	mov	r4, r0
 800a660:	460d      	mov	r5, r1
 800a662:	f7f5 ffc9 	bl	80005f8 <__aeabi_dmul>
 800a666:	a34c      	add	r3, pc, #304	@ (adr r3, 800a798 <__ieee754_pow+0xa50>)
 800a668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66c:	f7f5 fe0c 	bl	8000288 <__aeabi_dsub>
 800a670:	4622      	mov	r2, r4
 800a672:	462b      	mov	r3, r5
 800a674:	f7f5 ffc0 	bl	80005f8 <__aeabi_dmul>
 800a678:	a349      	add	r3, pc, #292	@ (adr r3, 800a7a0 <__ieee754_pow+0xa58>)
 800a67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67e:	f7f5 fe05 	bl	800028c <__adddf3>
 800a682:	4622      	mov	r2, r4
 800a684:	462b      	mov	r3, r5
 800a686:	f7f5 ffb7 	bl	80005f8 <__aeabi_dmul>
 800a68a:	a347      	add	r3, pc, #284	@ (adr r3, 800a7a8 <__ieee754_pow+0xa60>)
 800a68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a690:	f7f5 fdfa 	bl	8000288 <__aeabi_dsub>
 800a694:	4622      	mov	r2, r4
 800a696:	462b      	mov	r3, r5
 800a698:	f7f5 ffae 	bl	80005f8 <__aeabi_dmul>
 800a69c:	a344      	add	r3, pc, #272	@ (adr r3, 800a7b0 <__ieee754_pow+0xa68>)
 800a69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a2:	f7f5 fdf3 	bl	800028c <__adddf3>
 800a6a6:	4622      	mov	r2, r4
 800a6a8:	462b      	mov	r3, r5
 800a6aa:	f7f5 ffa5 	bl	80005f8 <__aeabi_dmul>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	4640      	mov	r0, r8
 800a6b4:	4649      	mov	r1, r9
 800a6b6:	f7f5 fde7 	bl	8000288 <__aeabi_dsub>
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	460d      	mov	r5, r1
 800a6be:	4602      	mov	r2, r0
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	4640      	mov	r0, r8
 800a6c4:	4649      	mov	r1, r9
 800a6c6:	f7f5 ff97 	bl	80005f8 <__aeabi_dmul>
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	e9cd 0100 	strd	r0, r1, [sp]
 800a6d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	4629      	mov	r1, r5
 800a6d8:	f7f5 fdd6 	bl	8000288 <__aeabi_dsub>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6e4:	f7f6 f8b2 	bl	800084c <__aeabi_ddiv>
 800a6e8:	4632      	mov	r2, r6
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	460d      	mov	r5, r1
 800a6ee:	463b      	mov	r3, r7
 800a6f0:	4640      	mov	r0, r8
 800a6f2:	4649      	mov	r1, r9
 800a6f4:	f7f5 ff80 	bl	80005f8 <__aeabi_dmul>
 800a6f8:	4632      	mov	r2, r6
 800a6fa:	463b      	mov	r3, r7
 800a6fc:	f7f5 fdc6 	bl	800028c <__adddf3>
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	4620      	mov	r0, r4
 800a706:	4629      	mov	r1, r5
 800a708:	f7f5 fdbe 	bl	8000288 <__aeabi_dsub>
 800a70c:	4642      	mov	r2, r8
 800a70e:	464b      	mov	r3, r9
 800a710:	f7f5 fdba 	bl	8000288 <__aeabi_dsub>
 800a714:	460b      	mov	r3, r1
 800a716:	4602      	mov	r2, r0
 800a718:	492d      	ldr	r1, [pc, #180]	@ (800a7d0 <__ieee754_pow+0xa88>)
 800a71a:	2000      	movs	r0, #0
 800a71c:	f7f5 fdb4 	bl	8000288 <__aeabi_dsub>
 800a720:	ec41 0b10 	vmov	d0, r0, r1
 800a724:	ee10 3a90 	vmov	r3, s1
 800a728:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a72c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a730:	da0b      	bge.n	800a74a <__ieee754_pow+0xa02>
 800a732:	4650      	mov	r0, sl
 800a734:	f000 f85c 	bl	800a7f0 <scalbn>
 800a738:	ec51 0b10 	vmov	r0, r1, d0
 800a73c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a740:	f7ff bb6d 	b.w	8009e1e <__ieee754_pow+0xd6>
 800a744:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a748:	e73a      	b.n	800a5c0 <__ieee754_pow+0x878>
 800a74a:	ec51 0b10 	vmov	r0, r1, d0
 800a74e:	4619      	mov	r1, r3
 800a750:	e7f4      	b.n	800a73c <__ieee754_pow+0x9f4>
 800a752:	491f      	ldr	r1, [pc, #124]	@ (800a7d0 <__ieee754_pow+0xa88>)
 800a754:	2000      	movs	r0, #0
 800a756:	f7ff bb14 	b.w	8009d82 <__ieee754_pow+0x3a>
 800a75a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a75e:	f7ff bb10 	b.w	8009d82 <__ieee754_pow+0x3a>
 800a762:	4630      	mov	r0, r6
 800a764:	4639      	mov	r1, r7
 800a766:	f7ff bb0c 	b.w	8009d82 <__ieee754_pow+0x3a>
 800a76a:	460c      	mov	r4, r1
 800a76c:	f7ff bb69 	b.w	8009e42 <__ieee754_pow+0xfa>
 800a770:	2400      	movs	r4, #0
 800a772:	f7ff bb4b 	b.w	8009e0c <__ieee754_pow+0xc4>
 800a776:	bf00      	nop
 800a778:	00000000 	.word	0x00000000
 800a77c:	3fe62e43 	.word	0x3fe62e43
 800a780:	fefa39ef 	.word	0xfefa39ef
 800a784:	3fe62e42 	.word	0x3fe62e42
 800a788:	0ca86c39 	.word	0x0ca86c39
 800a78c:	be205c61 	.word	0xbe205c61
 800a790:	72bea4d0 	.word	0x72bea4d0
 800a794:	3e663769 	.word	0x3e663769
 800a798:	c5d26bf1 	.word	0xc5d26bf1
 800a79c:	3ebbbd41 	.word	0x3ebbbd41
 800a7a0:	af25de2c 	.word	0xaf25de2c
 800a7a4:	3f11566a 	.word	0x3f11566a
 800a7a8:	16bebd93 	.word	0x16bebd93
 800a7ac:	3f66c16c 	.word	0x3f66c16c
 800a7b0:	5555553e 	.word	0x5555553e
 800a7b4:	3fc55555 	.word	0x3fc55555
 800a7b8:	40900000 	.word	0x40900000
 800a7bc:	4090cbff 	.word	0x4090cbff
 800a7c0:	3f6f3400 	.word	0x3f6f3400
 800a7c4:	4090cc00 	.word	0x4090cc00
 800a7c8:	3fe00000 	.word	0x3fe00000
 800a7cc:	fff00000 	.word	0xfff00000
 800a7d0:	3ff00000 	.word	0x3ff00000
 800a7d4:	652b82fe 	.word	0x652b82fe
 800a7d8:	3c971547 	.word	0x3c971547

0800a7dc <fabs>:
 800a7dc:	ec51 0b10 	vmov	r0, r1, d0
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a7e6:	ec43 2b10 	vmov	d0, r2, r3
 800a7ea:	4770      	bx	lr
 800a7ec:	0000      	movs	r0, r0
	...

0800a7f0 <scalbn>:
 800a7f0:	b570      	push	{r4, r5, r6, lr}
 800a7f2:	ec55 4b10 	vmov	r4, r5, d0
 800a7f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a7fa:	4606      	mov	r6, r0
 800a7fc:	462b      	mov	r3, r5
 800a7fe:	b991      	cbnz	r1, 800a826 <scalbn+0x36>
 800a800:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a804:	4323      	orrs	r3, r4
 800a806:	d03b      	beq.n	800a880 <scalbn+0x90>
 800a808:	4b33      	ldr	r3, [pc, #204]	@ (800a8d8 <scalbn+0xe8>)
 800a80a:	4620      	mov	r0, r4
 800a80c:	4629      	mov	r1, r5
 800a80e:	2200      	movs	r2, #0
 800a810:	f7f5 fef2 	bl	80005f8 <__aeabi_dmul>
 800a814:	4b31      	ldr	r3, [pc, #196]	@ (800a8dc <scalbn+0xec>)
 800a816:	429e      	cmp	r6, r3
 800a818:	4604      	mov	r4, r0
 800a81a:	460d      	mov	r5, r1
 800a81c:	da0f      	bge.n	800a83e <scalbn+0x4e>
 800a81e:	a326      	add	r3, pc, #152	@ (adr r3, 800a8b8 <scalbn+0xc8>)
 800a820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a824:	e01e      	b.n	800a864 <scalbn+0x74>
 800a826:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a82a:	4291      	cmp	r1, r2
 800a82c:	d10b      	bne.n	800a846 <scalbn+0x56>
 800a82e:	4622      	mov	r2, r4
 800a830:	4620      	mov	r0, r4
 800a832:	4629      	mov	r1, r5
 800a834:	f7f5 fd2a 	bl	800028c <__adddf3>
 800a838:	4604      	mov	r4, r0
 800a83a:	460d      	mov	r5, r1
 800a83c:	e020      	b.n	800a880 <scalbn+0x90>
 800a83e:	460b      	mov	r3, r1
 800a840:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a844:	3936      	subs	r1, #54	@ 0x36
 800a846:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a84a:	4296      	cmp	r6, r2
 800a84c:	dd0d      	ble.n	800a86a <scalbn+0x7a>
 800a84e:	2d00      	cmp	r5, #0
 800a850:	a11b      	add	r1, pc, #108	@ (adr r1, 800a8c0 <scalbn+0xd0>)
 800a852:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a856:	da02      	bge.n	800a85e <scalbn+0x6e>
 800a858:	a11b      	add	r1, pc, #108	@ (adr r1, 800a8c8 <scalbn+0xd8>)
 800a85a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a85e:	a318      	add	r3, pc, #96	@ (adr r3, 800a8c0 <scalbn+0xd0>)
 800a860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a864:	f7f5 fec8 	bl	80005f8 <__aeabi_dmul>
 800a868:	e7e6      	b.n	800a838 <scalbn+0x48>
 800a86a:	1872      	adds	r2, r6, r1
 800a86c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a870:	428a      	cmp	r2, r1
 800a872:	dcec      	bgt.n	800a84e <scalbn+0x5e>
 800a874:	2a00      	cmp	r2, #0
 800a876:	dd06      	ble.n	800a886 <scalbn+0x96>
 800a878:	f36f 531e 	bfc	r3, #20, #11
 800a87c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a880:	ec45 4b10 	vmov	d0, r4, r5
 800a884:	bd70      	pop	{r4, r5, r6, pc}
 800a886:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a88a:	da08      	bge.n	800a89e <scalbn+0xae>
 800a88c:	2d00      	cmp	r5, #0
 800a88e:	a10a      	add	r1, pc, #40	@ (adr r1, 800a8b8 <scalbn+0xc8>)
 800a890:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a894:	dac3      	bge.n	800a81e <scalbn+0x2e>
 800a896:	a10e      	add	r1, pc, #56	@ (adr r1, 800a8d0 <scalbn+0xe0>)
 800a898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a89c:	e7bf      	b.n	800a81e <scalbn+0x2e>
 800a89e:	3236      	adds	r2, #54	@ 0x36
 800a8a0:	f36f 531e 	bfc	r3, #20, #11
 800a8a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a8e0 <scalbn+0xf0>)
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	e7d8      	b.n	800a864 <scalbn+0x74>
 800a8b2:	bf00      	nop
 800a8b4:	f3af 8000 	nop.w
 800a8b8:	c2f8f359 	.word	0xc2f8f359
 800a8bc:	01a56e1f 	.word	0x01a56e1f
 800a8c0:	8800759c 	.word	0x8800759c
 800a8c4:	7e37e43c 	.word	0x7e37e43c
 800a8c8:	8800759c 	.word	0x8800759c
 800a8cc:	fe37e43c 	.word	0xfe37e43c
 800a8d0:	c2f8f359 	.word	0xc2f8f359
 800a8d4:	81a56e1f 	.word	0x81a56e1f
 800a8d8:	43500000 	.word	0x43500000
 800a8dc:	ffff3cb0 	.word	0xffff3cb0
 800a8e0:	3c900000 	.word	0x3c900000

0800a8e4 <with_errno>:
 800a8e4:	b510      	push	{r4, lr}
 800a8e6:	ed2d 8b02 	vpush	{d8}
 800a8ea:	eeb0 8a40 	vmov.f32	s16, s0
 800a8ee:	eef0 8a60 	vmov.f32	s17, s1
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	f7fd fa88 	bl	8007e08 <__errno>
 800a8f8:	eeb0 0a48 	vmov.f32	s0, s16
 800a8fc:	eef0 0a68 	vmov.f32	s1, s17
 800a900:	ecbd 8b02 	vpop	{d8}
 800a904:	6004      	str	r4, [r0, #0]
 800a906:	bd10      	pop	{r4, pc}

0800a908 <xflow>:
 800a908:	4603      	mov	r3, r0
 800a90a:	b507      	push	{r0, r1, r2, lr}
 800a90c:	ec51 0b10 	vmov	r0, r1, d0
 800a910:	b183      	cbz	r3, 800a934 <xflow+0x2c>
 800a912:	4602      	mov	r2, r0
 800a914:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a918:	e9cd 2300 	strd	r2, r3, [sp]
 800a91c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a920:	f7f5 fe6a 	bl	80005f8 <__aeabi_dmul>
 800a924:	ec41 0b10 	vmov	d0, r0, r1
 800a928:	2022      	movs	r0, #34	@ 0x22
 800a92a:	b003      	add	sp, #12
 800a92c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a930:	f7ff bfd8 	b.w	800a8e4 <with_errno>
 800a934:	4602      	mov	r2, r0
 800a936:	460b      	mov	r3, r1
 800a938:	e7ee      	b.n	800a918 <xflow+0x10>
 800a93a:	0000      	movs	r0, r0
 800a93c:	0000      	movs	r0, r0
	...

0800a940 <__math_uflow>:
 800a940:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a948 <__math_uflow+0x8>
 800a944:	f7ff bfe0 	b.w	800a908 <xflow>
 800a948:	00000000 	.word	0x00000000
 800a94c:	10000000 	.word	0x10000000

0800a950 <__math_oflow>:
 800a950:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a958 <__math_oflow+0x8>
 800a954:	f7ff bfd8 	b.w	800a908 <xflow>
 800a958:	00000000 	.word	0x00000000
 800a95c:	70000000 	.word	0x70000000

0800a960 <__ieee754_sqrt>:
 800a960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a964:	4a66      	ldr	r2, [pc, #408]	@ (800ab00 <__ieee754_sqrt+0x1a0>)
 800a966:	ec55 4b10 	vmov	r4, r5, d0
 800a96a:	43aa      	bics	r2, r5
 800a96c:	462b      	mov	r3, r5
 800a96e:	4621      	mov	r1, r4
 800a970:	d110      	bne.n	800a994 <__ieee754_sqrt+0x34>
 800a972:	4622      	mov	r2, r4
 800a974:	4620      	mov	r0, r4
 800a976:	4629      	mov	r1, r5
 800a978:	f7f5 fe3e 	bl	80005f8 <__aeabi_dmul>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	4620      	mov	r0, r4
 800a982:	4629      	mov	r1, r5
 800a984:	f7f5 fc82 	bl	800028c <__adddf3>
 800a988:	4604      	mov	r4, r0
 800a98a:	460d      	mov	r5, r1
 800a98c:	ec45 4b10 	vmov	d0, r4, r5
 800a990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a994:	2d00      	cmp	r5, #0
 800a996:	dc0e      	bgt.n	800a9b6 <__ieee754_sqrt+0x56>
 800a998:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a99c:	4322      	orrs	r2, r4
 800a99e:	d0f5      	beq.n	800a98c <__ieee754_sqrt+0x2c>
 800a9a0:	b19d      	cbz	r5, 800a9ca <__ieee754_sqrt+0x6a>
 800a9a2:	4622      	mov	r2, r4
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	f7f5 fc6e 	bl	8000288 <__aeabi_dsub>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	f7f5 ff4c 	bl	800084c <__aeabi_ddiv>
 800a9b4:	e7e8      	b.n	800a988 <__ieee754_sqrt+0x28>
 800a9b6:	152a      	asrs	r2, r5, #20
 800a9b8:	d115      	bne.n	800a9e6 <__ieee754_sqrt+0x86>
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	e009      	b.n	800a9d2 <__ieee754_sqrt+0x72>
 800a9be:	0acb      	lsrs	r3, r1, #11
 800a9c0:	3a15      	subs	r2, #21
 800a9c2:	0549      	lsls	r1, r1, #21
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d0fa      	beq.n	800a9be <__ieee754_sqrt+0x5e>
 800a9c8:	e7f7      	b.n	800a9ba <__ieee754_sqrt+0x5a>
 800a9ca:	462a      	mov	r2, r5
 800a9cc:	e7fa      	b.n	800a9c4 <__ieee754_sqrt+0x64>
 800a9ce:	005b      	lsls	r3, r3, #1
 800a9d0:	3001      	adds	r0, #1
 800a9d2:	02dc      	lsls	r4, r3, #11
 800a9d4:	d5fb      	bpl.n	800a9ce <__ieee754_sqrt+0x6e>
 800a9d6:	1e44      	subs	r4, r0, #1
 800a9d8:	1b12      	subs	r2, r2, r4
 800a9da:	f1c0 0420 	rsb	r4, r0, #32
 800a9de:	fa21 f404 	lsr.w	r4, r1, r4
 800a9e2:	4323      	orrs	r3, r4
 800a9e4:	4081      	lsls	r1, r0
 800a9e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9ea:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a9ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9f2:	07d2      	lsls	r2, r2, #31
 800a9f4:	bf5c      	itt	pl
 800a9f6:	005b      	lslpl	r3, r3, #1
 800a9f8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a9fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa00:	bf58      	it	pl
 800aa02:	0049      	lslpl	r1, r1, #1
 800aa04:	2600      	movs	r6, #0
 800aa06:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800aa0a:	107f      	asrs	r7, r7, #1
 800aa0c:	0049      	lsls	r1, r1, #1
 800aa0e:	2016      	movs	r0, #22
 800aa10:	4632      	mov	r2, r6
 800aa12:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800aa16:	1915      	adds	r5, r2, r4
 800aa18:	429d      	cmp	r5, r3
 800aa1a:	bfde      	ittt	le
 800aa1c:	192a      	addle	r2, r5, r4
 800aa1e:	1b5b      	suble	r3, r3, r5
 800aa20:	1936      	addle	r6, r6, r4
 800aa22:	0fcd      	lsrs	r5, r1, #31
 800aa24:	3801      	subs	r0, #1
 800aa26:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800aa2a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aa2e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800aa32:	d1f0      	bne.n	800aa16 <__ieee754_sqrt+0xb6>
 800aa34:	4605      	mov	r5, r0
 800aa36:	2420      	movs	r4, #32
 800aa38:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	eb0c 0e00 	add.w	lr, ip, r0
 800aa42:	dc02      	bgt.n	800aa4a <__ieee754_sqrt+0xea>
 800aa44:	d113      	bne.n	800aa6e <__ieee754_sqrt+0x10e>
 800aa46:	458e      	cmp	lr, r1
 800aa48:	d811      	bhi.n	800aa6e <__ieee754_sqrt+0x10e>
 800aa4a:	f1be 0f00 	cmp.w	lr, #0
 800aa4e:	eb0e 000c 	add.w	r0, lr, ip
 800aa52:	da3f      	bge.n	800aad4 <__ieee754_sqrt+0x174>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	db3d      	blt.n	800aad4 <__ieee754_sqrt+0x174>
 800aa58:	f102 0801 	add.w	r8, r2, #1
 800aa5c:	1a9b      	subs	r3, r3, r2
 800aa5e:	458e      	cmp	lr, r1
 800aa60:	bf88      	it	hi
 800aa62:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800aa66:	eba1 010e 	sub.w	r1, r1, lr
 800aa6a:	4465      	add	r5, ip
 800aa6c:	4642      	mov	r2, r8
 800aa6e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800aa72:	3c01      	subs	r4, #1
 800aa74:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800aa78:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aa7c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800aa80:	d1dc      	bne.n	800aa3c <__ieee754_sqrt+0xdc>
 800aa82:	4319      	orrs	r1, r3
 800aa84:	d01b      	beq.n	800aabe <__ieee754_sqrt+0x15e>
 800aa86:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800ab04 <__ieee754_sqrt+0x1a4>
 800aa8a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800ab08 <__ieee754_sqrt+0x1a8>
 800aa8e:	e9da 0100 	ldrd	r0, r1, [sl]
 800aa92:	e9db 2300 	ldrd	r2, r3, [fp]
 800aa96:	f7f5 fbf7 	bl	8000288 <__aeabi_dsub>
 800aa9a:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	4640      	mov	r0, r8
 800aaa4:	4649      	mov	r1, r9
 800aaa6:	f7f6 f823 	bl	8000af0 <__aeabi_dcmple>
 800aaaa:	b140      	cbz	r0, 800aabe <__ieee754_sqrt+0x15e>
 800aaac:	f1b5 3fff 	cmp.w	r5, #4294967295
 800aab0:	e9da 0100 	ldrd	r0, r1, [sl]
 800aab4:	e9db 2300 	ldrd	r2, r3, [fp]
 800aab8:	d10e      	bne.n	800aad8 <__ieee754_sqrt+0x178>
 800aaba:	3601      	adds	r6, #1
 800aabc:	4625      	mov	r5, r4
 800aabe:	1073      	asrs	r3, r6, #1
 800aac0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800aac4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800aac8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800aacc:	086b      	lsrs	r3, r5, #1
 800aace:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800aad2:	e759      	b.n	800a988 <__ieee754_sqrt+0x28>
 800aad4:	4690      	mov	r8, r2
 800aad6:	e7c1      	b.n	800aa5c <__ieee754_sqrt+0xfc>
 800aad8:	f7f5 fbd8 	bl	800028c <__adddf3>
 800aadc:	e9da 8900 	ldrd	r8, r9, [sl]
 800aae0:	4602      	mov	r2, r0
 800aae2:	460b      	mov	r3, r1
 800aae4:	4640      	mov	r0, r8
 800aae6:	4649      	mov	r1, r9
 800aae8:	f7f5 fff8 	bl	8000adc <__aeabi_dcmplt>
 800aaec:	b120      	cbz	r0, 800aaf8 <__ieee754_sqrt+0x198>
 800aaee:	1cab      	adds	r3, r5, #2
 800aaf0:	bf08      	it	eq
 800aaf2:	3601      	addeq	r6, #1
 800aaf4:	3502      	adds	r5, #2
 800aaf6:	e7e2      	b.n	800aabe <__ieee754_sqrt+0x15e>
 800aaf8:	1c6b      	adds	r3, r5, #1
 800aafa:	f023 0501 	bic.w	r5, r3, #1
 800aafe:	e7de      	b.n	800aabe <__ieee754_sqrt+0x15e>
 800ab00:	7ff00000 	.word	0x7ff00000
 800ab04:	0800cda8 	.word	0x0800cda8
 800ab08:	0800cda0 	.word	0x0800cda0

0800ab0c <_init>:
 800ab0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0e:	bf00      	nop
 800ab10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab12:	bc08      	pop	{r3}
 800ab14:	469e      	mov	lr, r3
 800ab16:	4770      	bx	lr

0800ab18 <_fini>:
 800ab18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1a:	bf00      	nop
 800ab1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab1e:	bc08      	pop	{r3}
 800ab20:	469e      	mov	lr, r3
 800ab22:	4770      	bx	lr
